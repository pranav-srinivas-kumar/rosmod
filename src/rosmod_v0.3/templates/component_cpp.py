#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1441894813.072561
__CHEETAH_genTimestamp__ = 'Thu Sep 10 09:20:13 2015'
__CHEETAH_src__ = '/home/jeb/Repositories/rosmod-gui/src/rosmod_v0.3/templates/component_cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Sep 10 07:29:54 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class component_cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(component_cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 1, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 1, col 1.
        write(u''' "''')
        _v = VFFSL(SL,"package_name",True) # u'$package_name' on line 1, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 1, col 16.
        write(u'''/''')
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 1, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 1, col 30.
        write(u'''.hpp"

''')
        if VFFSL(SL,"component_type",True) == "KSP": # generated from line 3, col 1
            write(u'''KRPCI krpci_client;
''')
        if VFFSL(SL,"component_type",True) == "SUMO": # generated from line 6, col 1
            write(u'''SUMO_CLIENT sumo_client;
''')
        write(u'''
''')
        if VFFSL(SL,"user_globals",True) == "": # generated from line 10, col 1
            write(u'''//# Start User Globals Marker
//# End User Globals Marker
''')
        else: # generated from line 13, col 1
            write(u'''//# Start User Globals Marker
''')
            _v = VFFSL(SL,"user_globals",True) # u'$user_globals' on line 15, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$user_globals')) # from line 15, col 1.
            write(u'''//# End User Globals Marker
''')
        write(u'''
// Initialization Function
''')
        if VFFSL(SL,"init_business_logic",True) == "": # generated from line 19, col 1
            write(u'''//# Start Init Marker
void ''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 21, col 6
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 21, col 6.
            write(u'''::Init(const ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 21, col 37
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 21, col 37.
            write(u'''::TimerEvent& event)
{
''')
            if VFFSL(SL,"mod",True) != "": # generated from line 23, col 1
                write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Entering ''')
                _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 24, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 24, col 43.
                write(u'''::Init");
''')
            write(u'''  // Initialize Here
''')
            if VFFSL(SL,"component_type",True) == "SUMO": # generated from line 27, col 1
                write(u'''  std::string sumo_host;
  int sumo_port;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--sumo_host"))
\t{
\t  sumo_host = node_argv[i+1];
\t}
      if (!strcmp(node_argv[i], "--sumo_port"))
\t{
\t  sumo_port = atoi(node_argv[i+1]);
\t}
    }
  sumo_client.create_connection(sumo_port, sumo_host);
''')
            if VFFSL(SL,"component_type",True) == "KSP": # generated from line 43, col 1
                write(u'''  std::string ksp_host;
  int ksp_port;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--ksp_host"))
\t{
\t  ksp_host = node_argv[i+1];
\t}
      if (!strcmp(node_argv[i], "--ksp_port"))
\t{
\t  ksp_port = atoi(node_argv[i+1]);
\t}
    }
  krpci_client.SetPort(ksp_port);
  krpci_client.SetIP(ksp_host);
''')
            if VFFSL(SL,"trafficGen",True): # generated from line 60, col 1
                write(u'''  srand (time(NULL));
  double tg_duration = -1;
  std::string fName;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--tg_time"))
\t{
\t  tg_duration = atof(node_argv[i+1]);
\t}
    }
''')
                if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 71, col 1
                    write(u'''  uint64_t capacityBits = 400000;
  bool enable_sendback = true;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--buffer_capacity_bits"))
\t{
\t  capacityBits = atoi(node_argv[i+1]);
\t}
      if (!strcmp(node_argv[i], "--buffer_capacity_bytes"))
\t{
\t  capacityBits = atoi(node_argv[i+1]) * 8;
\t}
      if (!strcmp(node_argv[i], "--disable_sendback"))
\t{
\t  enable_sendback = false;
\t}
    }
''')
                    for sub in VFFSL(SL,"subscribers",True): # generated from line 89, col 1
                        write(u'''  if (config.profileMap.find("''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 90, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 90, col 31.
                        write(u'''") != config.profileMap.end())
    {
      ''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 92, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 92, col 7.
                        write(u'''_recv_mw.init(node_argc,
\t\t\t\t\t     node_argv,
\t\t\t\t\t     config.profileMap["''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 94, col 30
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 94, col 30.
                        write(u'''"],
\t\t\t\t\t     capacityBits);
      if ( tg_duration < 0 )
\t''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 97, col 2
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 97, col 2.
                        write(u'''_recv_mw.set_duration(''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 97, col 49
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 97, col 49.
                        write(u'''_recv_mw.profile.period);
      else
\t''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 99, col 2
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 99, col 2.
                        write(u'''_recv_mw.set_duration(tg_duration);
      fName = nodeName + "." + compName + ".''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 100, col 45
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 100, col 45.
                        write(u'''.network.csv";
      ''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 101, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 101, col 7.
                        write(u'''_recv_mw.set_enable_sendback(enable_sendback);
      ''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 102, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 102, col 7.
                        write(u'''_recv_mw.set_output_filename(fName);
      ''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 103, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 103, col 7.
                        write(u'''_recv_mw.set_recv_done_callback(boost::bind(&''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 103, col 77
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 103, col 77.
                        write(u'''::mw_recv_done_callback, this, &''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 103, col 124
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 103, col 124.
                        write(u'''_recv_mw));
      ''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 104, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 104, col 7.
                        write(u'''_id = 0;
    }
  if (config.portSenderMap.find("''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 106, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 106, col 34.
                        write(u'''") != config.portSenderMap.end())
    {
      for (auto it=config.portSenderMap["''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 108, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 108, col 42.
                        write(u'''"].begin();
\t   it != config.portSenderMap["''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 109, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 109, col 33.
                        write(u'''"].end(); ++it)
\t{
\t  ''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 111, col 4
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 111, col 4.
                        write(u'''_recv_mw.add_sender( it->first, it->second );
\t}
    }
  
''')
                if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 117, col 1
                    write(u'''  max_data_length = 8192;
  tg_misbehave = false;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--max_data_length_bytes"))
\t{
\t  max_data_length = atoi(node_argv[i+1]);
\t}
      if (!strcmp(node_argv[i], "--max_data_length_bits"))
\t{
\t  max_data_length = atoi(node_argv[i+1]) / 8;
\t}
      if (!strcmp(node_argv[i], "--tg_misbehave"))
\t{
\t  tg_misbehave = true;
\t}
    }
  ros::NodeHandle nh;
  ros::TimerOptions timer_options;
''')
                    for pub in VFFSL(SL,"publishers",True): # generated from line 137, col 1
                        write(u'''  if (config.profileMap.find("''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"$pub.properties['name']" on line 138, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u"$pub.properties['name']")) # from line 138, col 31.
                        write(u'''") != config.profileMap.end())
    {
      ''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 140, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 140, col 7.
                        write(u'''_send_mw.init(node_argc,
\t\t\t\t\t     node_argv,
\t\t\t\t\t     config.uuidMap["''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"$pub.properties['name']" on line 142, col 27
                        if _v is not None: write(_filter(_v, rawExpr=u"$pub.properties['name']")) # from line 142, col 27.
                        write(u'''"],
\t\t\t\t\t     config.profileMap["''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"$pub.properties['name']" on line 143, col 30
                        if _v is not None: write(_filter(_v, rawExpr=u"$pub.properties['name']")) # from line 143, col 30.
                        write(u'''"]);
      if ( tg_duration < 0 )
\t''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 145, col 2
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 145, col 2.
                        write(u'''_send_mw.set_duration(''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 145, col 49
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 145, col 49.
                        write(u'''_send_mw.profile.period);
      else
\t''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 147, col 2
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 147, col 2.
                        write(u'''_send_mw.set_duration(tg_duration);
      fName = nodeName + "." + compName + ".''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 148, col 45
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 148, col 45.
                        write(u'''.network.csv";
      ''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 149, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 149, col 7.
                        write(u'''_send_mw.set_output_filename(fName);

      timer_options = 
\tros::TimerOptions
\t(ros::Duration(-1),
\t boost::bind(&''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 154, col 16
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 154, col 16.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 154, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 154, col 33.
                        write(u'''_timerCallback, this, _1),
\t &this->compQueue,
\t true);
      ''')
                        _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 157, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 157, col 7.
                        write(u'''_timer = nh.createTimer(timer_options);
    }
''')
            write(u'''  // Stop Init Timer
  initOneShotTimer.stop();
''')
            if VFFSL(SL,"mod",True) != "": # generated from line 164, col 1
                write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Exiting ''')
                _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 165, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 165, col 42.
                write(u'''::Init");
''')
            write(u'''}
//# End Init Marker
''')
        else: # generated from line 169, col 1
            write(u'''//# Start Init Marker
''')
            _v = VFFSL(SL,"init_business_logic",True) # u'$init_business_logic' on line 171, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$init_business_logic')) # from line 171, col 1.
            write(u'''//# End Init Marker
''')
        write(u'''
''')
        if VFFSL(SL,"trafficGen",True): # generated from line 174, col 1
            if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 175, col 1
                for pub in VFFSL(SL,"publishers",True): # generated from line 176, col 1
                    write(u'''void ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 177, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 177, col 6.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 177, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 177, col 23.
                    write(u'''_timerCallback(const ros::TimerEvent& event)
{
  ''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$pub.properties["message_reference"].parent.properties["name"]' on line 179, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["message_reference"].parent.properties["name"]')) # from line 179, col 3.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 179, col 67
                    if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 179, col 67.
                    write(u''' msg;
  msg.uuid = ''')
                    _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 180, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 180, col 14.
                    write(u'''_send_mw.get_uuid();
  msg.bytes.resize(max_data_length,0);
  double timerDelay = 0;
  try
    {
      timerDelay =
\t''')
                    _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 186, col 2
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 186, col 2.
                    write(u'''_send_mw.send<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$pub.properties["message_reference"].parent.properties["name"]' on line 186, col 41
                    if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["message_reference"].parent.properties["name"]')) # from line 186, col 41.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 186, col 105
                    if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 186, col 105.
                    write(u'''>(''')
                    _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"$pub.properties['name']" on line 186, col 164
                    if _v is not None: write(_filter(_v, rawExpr=u"$pub.properties['name']")) # from line 186, col 164.
                    write(u''', msg);
    }
  catch ( Network::Exceeded_Production_Profile& ex )
    {
      LOGGER.DEBUG("Prevented from sending on the network!");
    }

  if ( ros::Time::now() >= ''')
                    _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 193, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 193, col 28.
                    write(u'''_send_mw.get_end_time() )
    {
      LOGGER.DEBUG("writing output\\n");
      ''')
                    _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 196, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 196, col 7.
                    write(u'''_send_mw.record();
    }
  else
    {
      if (tg_misbehave)
\ttimerDelay -= 0.1;
      ros::TimerOptions timer_options;
      timer_options = 
\tros::TimerOptions
\t(ros::Duration(timerDelay),
\t boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 206, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 206, col 16.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 206, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 206, col 33.
                    write(u'''_timerCallback, this, _1),
\t &this->compQueue,
\t true);
      ros::NodeHandle nh;
      ''')
                    _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 210, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 210, col 7.
                    write(u'''_timer = nh.createTimer(timer_options);
    }
}
''')
        write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 217, col 1
            if VFFSL(SL,"trafficGen",True): # generated from line 218, col 1
                write(u'''void ''')
                _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 219, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 219, col 6.
                write(u'''::mw_recv_done_callback(Network::receiver* receiver_mw)
{
  LOGGER.DEBUG("Writing middleware log.");
  LOGGER.DEBUG("Max middleware buffer: %lu bits", receiver_mw->buffer.maxBits());
  receiver_mw->record();
}
''')
            write(u'''
''')
            for sub in VFFSL(SL,"subscribers",True): # generated from line 227, col 1
                write(u'''// Subscriber Callback - ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 228, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 228, col 26.
                write(u'''
''')
                if VFN(VFFSL(SL,"sub",True),"properties",True)["business_logic"] == "": # generated from line 229, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 230, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 230, col 11.
                    write(u'''_OnOneData Marker
void ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 231, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 231, col 6.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 231, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 231, col 23.
                    write(u'''_OnOneData(const ''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 231, col 65
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 231, col 65.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 231, col 129
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 231, col 129.
                    write(u'''::ConstPtr& received_data)
{
''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 233, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Entering ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 234, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 234, col 43.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 234, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 234, col 60.
                        write(u'''_OnOneData");
''')
                    write(u'''  // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 236, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 236, col 25.
                    write(u''' Subscriber

''')
                    if VFFSL(SL,"trafficGen",True): # generated from line 238, col 1
                        write(u'''  uint64_t uuid = received_data->uuid;
  uint64_t msgBytes = ros::serialization::Serializer<''')
                        _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 240, col 54
                        if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 240, col 54.
                        write(u'''::''')
                        _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 240, col 118
                        if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 240, col 118.
                        write(u'''>::serializedLength(*received_data);
  ros::Time now = ros::Time::now();
  ''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 242, col 3
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 242, col 3.
                        write(u'''_recv_mw.update_sender_stream(uuid, now, msgBytes * 8);
  Network::Message new_msg;
  new_msg.Bytes(msgBytes);
  new_msg.Id(''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 245, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 245, col 14.
                        write(u'''_id++);
  new_msg.TimeStamp();
  ''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 247, col 3
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 247, col 3.
                        write(u'''_recv_mw.buffer.send(new_msg, msgBytes * 8);
''')
                    write(u'''  
''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 250, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Exiting ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 251, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 251, col 42.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 251, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 251, col 59.
                        write(u'''_OnOneData");
''')
                    write(u'''}
//# End ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 254, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 254, col 9.
                    write(u'''_OnOneData Marker
''')
                else: # generated from line 255, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 256, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 256, col 11.
                    write(u'''_OnOneData Marker
''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["business_logic"] # u'$sub.properties["business_logic"]' on line 257, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["business_logic"]')) # from line 257, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 257, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 257, col 42.
                    write(u'''_OnOneData Marker
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)) > 0: # generated from line 262, col 1
            for server in VFFSL(SL,"servers",True): # generated from line 263, col 1
                write(u'''// Server Callback - ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 264, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 264, col 22.
                write(u'''
''')
                if VFN(VFFSL(SL,"server",True),"properties",True)["business_logic"] == "": # generated from line 265, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 266, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 266, col 11.
                    write(u'''Callback Marker
bool ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 267, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 267, col 6.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 267, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 267, col 23.
                    write(u'''Callback(''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 267, col 92
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 267, col 92.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 267, col 159
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 267, col 159.
                    write(u'''::Request  &req,
  ''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 268, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 268, col 3.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 268, col 70
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 268, col 70.
                    write(u'''::Response &res)
{
''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 270, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Entering ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 271, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 271, col 43.
                        write(u'''::''')
                        _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 271, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 271, col 60.
                        write(u'''Callback");
''')
                    write(u'''  // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 273, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 273, col 25.
                    write(u''' Server

''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 275, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Exiting ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 276, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 276, col 42.
                        write(u'''::''')
                        _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 276, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 276, col 59.
                        write(u'''Callback");
''')
                    write(u'''  return true;
}
//# End ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 280, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 280, col 9.
                    write(u'''Callback Marker
''')
                else: # generated from line 281, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 282, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 282, col 11.
                    write(u'''Callback Marker
''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["business_logic"] # u'$server.properties["business_logic"]' on line 283, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["business_logic"]')) # from line 283, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 283, col 45
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 283, col 45.
                    write(u'''Callback Marker
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)) > 0: # generated from line 288, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 289, col 1
                write(u'''// Timer Callback - ''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 290, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 290, col 21.
                write(u'''
''')
                if VFN(VFFSL(SL,"timer",True),"properties",True)["business_logic"] == "": # generated from line 291, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 292, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 292, col 11.
                    write(u'''Callback Marker
void ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 293, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 293, col 6.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 293, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 293, col 23.
                    write(u'''Callback(const ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 293, col 68
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 293, col 68.
                    write(u'''::TimerEvent& event)
{
''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 295, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Entering ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 296, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 296, col 43.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 296, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 296, col 60.
                        write(u'''Callback");
''')
                    write(u'''  // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 298, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 298, col 25.
                    write(u''' Timer

''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 300, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Exiting ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 301, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 301, col 42.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 301, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 301, col 59.
                        write(u'''Callback");
''')
                    write(u'''}
//# End ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 304, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 304, col 9.
                    write(u'''Callback Marker
''')
                else: # generated from line 305, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 306, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 306, col 11.
                    write(u'''Callback Marker
''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["business_logic"] # u'$timer.properties["business_logic"]' on line 307, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["business_logic"]')) # from line 307, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 307, col 44
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 307, col 44.
                    write(u'''Callback Marker
''')
            write(u'''
''')
        write(u'''
// Destructor - Cleanup Ports & Timers
''')
        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 314, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 314, col 1.
        write(u'''::~''')
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 314, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 314, col 19.
        write(u'''()
{
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)) > 0: # generated from line 316, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 317, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 318, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 318, col 3.
                write(u'''.stop();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 321, col 1
            for pub in VFFSL(SL,"publishers",True): # generated from line 322, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'${pub.properties["name"]}' on line 323, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["name"]}')) # from line 323, col 3.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 326, col 1
            for sub in VFFSL(SL,"subscribers",True): # generated from line 327, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 328, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 328, col 3.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)) > 0: # generated from line 331, col 1
            for server in VFFSL(SL,"servers",True): # generated from line 332, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 333, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 333, col 3.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"required_services",True)) > 0: # generated from line 336, col 1
            for client in VFFSL(SL,"clients",True): # generated from line 337, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'${client.properties["name"]}' on line 338, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${client.properties["name"]}')) # from line 338, col 3.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"destructor",True) == "": # generated from line 341, col 1
            write(u'''  //# Start Destructor Marker
  //# End Destructor Marker
''')
        else: # generated from line 344, col 1
            write(u'''  //# Start Destructor Marker
''')
            _v = VFFSL(SL,"destructor",True) # u'$destructor' on line 346, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$destructor')) # from line 346, col 1.
            write(u'''  //# End Destructor Marker
''')
        write(u'''}

// Startup - Setup Component Ports & Timers
void ''')
        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 351, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 351, col 6.
        write(u'''::startUp()
{
  ros''')
        _v = VFFSL(SL,"mod",True) # u'${mod}' on line 353, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 353, col 6.
        write(u'''::NodeHandle nh;
  std::string advertiseName;

  // Scheduling Scheme is FIFO
''')
        if VFFSL(SL,"mod",True) != "": # generated from line 357, col 1
            write(u'''  this->compQueue.scheduling_scheme = scheduling_scheme;
  rosmod::ROSMOD_Callback_Options callback_options;
''')
        write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 362, col 1
            for sub in VFFSL(SL,"subscribers",True): # generated from line 363, col 1
                if VFFSL(SL,"mod",True) != "": # generated from line 364, col 1
                    write(u'''  callback_options.alias = "''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 365, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 365, col 29.
                    write(u'''_OnOneData";
  callback_options.priority = ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["priority"] # u'$sub.properties["priority"]' on line 366, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["priority"]')) # from line 366, col 31.
                    write(u''';
  callback_options.deadline.sec = ''')
                    _v = VFFSL(SL,"int",False)(sub.properties["deadline"].split('.')[0]) # u'${int(sub.properties["deadline"].split(\'.\')[0])}' on line 367, col 35
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(sub.properties["deadline"].split(\'.\')[0])}')) # from line 367, col 35.
                    write(u''';
  callback_options.deadline.nsec = ''')
                    _v = VFFSL(SL,"int",False)(float('0.' + (sub.properties["deadline"].split('.')[1]))*1000000000) # u'${int(float(\'0.\' + (sub.properties["deadline"].split(\'.\')[1]))*1000000000)}' on line 368, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(float(\'0.\' + (sub.properties["deadline"].split(\'.\')[1]))*1000000000)}')) # from line 368, col 36.
                    write(u''';
''')
                write(u'''  // Component Subscriber - ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 370, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 370, col 29.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 371, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 371, col 20.
                write(u'''";
  if (portGroupMap.find("''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 372, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 372, col 26.
                write(u'''") != portGroupMap.end())
    advertiseName += "_" + portGroupMap["''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 373, col 42
                if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 373, col 42.
                write(u'''"];
  ros''')
                _v = VFFSL(SL,"mod",True) # u'${mod}' on line 374, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 374, col 6.
                write(u'''::SubscribeOptions ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 374, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 374, col 31.
                write(u'''_options;
''')
                if VFFSL(SL,"mod",True) != "": # generated from line 375, col 1
                    write(u'''  ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 376, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 376, col 3.
                    write(u'''_options = ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 376, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 376, col 42.
                    write(u'''::SubscribeOptions::create<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 376, col 75
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 376, col 75.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 376, col 139
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 376, col 139.
                    write(u'''>
      (advertiseName.c_str(),
       1000,
       boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 379, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 379, col 21.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 379, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 379, col 38.
                    write(u'''_OnOneData, this, _1),
       ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 380, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 380, col 11.
                    write(u'''::VoidPtr(),
       &this->compQueue,
       callback_options);
  this->''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 383, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 383, col 9.
                    write(u''' = nh.subscribe(''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 383, col 50
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 383, col 50.
                    write(u'''_options);
''')
                else: # generated from line 384, col 1
                    write(u'''  ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 385, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 385, col 3.
                    write(u'''_options = ros::SubscribeOptions::create<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 385, col 69
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 385, col 69.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 385, col 133
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 385, col 133.
                    write(u'''>
      (advertiseName.c_str(),
       1000,
       boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 388, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 388, col 21.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 388, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 388, col 38.
                    write(u'''_OnOneData, this, _1),
       ros::VoidPtr(),
       &this->compQueue);
  this->''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 391, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 391, col 9.
                    write(u''' = nh.subscribe(''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 391, col 50
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 391, col 50.
                    write(u'''_options);  
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 396, col 1
            for pub in VFFSL(SL,"publishers",True): # generated from line 397, col 1
                write(u'''  // Component Publisher - ''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 398, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 398, col 28.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 399, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 399, col 20.
                write(u'''";
  if (portGroupMap.find("''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 400, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 400, col 26.
                write(u'''") != portGroupMap.end())
    advertiseName += "_" + portGroupMap["''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 401, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 401, col 42.
                write(u'''"];
  this->''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'${pub.properties["name"]}' on line 402, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["name"]}')) # from line 402, col 9.
                write(u''' = nh.advertise<''')
                _v = VFN(VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$pub.properties["message_reference"].parent.properties["name"]' on line 402, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["message_reference"].parent.properties["name"]')) # from line 402, col 50.
                write(u'''::''')
                _v = VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 402, col 114
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 402, col 114.
                write(u'''>(advertiseName.c_str(), 1000);
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)): # generated from line 406, col 1
            for server in VFFSL(SL,"servers",True): # generated from line 407, col 1
                if VFFSL(SL,"mod",True) != "": # generated from line 408, col 1
                    write(u'''  callback_options.alias = "''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 409, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 409, col 29.
                    write(u'''Callback";
  callback_options.priority = ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["priority"] # u'$server.properties["priority"]' on line 410, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["priority"]')) # from line 410, col 31.
                    write(u''';
  callback_options.deadline.sec =''')
                    _v = VFFSL(SL,"int",False)(server.properties["deadline"].split('.')[0]) # u'${int(server.properties["deadline"].split(\'.\')[0])}' on line 411, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(server.properties["deadline"].split(\'.\')[0])}')) # from line 411, col 34.
                    write(u''';
  callback_options.deadline.nsec = ''')
                    _v = VFFSL(SL,"int",False)(float('0.' + (server.properties["deadline"].split('.')[1]))*1000000000) # u'${int(float(\'0.\' + (server.properties["deadline"].split(\'.\')[1]))*1000000000)}' on line 412, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(float(\'0.\' + (server.properties["deadline"].split(\'.\')[1]))*1000000000)}')) # from line 412, col 36.
                    write(u''';
''')
                write(u'''  // Component Server - ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 414, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 414, col 25.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 415, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 415, col 20.
                write(u'''";
  if (portGroupMap.find("''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 416, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 416, col 26.
                write(u'''") != portGroupMap.end())
    advertiseName += "_" + portGroupMap["''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 417, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 417, col 42.
                write(u'''"];
  ros''')
                _v = VFFSL(SL,"mod",True) # u'${mod}' on line 418, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 418, col 6.
                write(u'''::AdvertiseServiceOptions ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 418, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 418, col 38.
                write(u'''_server_options;
''')
                if VFFSL(SL,"mod",True) != "": # generated from line 419, col 1
                    write(u'''  ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 420, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 420, col 3.
                    write(u'''_server_options = ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 420, col 52
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 420, col 52.
                    write(u'''::AdvertiseServiceOptions::create<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 420, col 92
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 420, col 92.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 420, col 159
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 420, col 159.
                    write(u'''>
      (advertiseName.c_str(),
       boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 422, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 422, col 21.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 422, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 422, col 38.
                    write(u'''Callback, this, _1, _2),
       ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 423, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 423, col 11.
                    write(u'''::VoidPtr(),
       &this->compQueue,
       callback_options);
  this->''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 426, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 426, col 9.
                    write(u''' = nh.advertiseService(''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 426, col 60
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 426, col 60.
                    write(u'''_server_options);
''')
                else: # generated from line 427, col 1
                    write(u'''  ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 428, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 428, col 3.
                    write(u'''_server_options = ros::AdvertiseServiceOptions::create<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 428, col 86
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 428, col 86.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 428, col 153
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 428, col 153.
                    write(u'''>
      (advertiseName.c_str(),
       boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 430, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 430, col 21.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 430, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 430, col 38.
                    write(u'''Callback, this, _1, _2),
       ros::VoidPtr(),
       &this->compQueue);
  this->''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 433, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 433, col 9.
                    write(u''' = nh.advertiseService(''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 433, col 60
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 433, col 60.
                    write(u'''_server_options);  
''')
            write(u''' 
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"required_services",True)) > 0: # generated from line 438, col 1
            write(u'''  // Configure all required services associated with this component
''')
            for client in VFFSL(SL,"clients",True): # generated from line 440, col 1
                write(u'''  // Component Client - ''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 441, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 441, col 25.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"client",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$client.properties["service_reference"].properties["name"]' on line 442, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].properties["name"]')) # from line 442, col 20.
                write(u'''";
  if (portGroupMap.find("''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 443, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 443, col 26.
                write(u'''") != portGroupMap.end())
    advertiseName += "_" + portGroupMap["''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 444, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 444, col 42.
                write(u'''"];
  this->''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'${client.properties["name"]}' on line 445, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${client.properties["name"]}')) # from line 445, col 9.
                write(u''' = nh.serviceClient<''')
                _v = VFN(VFN(VFN(VFFSL(SL,"client",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$client.properties["service_reference"].parent.properties["name"]' on line 445, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].parent.properties["name"]')) # from line 445, col 57.
                write(u'''::''')
                _v = VFN(VFN(VFFSL(SL,"client",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$client.properties["service_reference"].properties["name"]' on line 445, col 124
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].properties["name"]')) # from line 445, col 124.
                write(u'''>(advertiseName.c_str(), true); 
''')
            write(u'''
''')
        write(u'''  // Init Timer
''')
        if VFFSL(SL,"mod",True) != "": # generated from line 450, col 1
            write(u'''  callback_options.alias = "Init_Timer";
  callback_options.priority = 99;
  callback_options.deadline.sec = 1;
  callback_options.deadline.nsec = 0;
  ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 455, col 6
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 455, col 6.
            write(u'''::TimerOptions timer_options;
  timer_options = 
    ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 457, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 457, col 8.
            write(u'''::TimerOptions
    (ros::Duration(-1),
     boost::bind(&''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 459, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 459, col 19.
            write(u'''::Init, this, _1),
     &this->compQueue,
     callback_options,
     true,
     false);
''')
        else  : # generated from line 464, col 1
            write(u'''  ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 465, col 6
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 465, col 6.
            write(u'''::TimerOptions timer_options;
  timer_options = 
    ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 467, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 467, col 8.
            write(u'''::TimerOptions
    (ros::Duration(-1),
     boost::bind(&''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 469, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 469, col 19.
            write(u'''::Init, this, _1),
     &this->compQueue,
     true,
     false);
''')
        write(u'''  this->initOneShotTimer = nh.createTimer(timer_options);
  this->initOneShotTimer.stop();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)): # generated from line 476, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 477, col 1
                if VFFSL(SL,"mod",True) != "": # generated from line 478, col 1
                    write(u'''  callback_options.alias = "''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 479, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 479, col 29.
                    write(u'''Callback";
  callback_options.priority = ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["priority"] # u'$timer.properties["priority"]' on line 480, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["priority"]')) # from line 480, col 31.
                    write(u''';
  callback_options.deadline.sec = ''')
                    _v = VFFSL(SL,"int",False)(timer.properties["deadline"].split('.')[0]) # u'${int(timer.properties["deadline"].split(\'.\')[0])}' on line 481, col 35
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(timer.properties["deadline"].split(\'.\')[0])}')) # from line 481, col 35.
                    write(u''';
  callback_options.deadline.nsec = ''')
                    _v = VFFSL(SL,"int",False)(float('0.' + (timer.properties["deadline"].split('.')[1]))*1000000000) # u'${int(float(\'0.\' + (timer.properties["deadline"].split(\'.\')[1]))*1000000000)}' on line 482, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(float(\'0.\' + (timer.properties["deadline"].split(\'.\')[1]))*1000000000)}')) # from line 482, col 36.
                    write(u''';
  // Component Timer - ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 483, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 483, col 24.
                    write(u'''
  timer_options = 
    ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 485, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 485, col 8.
                    write(u'''::TimerOptions
''')
                    if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 486, col 1
                        write(u'''    (ros::Duration(-1),
''')
                    else: # generated from line 488, col 1
                        write(u'''    (ros::Duration(''')
                        _v = VFN(VFFSL(SL,"timer",True),"properties",True)["period"] # u'$timer.properties["period"]' on line 489, col 20
                        if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["period"]')) # from line 489, col 20.
                        write(u'''),
''')
                    write(u'''     boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 491, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 491, col 19.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 491, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 491, col 36.
                    write(u'''Callback, this, _1),
''')
                    if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 492, col 1
                        write(u'''     &this->compQueue,
     callback_options,
     true,
     false);
''')
                    else: # generated from line 497, col 1
                        write(u'''     &this->compQueue,
     callback_options,
     false,
     false);
''')
                else : # generated from line 503, col 1
                    write(u'''  // Component Timer - ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 504, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 504, col 24.
                    write(u'''
  timer_options = 
    ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 506, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 506, col 8.
                    write(u'''::TimerOptions
''')
                    if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 507, col 1
                        write(u'''    (ros::Duration(-1),
''')
                    else: # generated from line 509, col 1
                        write(u'''    (ros::Duration(''')
                        _v = VFN(VFFSL(SL,"timer",True),"properties",True)["period"] # u'$timer.properties["period"]' on line 510, col 20
                        if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["period"]')) # from line 510, col 20.
                        write(u'''),
''')
                    write(u'''     boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 512, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 512, col 19.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 512, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 512, col 36.
                    write(u'''Callback, this, _1),
''')
                    if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 513, col 1
                        write(u'''     &this->compQueue, true, false);
''')
                    else: # generated from line 515, col 1
                        write(u'''     &this->compQueue, false, false);
''')
                write(u'''  this->''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$(timer.properties["name"])' on line 519, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$(timer.properties["name"])')) # from line 519, col 9.
                write(u''' = nh.createTimer(timer_options);
''')
            write(u'''
''')
        write(u'''  // Identify the pwd of Node Executable
  std::string s = node_argv[0];
  std::string exec_path = s;
  std::string delimiter = "/";
  std::string exec, pwd;
  size_t pos = 0;
  while ((pos = s.find(delimiter)) != std::string::npos) {
    exec = s.substr(0, pos);
    s.erase(0, pos + delimiter.length());
  }
  exec = s.substr(0, pos);
  pwd = exec_path.erase(exec_path.find(exec), exec.length());
  std::string log_file_path = pwd + nodeName + "." + compName + ".log"; 
  
  // Create the log file & open file stream
  LOGGER.CREATE_FILE(log_file_path);
  
  // Establish log levels of LOGGER
  LOGGER.SET_LOG_LEVELS(logLevels);

''')
        if VFFSL(SL,"component_type",True) == "KSP": # generated from line 543, col 1
            write(u'''  krpci_client.SetName(nodeName + "_" + compName);
''')
        write(u'''
  this->comp_sync_pub = nh.advertise<std_msgs::Bool>("component_synchronization", 1000);
  
  ros''')
        _v = VFFSL(SL,"mod",True) # u'${mod}' on line 549, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 549, col 6.
        write(u'''::SubscribeOptions comp_sync_sub_options;
''')
        if VFFSL(SL,"mod",True) != "": # generated from line 550, col 1
            write(u'''  rosmod::rosmod_callback_options sync_callback_options;
  Comp_sync_sub_options = ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 552, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 552, col 30.
            write(u'''::SubscribeOptions::Create<std_msgs::Bool>
    ("Component_Synchronization",
     1000,
     boost::bind(&''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 555, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 555, col 19.
            write(u'''::component_synchronization_OnOneData, this, _1),
     ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 556, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 556, col 9.
            write(u'''::VoidPtr(),
     &this->compQueue,
     sync_callback_options);
''')
        else: # generated from line 559, col 1
            write(u'''  comp_sync_sub_options = ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 560, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 560, col 30.
            write(u'''::SubscribeOptions::create<std_msgs::Bool>
    ("component_synchronization",
     1000,
     boost::bind(&''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 563, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 563, col 19.
            write(u'''::component_synchronization_OnOneData, this, _1),
     ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 564, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 564, col 9.
            write(u'''::VoidPtr(),
     &this->compQueue);
''')
        write(u'''  this->comp_sync_sub = nh.subscribe(comp_sync_sub_options);

  ros''')
        _v = VFFSL(SL,"mod",True) # u'${mod}' on line 569, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 569, col 6.
        write(u'''::Time now = ros''')
        _v = VFFSL(SL,"mod",True) # u'${mod}' on line 569, col 28
        if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 569, col 28.
        write(u'''::Time::now();
  while ( this->comp_sync_sub.getNumPublishers() < this->num_comps_to_sync &&
\t  (ros''')
        _v = VFFSL(SL,"mod",True) # u'${mod}' on line 571, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 571, col 8.
        write(u'''::Time::now() - now) < ros''')
        _v = VFFSL(SL,"mod",True) # u'${mod}' on line 571, col 40
        if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 571, col 40.
        write(u'''::Duration(comp_sync_timeout) )
    ros::Duration(0.1).sleep();
  ros::Duration(0.5).sleep();
  this->comp_sync_sub.shutdown();
  this->comp_sync_pub.shutdown();

  this->initOneShotTimer.start();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)): # generated from line 578, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 579, col 1
                write(u'''  this->''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$(timer.properties["name"])' on line 580, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$(timer.properties["name"])')) # from line 580, col 9.
                write(u'''.start();
''')
        write(u'''  
''')
        if VFFSL(SL,"mod",True) != "": # generated from line 584, col 1
            write(u'''  compQueue.ROSMOD_LOGGER.CREATE_FILE(pwd + "ROSMOD_DEBUG." + nodeName + "." + compName + ".log");
''')
        write(u'''}

extern "C" {
  Component *maker(ComponentConfig &config, int argc, char **argv) {
    return new ''')
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 591, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 591, col 16.
        write(u'''(config,argc,argv);
  }
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_component_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(component_cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(component_cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(component_cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=component_cpp()).run()


