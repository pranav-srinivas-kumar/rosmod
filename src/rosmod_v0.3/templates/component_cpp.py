#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1436908657.135739
__CHEETAH_genTimestamp__ = 'Tue Jul 14 16:17:37 2015'
__CHEETAH_src__ = '/home/pranav/Repositories/rosmod-gui/src/rosmod_v0.3/templates/component_cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Jul 14 16:17:21 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class component_cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(component_cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 1, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 1, col 1.
        write(u''' "''')
        _v = VFFSL(SL,"package_name",True) # u'$package_name' on line 1, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 1, col 16.
        write(u'''/''')
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 1, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 1, col 30.
        write(u'''.hpp"

''')
        if VFFSL(SL,"component_type",True) == "KSP": # generated from line 3, col 1
            write(u'''KRPCI krpci_client;
''')
        write(u'''
''')
        if VFFSL(SL,"user_globals",True) == "": # generated from line 7, col 1
            write(u'''//# Start User Globals Marker
//# End User Globals Marker
''')
        else: # generated from line 10, col 1
            write(u'''//# Start User Globals Marker
''')
            _v = VFFSL(SL,"user_globals",True) # u'$user_globals' on line 12, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$user_globals')) # from line 12, col 1.
            write(u'''//# End User Globals Marker
''')
        write(u'''
// Initialization Function
''')
        if VFFSL(SL,"init_business_logic",True) == "": # generated from line 16, col 1
            write(u'''//# Start Init Marker
void ''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 18, col 6
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 18, col 6.
            write(u'''::Init(const ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 18, col 37
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 18, col 37.
            write(u'''::TimerEvent& event)
{
''')
            if VFFSL(SL,"mod",True) != "": # generated from line 20, col 1
                write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Entering ''')
                _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 21, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 21, col 43.
                write(u'''::Init");
''')
            write(u'''  // Initialize Here

  // Stop Init Timer
  initOneShotTimer.stop();
''')
            if VFFSL(SL,"mod",True) != "": # generated from line 27, col 1
                write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Exiting ''')
                _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 28, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 28, col 42.
                write(u'''::Init");
''')
            write(u'''}
//# End Init Marker
''')
        else: # generated from line 32, col 1
            write(u'''//# Start Init Marker
''')
            _v = VFFSL(SL,"init_business_logic",True) # u'$init_business_logic' on line 34, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$init_business_logic')) # from line 34, col 1.
            write(u'''//# End Init Marker
''')
        write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 37, col 1
            for sub in VFFSL(SL,"subscribers",True): # generated from line 38, col 1
                write(u'''// Subscriber Callback - ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 39, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 39, col 26.
                write(u'''
''')
                if VFN(VFFSL(SL,"sub",True),"properties",True)["business_logic"] == "": # generated from line 40, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 41, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 41, col 11.
                    write(u'''_OnOneData Marker
void ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 42, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 42, col 6.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 42, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 42, col 23.
                    write(u'''_OnOneData(const ''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 42, col 65
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 42, col 65.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 42, col 129
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 42, col 129.
                    write(u'''::ConstPtr& received_data)
{
''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 44, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Entering ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 45, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 45, col 43.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 45, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 45, col 60.
                        write(u'''_OnOneData");
''')
                    write(u'''  // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 47, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 47, col 25.
                    write(u''' Subscriber

''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 49, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Exiting ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 50, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 50, col 42.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 50, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 50, col 59.
                        write(u'''_OnOneData");
''')
                    write(u'''}
//# End ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 53, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 53, col 9.
                    write(u'''_OnOneData Marker
''')
                else: # generated from line 54, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 55, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 55, col 11.
                    write(u'''_OnOneData Marker
''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["business_logic"] # u'$sub.properties["business_logic"]' on line 56, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["business_logic"]')) # from line 56, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 56, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 56, col 42.
                    write(u'''_OnOneData Marker
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)) > 0: # generated from line 61, col 1
            for server in VFFSL(SL,"servers",True): # generated from line 62, col 1
                write(u'''// Server Callback - ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 63, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 63, col 22.
                write(u'''
''')
                if VFN(VFFSL(SL,"server",True),"properties",True)["business_logic"] == "": # generated from line 64, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 65, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 65, col 11.
                    write(u'''Callback Marker
bool ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 66, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 66, col 6.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 66, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 66, col 23.
                    write(u'''Callback(''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 66, col 92
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 66, col 92.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 66, col 159
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 66, col 159.
                    write(u'''::Request  &req,
  ''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 67, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 67, col 3.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 67, col 70
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 67, col 70.
                    write(u'''::Response &res)
{
''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 69, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Entering ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 70, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 70, col 43.
                        write(u'''::''')
                        _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 70, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 70, col 60.
                        write(u'''Callback");
''')
                    write(u'''  // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 72, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 72, col 25.
                    write(u''' Server

''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 74, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Exiting ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 75, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 75, col 42.
                        write(u'''::''')
                        _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 75, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 75, col 59.
                        write(u'''Callback");
''')
                    write(u'''  return true;
}
//# End ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 79, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 79, col 9.
                    write(u'''Callback Marker
''')
                else: # generated from line 80, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 81, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 81, col 11.
                    write(u'''Callback Marker
''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["business_logic"] # u'$server.properties["business_logic"]' on line 82, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["business_logic"]')) # from line 82, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 82, col 45
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 82, col 45.
                    write(u'''Callback Marker
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)) > 0: # generated from line 87, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 88, col 1
                write(u'''// Timer Callback - ''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 89, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 89, col 21.
                write(u'''
''')
                if VFN(VFFSL(SL,"timer",True),"properties",True)["business_logic"] == "": # generated from line 90, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 91, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 91, col 11.
                    write(u'''Callback Marker
void ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 92, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 92, col 6.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 92, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 92, col 23.
                    write(u'''Callback(const ros::TimerEvent& event)
{
''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 94, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Entering ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 95, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 95, col 43.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 95, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 95, col 60.
                        write(u'''Callback");
''')
                    write(u'''  // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 97, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 97, col 25.
                    write(u''' Timer

''')
                    if VFFSL(SL,"mod",True) != "": # generated from line 99, col 1
                        write(u'''  compQueue.ROSMOD_LOGGER.DEBUG("Exiting ''')
                        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 100, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 100, col 42.
                        write(u'''::''')
                        _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 100, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 100, col 59.
                        write(u'''Callback");
''')
                    write(u'''}
//# End ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 103, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 103, col 9.
                    write(u'''Callback Marker
''')
                else: # generated from line 104, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 105, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 105, col 11.
                    write(u'''Callback Marker
''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["business_logic"] # u'$timer.properties["business_logic"]' on line 106, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["business_logic"]')) # from line 106, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 106, col 44
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 106, col 44.
                    write(u'''Callback Marker
''')
            write(u'''
''')
        write(u'''
// Destructor - Cleanup Ports & Timers
''')
        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 113, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 113, col 1.
        write(u'''::~''')
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 113, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 113, col 19.
        write(u'''()
{
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)) > 0: # generated from line 115, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 116, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 117, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 117, col 3.
                write(u'''.stop();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 120, col 1
            for pub in VFFSL(SL,"publishers",True): # generated from line 121, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'${pub.properties["name"]}' on line 122, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["name"]}')) # from line 122, col 3.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 125, col 1
            for sub in VFFSL(SL,"subscribers",True): # generated from line 126, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 127, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 127, col 3.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)) > 0: # generated from line 130, col 1
            for server in VFFSL(SL,"servers",True): # generated from line 131, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 132, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 132, col 3.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"required_services",True)) > 0: # generated from line 135, col 1
            for client in VFFSL(SL,"clients",True): # generated from line 136, col 1
                write(u'''  ''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'${client.properties["name"]}' on line 137, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${client.properties["name"]}')) # from line 137, col 3.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"destructor",True) == "": # generated from line 140, col 1
            write(u'''  //# Start Destructor Marker
  //# End Destructor Marker
''')
        else: # generated from line 143, col 1
            write(u'''  //# Start Destructor Marker
  ''')
            _v = VFFSL(SL,"destructor",True) # u'$destructor' on line 145, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'$destructor')) # from line 145, col 3.
            write(u'''  //# End Destructor Marker
''')
        write(u'''}

// Startup - Setup Component Ports & Timers
void ''')
        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 150, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 150, col 6.
        write(u'''::startUp()
{
  ros''')
        _v = VFFSL(SL,"mod",True) # u'${mod}' on line 152, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 152, col 6.
        write(u'''::NodeHandle nh;
  std::string advertiseName;

  // Scheduling Scheme is FIFO
''')
        if VFFSL(SL,"mod",True) != "": # generated from line 156, col 1
            write(u'''  this->compQueue.scheduling_scheme = rosmod::CallbackQueue::SchedulingScheme::FIFO;
  rosmod::ROSMOD_Callback_Options callback_options;
''')
        write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 161, col 1
            for sub in VFFSL(SL,"subscribers",True): # generated from line 162, col 1
                if VFFSL(SL,"mod",True) != "": # generated from line 163, col 1
                    write(u'''  callback_options.alias = "''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 164, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 164, col 29.
                    write(u'''_OnOneData";
  callback_options.priority = ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["priority"] # u'$sub.properties["priority"]' on line 165, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["priority"]')) # from line 165, col 31.
                    write(u''';
  callback_options.deadline.sec = ''')
                    _v = VFFSL(SL,"int",False)(sub.properties["deadline"].split('.')[0]) # u'${int(sub.properties["deadline"].split(\'.\')[0])}' on line 166, col 35
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(sub.properties["deadline"].split(\'.\')[0])}')) # from line 166, col 35.
                    write(u''';
  callback_options.deadline.nsec = ''')
                    _v = VFFSL(SL,"int",False)(format('0.' + sub.properties["deadline"].split('.')[1], '.10f').split('.')[1]) # u'${int(format(\'0.\' + sub.properties["deadline"].split(\'.\')[1], \'.10f\').split(\'.\')[1])}' on line 167, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(format(\'0.\' + sub.properties["deadline"].split(\'.\')[1], \'.10f\').split(\'.\')[1])}')) # from line 167, col 36.
                    write(u''';
''')
                write(u'''  // Component Subscriber - ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 169, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 169, col 29.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 170, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 170, col 20.
                write(u'''";
  if (portGroupMap.find("''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 171, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 171, col 26.
                write(u'''") != portGroupMap.end())
    advertiseName += "_" + portGroupMap["''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 172, col 42
                if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 172, col 42.
                write(u'''"];
  ros''')
                _v = VFFSL(SL,"mod",True) # u'${mod}' on line 173, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 173, col 6.
                write(u'''::SubscribeOptions ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 173, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 173, col 31.
                write(u'''_options;
''')
                if VFFSL(SL,"mod",True) != "": # generated from line 174, col 1
                    write(u'''  ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 175, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 175, col 3.
                    write(u'''_options = ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 175, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 175, col 42.
                    write(u'''::SubscribeOptions::create<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 175, col 75
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 175, col 75.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 175, col 139
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 175, col 139.
                    write(u'''>
      (advertiseName.c_str(),
       1000,
       boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 178, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 178, col 21.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 178, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 178, col 38.
                    write(u'''_OnOneData, this, _1),
       ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 179, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 179, col 11.
                    write(u'''::VoidPtr(),
       &this->compQueue,
       callback_options);
  this->''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 182, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 182, col 9.
                    write(u''' = nh.subscribe(''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 182, col 50
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 182, col 50.
                    write(u'''_options);
''')
                else: # generated from line 183, col 1
                    write(u'''  ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 184, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 184, col 3.
                    write(u'''_options = ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 184, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 184, col 42.
                    write(u'''::SubscribeOptions::create<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 184, col 75
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 184, col 75.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 184, col 139
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 184, col 139.
                    write(u'''>
      (advertiseName.c_str(),
       1000,
       boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 187, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 187, col 21.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 187, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 187, col 38.
                    write(u'''_OnOneData, this, _1),
       ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 188, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 188, col 11.
                    write(u'''::VoidPtr(),
       &this->compQueue);
  this->''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 190, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 190, col 9.
                    write(u''' = nh.subscribe(''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 190, col 50
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 190, col 50.
                    write(u'''_options);  
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 195, col 1
            for pub in VFFSL(SL,"publishers",True): # generated from line 196, col 1
                write(u'''  // Component Publisher - ''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 197, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 197, col 28.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 198, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 198, col 20.
                write(u'''";
  if (portGroupMap.find("''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 199, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 199, col 26.
                write(u'''") != portGroupMap.end())
    advertiseName += "_" + portGroupMap["''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 200, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 200, col 42.
                write(u'''"];
  this->''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'${pub.properties["name"]}' on line 201, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["name"]}')) # from line 201, col 9.
                write(u''' = nh.advertise<''')
                _v = VFN(VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$pub.properties["message_reference"].parent.properties["name"]' on line 201, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["message_reference"].parent.properties["name"]')) # from line 201, col 50.
                write(u'''::''')
                _v = VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 201, col 114
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 201, col 114.
                write(u'''>(advertiseName.c_str(), 1000);
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)): # generated from line 205, col 1
            for server in VFFSL(SL,"servers",True): # generated from line 206, col 1
                if VFFSL(SL,"mod",True) != "": # generated from line 207, col 1
                    write(u'''  callback_options.alias = "''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 208, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 208, col 29.
                    write(u'''Callback";
  callback_options.priority = ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["priority"] # u'$server.properties["priority"]' on line 209, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["priority"]')) # from line 209, col 31.
                    write(u''';
  callback_options.deadline.sec =''')
                    _v = VFFSL(SL,"int",False)(server.properties["deadline"].split('.')[0]) # u'${int(server.properties["deadline"].split(\'.\')[0])}' on line 210, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(server.properties["deadline"].split(\'.\')[0])}')) # from line 210, col 34.
                    write(u''';
  callback_options.deadline.nsec = ''')
                    _v = VFFSL(SL,"int",False)(format('0.' + server.properties["deadline"].split('.')[1], '.10f').split('.')[1]) # u'${int(format(\'0.\' + server.properties["deadline"].split(\'.\')[1], \'.10f\').split(\'.\')[1])}' on line 211, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(format(\'0.\' + server.properties["deadline"].split(\'.\')[1], \'.10f\').split(\'.\')[1])}')) # from line 211, col 36.
                    write(u''';
''')
                write(u'''  // Component Server - ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 213, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 213, col 25.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 214, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 214, col 20.
                write(u'''";
  if (portGroupMap.find("''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 215, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 215, col 26.
                write(u'''") != portGroupMap.end())
    advertiseName += "_" + portGroupMap["''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 216, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 216, col 42.
                write(u'''"];
  ros''')
                _v = VFFSL(SL,"mod",True) # u'${mod}' on line 217, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 217, col 6.
                write(u'''::AdvertiseServiceOptions ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 217, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 217, col 38.
                write(u'''_server_options;
''')
                if VFFSL(SL,"mod",True) != "": # generated from line 218, col 1
                    write(u'''  ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 219, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 219, col 3.
                    write(u'''_server_options = ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 219, col 52
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 219, col 52.
                    write(u'''::AdvertiseServiceOptions::create<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 219, col 92
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 219, col 92.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 219, col 159
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 219, col 159.
                    write(u'''>
      (advertiseName.c_str(),
       boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 221, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 221, col 21.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 221, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 221, col 38.
                    write(u'''Callback, this, _1, _2),
       ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 222, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 222, col 11.
                    write(u'''::VoidPtr(),
       &this->compQueue,
       callback_options);
  this->''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 225, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 225, col 9.
                    write(u''' = nh.advertiseService(''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 225, col 60
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 225, col 60.
                    write(u'''_server_options);
''')
                else: # generated from line 226, col 1
                    write(u'''  ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 227, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 227, col 3.
                    write(u'''_server_options = ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 227, col 52
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 227, col 52.
                    write(u'''::AdvertiseServiceOptions::create<''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 227, col 92
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 227, col 92.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 227, col 159
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 227, col 159.
                    write(u'''>
      (advertiseName.c_str(),
       boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 229, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 229, col 21.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 229, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 229, col 38.
                    write(u'''Callback, this, _1, _2),
       ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 230, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 230, col 11.
                    write(u'''::VoidPtr(),
       &this->compQueue);
  this->''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 232, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 232, col 9.
                    write(u''' = nh.advertiseService(''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 232, col 60
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 232, col 60.
                    write(u'''_server_options);  
''')
            write(u''' 
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"required_services",True)) > 0: # generated from line 237, col 1
            write(u'''  // Configure all required services associated with this component
''')
            for client in VFFSL(SL,"clients",True): # generated from line 239, col 1
                write(u'''  // Component Client - ''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 240, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 240, col 25.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"client",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$client.properties["service_reference"].properties["name"]' on line 241, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].properties["name"]')) # from line 241, col 20.
                write(u'''";
  if (portGroupMap.find("''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 242, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 242, col 26.
                write(u'''") != portGroupMap.end())
    advertiseName += "_" + portGroupMap["''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 243, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 243, col 42.
                write(u'''"];
      this->''')
                _v = VFN(VFFSL(SL,"client",True),"properties",True)["name"] # u'${client.properties["name"]}' on line 244, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${client.properties["name"]}')) # from line 244, col 13.
                write(u''' = nh.serviceClient<''')
                _v = VFN(VFN(VFN(VFFSL(SL,"client",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$client.properties["service_reference"].parent.properties["name"]' on line 244, col 61
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].parent.properties["name"]')) # from line 244, col 61.
                write(u'''::''')
                _v = VFN(VFN(VFFSL(SL,"client",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$client.properties["service_reference"].properties["name"]' on line 244, col 128
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].properties["name"]')) # from line 244, col 128.
                write(u'''>(advertiseName.c_str()); 
''')
            write(u'''
''')
        write(u'''  // Init Timer
''')
        if VFFSL(SL,"mod",True) != "": # generated from line 249, col 1
            write(u'''  callback_options.alias = "Init_Timer";
  callback_options.priority = 99;
  callback_options.deadline.sec = 1;
  callback_options.deadline.nsec = 0;
  ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 254, col 6
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 254, col 6.
            write(u'''::TimerOptions timer_options;
  timer_options = 
    ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 256, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 256, col 8.
            write(u'''::TimerOptions
    (ros::Duration(-1),
     boost::bind(&''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 258, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 258, col 19.
            write(u'''::Init, this, _1),
     &this->compQueue,
     callback_options
     true,
     true);
  this->initOneShotTimer = nh.createTimer(timer_options);    
''')
        else  : # generated from line 264, col 1
            write(u'''  ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 265, col 6
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 265, col 6.
            write(u'''::TimerOptions timer_options;
  timer_options = 
    ros''')
            _v = VFFSL(SL,"mod",True) # u'${mod}' on line 267, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 267, col 8.
            write(u'''::TimerOptions
    (ros::Duration(-1),
     boost::bind(&''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 269, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 269, col 19.
            write(u'''::Init, this, _1),
     &this->compQueue,
     true);
  this->initOneShotTimer = nh.createTimer(timer_options);  
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)): # generated from line 274, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 275, col 1
                if VFFSL(SL,"mod",True) != "": # generated from line 276, col 1
                    write(u'''  callback_options.alias = "''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 277, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 277, col 29.
                    write(u'''Callback";
  callback_options.priority = ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["priority"] # u'$timer.properties["priority"]' on line 278, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["priority"]')) # from line 278, col 31.
                    write(u''';
  callback_options.deadline.sec = ''')
                    _v = VFFSL(SL,"int",False)(timer.properties["deadline"].split('.')[0]) # u'${int(timer.properties["deadline"].split(\'.\')[0])}' on line 279, col 35
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(timer.properties["deadline"].split(\'.\')[0])}')) # from line 279, col 35.
                    write(u''';
  callback_options.deadline.nsec = ''')
                    _v = VFFSL(SL,"int",False)(float('0.' + (timer.properties["deadline"].split('.')[1]))*1000000000) # u'${int(float(\'0.\' + (timer.properties["deadline"].split(\'.\')[1]))*1000000000)}' on line 280, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${int(float(\'0.\' + (timer.properties["deadline"].split(\'.\')[1]))*1000000000)}')) # from line 280, col 36.
                    write(u''';
  // Component Timer - ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 281, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 281, col 24.
                    write(u'''
  timer_options = 
    ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 283, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 283, col 8.
                    write(u'''::TimerOptions
''')
                    if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 284, col 1
                        write(u'''    (ros::Duration(-1),
''')
                    else: # generated from line 286, col 1
                        write(u'''    (ros::Duration(''')
                        _v = VFN(VFFSL(SL,"timer",True),"properties",True)["period"] # u'$timer.properties["period"]' on line 287, col 20
                        if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["period"]')) # from line 287, col 20.
                        write(u'''),
''')
                    write(u'''     boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 289, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 289, col 19.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 289, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 289, col 36.
                    write(u'''Callback, this, _1),
''')
                    if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 290, col 1
                        write(u'''     &this->compQueue,
     callback_options,
     true,
     true);
''')
                    else: # generated from line 295, col 1
                        write(u'''     &this->compQueue,
     callback_options,
     false,
     true);
''')
                    write(u'''  this->''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$(timer.properties["name"])' on line 301, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$(timer.properties["name"])')) # from line 301, col 9.
                    write(u''' = nh.createTimer(timer_options);  
''')
                else : # generated from line 302, col 1
                    write(u'''  // Component Timer - ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 303, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 303, col 24.
                    write(u'''
  timer_options = 
    ros''')
                    _v = VFFSL(SL,"mod",True) # u'${mod}' on line 305, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'${mod}')) # from line 305, col 8.
                    write(u'''::TimerOptions
''')
                    if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 306, col 1
                        write(u'''    (ros::Duration(-1),
''')
                    else: # generated from line 308, col 1
                        write(u'''    (ros::Duration(''')
                        _v = VFN(VFFSL(SL,"timer",True),"properties",True)["period"] # u'$timer.properties["period"]' on line 309, col 20
                        if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["period"]')) # from line 309, col 20.
                        write(u'''),
''')
                    write(u'''     boost::bind(&''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 311, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 311, col 19.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 311, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 311, col 36.
                    write(u'''Callback, this, _1),
''')
                    if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 312, col 1
                        write(u'''     &this->compQueue, true);
''')
                    else: # generated from line 314, col 1
                        write(u'''     &this->compQueue);
''')
                    write(u'''  this->''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$(timer.properties["name"])' on line 317, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$(timer.properties["name"])')) # from line 317, col 9.
                    write(u''' = nh.createTimer(timer_options);
''')
            write(u'''
''')
        write(u'''  // Identify the pwd of Node Executable
  std::string s = node_argv[0];
  std::string exec_path = s;
  std::string delimiter = "/";
  std::string exec, pwd;
  size_t pos = 0;
  while ((pos = s.find(delimiter)) != std::string::npos) {
    exec = s.substr(0, pos);
    s.erase(0, pos + delimiter.length());
  }
  exec = s.substr(0, pos);
  pwd = exec_path.erase(exec_path.find(exec), exec.length());
  std::string log_file_path = pwd + nodeName + "." + compName + ".log"; 
  
  // Create the log file & open file stream
  LOGGER.CREATE_FILE(log_file_path);
  
  // Establish log levels of LOGGER
  LOGGER.SET_LOG_LEVELS(logLevels);

''')
        if VFFSL(SL,"component_type",True) == "KSP": # generated from line 342, col 1
            write(u'''  krpci_client.SetName(nodeName + "_" + compName);
''')
        if VFFSL(SL,"mod",True) != "": # generated from line 345, col 1
            write(u'''  compQueue.ROSMOD_LOGGER.CREATE_FILE(pwd + "ROSMOD_DEBUG." + nodeName + "." + compName + ".log");
''')
        write(u'''}

extern "C" {
  Component *maker(ComponentConfig &config, int argc, char **argv) {
    return new ''')
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 352, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 352, col 16.
        write(u'''(config,argc,argv);
  }
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_component_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(component_cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(component_cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(component_cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=component_cpp()).run()


