cmake_minimum_required(VERSION 2.8.3)
project($package_name)

#if $functions == ""
\## Start Global Marker

\## End Global Marker
#else
\## Start Global Marker
$functions\## End Global Marker
#end if

\## Check C++11 / C++0x
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "-std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "-std=c++0x")
else()
    message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

\## Find catkin macros and libraries
\## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
\## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
roscpp
std_msgs
message_generation
#if $packages == ""
\## Start Package Marker
\## End Package Marker
#else
\## Start Package Marker
$packages\## End Package Marker
#end if
)

\## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


\## Uncomment this if the package has a setup.py. This macro ensures
\## modules and global scripts declared therein get installed
\## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

\################################################
\## Declare ROS messages, services and actions ##
\################################################

\## To declare and build messages, services or actions from within this
\## package, follow these steps:
\## * Let MSG_DEP_SET be the set of packages whose message types you use in
\##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
\## * In the file package.xml:
\##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
\##   * If MSG_DEP_SET isn't empty the following dependencies might have been
\##     pulled in transitively but can be declared for certainty nonetheless:
\##     * add a build_depend tag for "message_generation"
\##     * add a run_depend tag for "message_runtime"
\## * In this file (CMakeLists.txt):
\##   * add "message_generation" and every package in MSG_DEP_SET to
\##     find_package(catkin REQUIRED COMPONENTS ...)
\##   * add "message_runtime" and every package in MSG_DEP_SET to
\##     catkin_package(CATKIN_DEPENDS ...)
\##   * uncomment the add_*_files sections below as needed
\##     and list every .msg/.srv/.action file to be processed
\##   * uncomment the generate_messages entry below
\##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

# Generate messages in the 'msg' folder
#if $messages != []
add_message_files(
  FILES
#for $msg in $messages
  ${msg.properties["name"]}.msg

#end for
)
#end if

# Generate services in the 'srv' folder
#if $services != []
add_service_files(
  FILES
#for $srv in $services
  ${srv.properties["name"]}.srv

#end for
)
#end if

\## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

# Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
)

\###################################
\## catkin specific configuration ##
\###################################
\## The catkin_package macro generates cmake config files for your package
\## Declare things to be passed to dependent projects
\## INCLUDE_DIRS: uncomment this if you package contains header files
\## LIBRARIES: libraries you create in this project that dependent projects also need
\## CATKIN_DEPENDS: catkin_packages dependent projects also need
\## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES $package_name
#  CATKIN_DEPENDS roscpp std_msgs
  CATKIN_DEPENDS message_runtime
#  DEPENDS system_lib
)

\###########
\## Build ##
\###########

\## Specify additional locations of header files
\## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
#if $include_dirs == ""
\## Start Include Directories Marker
\## End Include Directories Marker
#else
\## Start Include Directories Marker
$include_dirs\## End Include Directories Marker
#end if
)

\## Declare a cpp library
# add_library($package_name
#   src/${PROJECT_NAME}/${package_name}.cpp
# )

\## Declare a cpp executable
# add_executable(${package_name}_node src/${package_name}_node.cpp)

\## Add cmake target dependencies of the executable/library
\## as an example, message headers may need to be generated before nodes
# add_dependencies(${package_name}_node ${package_name}_generate_messages_cpp)

\## Specify libraries to link a library or executable target against
# target_link_libraries(${package_name}_node
#   ${catkin_LIBRARIES}
# )

\#############
\## Install ##
\#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

\## Mark executable scripts (Python etc.) for installation
\## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

\## Mark executables and/or libraries for installation
# install(TARGETS $package_name ${package_name}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

\## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

\## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

\#############
\## Testing ##
\#############

\## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_${package_name}.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

\## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
include_directories(include ${catkin_INCLUDE_DIRS})

#if $components != []
#for $component in $components
add_library(${component.properties["name"]}
	    src/$package_name/Component.cpp
            src/$package_name/Logger.cpp
            src/$package_name/${component.properties["name"]}.cpp
#if $component.properties["cmakelists_cpp_marker"] != ""
            \## Start $component.properties["name"] CPP Marker
$component.properties["cmakelists_cpp_marker"]            \## End $component.properties["name"] CPP Marker
#else
            \## Start $component.properties["name"] CPP Marker

            \## End $component.properties["name"] CPP Marker
#end if
           )
target_link_libraries(${component.properties["name"]}
#if $component.properties["cmakelists_targetlinklibs_marker"] != ""
                      \## Start $component.properties["name"] Target Link Libraries Marker
$component.properties["cmakelists_targetlinklibs_marker"]                      \## End $component.properties["name"] Target Link Libraries Marker
#else
                      \## Start $component.properties["name"] Target Link Libraries Marker

                      \## End $component.properties["name"] Target Link Libraries Marker
#end if
                      ${catkin_LIBRARIES}
                      )
add_dependencies(${component.properties["name"]}
                 ${package_name}_generate_messages_cpp
                )

#end for
#end if













