// Generated by gencpp from file uav_package/control_command.msg
// DO NOT EDIT!


#ifndef UAV_PACKAGE_MESSAGE_CONTROL_COMMAND_H
#define UAV_PACKAGE_MESSAGE_CONTROL_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_package
{
template <class ContainerAllocator>
struct control_command_
{
  typedef control_command_<ContainerAllocator> Type;

  control_command_()
    : newHeading(0.0)
    , newAltitude(0.0)
    , command()  {
    }
  control_command_(const ContainerAllocator& _alloc)
    : newHeading(0.0)
    , newAltitude(0.0)
    , command(_alloc)  {
    }



   typedef float _newHeading_type;
  _newHeading_type newHeading;

   typedef float _newAltitude_type;
  _newAltitude_type newAltitude;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;




  typedef boost::shared_ptr< ::uav_package::control_command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_package::control_command_<ContainerAllocator> const> ConstPtr;

}; // struct control_command_

typedef ::uav_package::control_command_<std::allocator<void> > control_command;

typedef boost::shared_ptr< ::uav_package::control_command > control_commandPtr;
typedef boost::shared_ptr< ::uav_package::control_command const> control_commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_package::control_command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_package::control_command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uav_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'uav_package': ['/home/kelsier/Repositories/cpn-timing-analysis/tests/uav/UAV_ROSMOD/01-Software/workspace/src/uav_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uav_package::control_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_package::control_command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_package::control_command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_package::control_command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_package::control_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_package::control_command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_package::control_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60e397f8b340625273e563eebda2ee59";
  }

  static const char* value(const ::uav_package::control_command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60e397f8b3406252ULL;
  static const uint64_t static_value2 = 0x73e563eebda2ee59ULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_package::control_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_package/control_command";
  }

  static const char* value(const ::uav_package::control_command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_package::control_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 newHeading\n\
float32 newAltitude \n\
string command\n\
";
  }

  static const char* value(const ::uav_package::control_command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_package::control_command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.newHeading);
      stream.next(m.newAltitude);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct control_command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_package::control_command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_package::control_command_<ContainerAllocator>& v)
  {
    s << indent << "newHeading: ";
    Printer<float>::stream(s, indent + "  ", v.newHeading);
    s << indent << "newAltitude: ";
    Printer<float>::stream(s, indent + "  ", v.newAltitude);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_PACKAGE_MESSAGE_CONTROL_COMMAND_H
