// Generated by gencpp from file uav_package/sensor_state.msg
// DO NOT EDIT!


#ifndef UAV_PACKAGE_MESSAGE_SENSOR_STATE_H
#define UAV_PACKAGE_MESSAGE_SENSOR_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_package
{
template <class ContainerAllocator>
struct sensor_state_
{
  typedef sensor_state_<ContainerAllocator> Type;

  sensor_state_()
    : accX(0)
    , accY(0)
    , accZ(0)
    , latitude(0.0)
    , longitude(0.0)
    , heading(0.0)
    , speed(0.0)
    , altitude(0.0)  {
    }
  sensor_state_(const ContainerAllocator& _alloc)
    : accX(0)
    , accY(0)
    , accZ(0)
    , latitude(0.0)
    , longitude(0.0)
    , heading(0.0)
    , speed(0.0)
    , altitude(0.0)  {
    }



   typedef int32_t _accX_type;
  _accX_type accX;

   typedef int32_t _accY_type;
  _accY_type accY;

   typedef int32_t _accZ_type;
  _accZ_type accZ;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _altitude_type;
  _altitude_type altitude;




  typedef boost::shared_ptr< ::uav_package::sensor_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_package::sensor_state_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_state_

typedef ::uav_package::sensor_state_<std::allocator<void> > sensor_state;

typedef boost::shared_ptr< ::uav_package::sensor_state > sensor_statePtr;
typedef boost::shared_ptr< ::uav_package::sensor_state const> sensor_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_package::sensor_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_package::sensor_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uav_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'uav_package': ['/home/kelsier/Repositories/cpn-timing-analysis/tests/uav/UAV_ROSMOD/01-Software/workspace/src/uav_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uav_package::sensor_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_package::sensor_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_package::sensor_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_package::sensor_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_package::sensor_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_package::sensor_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_package::sensor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab3b1612f4b09421b105895e2bd4ce5d";
  }

  static const char* value(const ::uav_package::sensor_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab3b1612f4b09421ULL;
  static const uint64_t static_value2 = 0xb105895e2bd4ce5dULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_package::sensor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_package/sensor_state";
  }

  static const char* value(const ::uav_package::sensor_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_package::sensor_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 accX\n\
int32 accY\n\
int32 accZ\n\
float32 latitude\n\
float32 longitude\n\
float32 heading\n\
float32 speed\n\
float32 altitude\n\
";
  }

  static const char* value(const ::uav_package::sensor_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_package::sensor_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accX);
      stream.next(m.accY);
      stream.next(m.accZ);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.heading);
      stream.next(m.speed);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct sensor_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_package::sensor_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_package::sensor_state_<ContainerAllocator>& v)
  {
    s << indent << "accX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accX);
    s << indent << "accY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accY);
    s << indent << "accZ: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accZ);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_PACKAGE_MESSAGE_SENSOR_STATE_H
