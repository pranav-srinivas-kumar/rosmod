"""autogenerated by genpy from uav_package/sensor_state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class sensor_state(genpy.Message):
  _md5sum = "ab3b1612f4b09421b105895e2bd4ce5d"
  _type = "uav_package/sensor_state"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 accX
int32 accY
int32 accZ
float32 latitude
float32 longitude
float32 heading
float32 speed
float32 altitude
"""
  __slots__ = ['accX','accY','accZ','latitude','longitude','heading','speed','altitude']
  _slot_types = ['int32','int32','int32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       accX,accY,accZ,latitude,longitude,heading,speed,altitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensor_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.accX is None:
        self.accX = 0
      if self.accY is None:
        self.accY = 0
      if self.accZ is None:
        self.accZ = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.heading is None:
        self.heading = 0.
      if self.speed is None:
        self.speed = 0.
      if self.altitude is None:
        self.altitude = 0.
    else:
      self.accX = 0
      self.accY = 0
      self.accZ = 0
      self.latitude = 0.
      self.longitude = 0.
      self.heading = 0.
      self.speed = 0.
      self.altitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3i5f.pack(_x.accX, _x.accY, _x.accZ, _x.latitude, _x.longitude, _x.heading, _x.speed, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.accX, _x.accY, _x.accZ, _x.latitude, _x.longitude, _x.heading, _x.speed, _x.altitude,) = _struct_3i5f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3i5f.pack(_x.accX, _x.accY, _x.accZ, _x.latitude, _x.longitude, _x.heading, _x.speed, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.accX, _x.accY, _x.accZ, _x.latitude, _x.longitude, _x.heading, _x.speed, _x.altitude,) = _struct_3i5f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i5f = struct.Struct("<3i5f")
