$hash_include "krpci.hpp"
using namespace std;

#if $services != []
#for $service in $services
#if $service.procedures != []
#for $procedure in $service.procedures
bool KRPCI::${procedure.name}(${procedure.args})
{
  krpc::Request request;
  krpc::Response response;
#if $procedure.parameters != []
  krpc::Argument* argument;
#end if

  request.set_service("${service.name}");
  request.set_procedure("${procedure.name}");

#if $procedure.parameters != []
#for $parameter in $procedure.parameters
  argument = request.add_arguments();
  argument->set_position(${parameter.position});
#if $parameter.datatype == "uint64_t"
  argument->mutable_value()->resize(10);
  CodedOutputStream::WriteVarint64ToArray(${parameter.name}, 
		      (unsigned char *)argument->mutable_value()->data());

#else if $parameter.datatype == "float"
  argument->set_value((const char*)(&${parameter.name}), sizeof(${parameter.name}));

#else if $parameter.datatype == "double"
  argument->set_value((const char*)(&${parameter.name}), sizeof(${parameter.name}));  

#else if $parameter.datatype == "bool"
  argument->mutable_value()->resize(10);
  CodedOutputStream::WriteVarint32ToArray(${parameter.name}, 
		      (unsigned char *)argument->mutable_value()->data());

#else if $parameter.datatype == "KRPC.Tuple"
  krpc::Tuple ${parameter.name};
  KRPCI::EncodeTuple(${parameter.name}_x, 
		     ${parameter.name}_y, 
		     ${parameter.name}_z, 
		     ${parameter.name}); 
  ${parameter.name}.SerializeToString(argument->mutable_value());

#else if $parameter.datatype == "KRPC.List"
  ${parameter.name}.SerializeToString(argument->mutable_value());

#else if $parameter.datatype == "KRPC.Dictionary"
  ${parameter.name}.SerializeToString(argument->mutable_value());

#end if
#end for
#end if
  if (getResponseFromRequest(request,response))
    {
      if (response.has_error())
	{
	  std::cout << "Response error: " << response.error() << endl;
	  return false;
	}
#if $procedure.return_type == "uint64"
      KRPCI::DecodeVarint(return_value, 
			  (char *)response.return_value().data(), 
			  response.return_value().size());
#else if $procedure.return_type == "KRPC.Tuple"
      krpc::Tuple tuple;
      tuple.ParseFromString(response.return_value());
      KRPCI::DecodeTuple(tuple, x, y, z);
#else if $procedure.return_type == "KRPC.List"
      krpc::List output_list;
      output_list.ParseFromString(response.return_value());
      for(int i=0; i< output_list.items_size(); i++)
	{
	  uint64_t return_value;
	  KRPCI::DecodeVarint(return_value,
			      (char *)output_list.items(i).data(),
			      output_list.items(i).size());
	  return_vector.push_back(return_value);
	}
#end if
    }
  return true;
}

#end for
#end if
#end for
#end if
