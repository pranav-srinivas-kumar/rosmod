#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1430196875.326856
__CHEETAH_genTimestamp__ = 'Mon Apr 27 23:54:35 2015'
__CHEETAH_src__ = '/home/kelsier/Repositories/rosmod/code/rosmod_v3/src/templates/rapidxml_hpp.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Apr 19 17:15:22 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class rapidxml_hpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(rapidxml_hpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#ifndef RAPIDXML_HPP_INCLUDED\r
#define RAPIDXML_HPP_INCLUDED\r
\r
// Copyright (C) 2006, 2009 Marcin Kalicinski\r
// Version 1.13\r
// Revision $DateTime: 2009/05/13 01:46:17 $\r
//! \\file rapidxml.hpp This file contains rapidxml parser and DOM implementation\r
\r
// If standard library is disabled, user must provide implementations of required functions and typedefs\r
#if !defined(RAPIDXML_NO_STDLIB)\r
    #include <cstdlib>      // For std::size_t\r
    #include <cassert>      // For assert\r
    #include <new>          // For placement new\r
#endif\r
\r
// On MSVC, disable "conditional expression is constant" warning (level 4). \r
// This warning is almost impossible to avoid with certain types of templated code\r
#ifdef _MSC_VER\r
    #pragma warning(push)\r
    #pragma warning(disable:4127)   // Conditional expression is constant\r
#endif\r
\r
///////////////////////////////////////////////////////////////////////////\r
// RAPIDXML_PARSE_ERROR\r
    \r
#if defined(RAPIDXML_NO_EXCEPTIONS)\r
\r
#define RAPIDXML_PARSE_ERROR(what, where) { parse_error_handler(what, where); assert(0); }\r
\r
namespace rapidxml\r
{\r
    //! When exceptions are disabled by defining RAPIDXML_NO_EXCEPTIONS, \r
    //! this function is called to notify user about the error.\r
    //! It must be defined by the user.\r
    //! <br><br>\r
    //! This function cannot return. If it does, the results are undefined.\r
    //! <br><br>\r
    //! A very simple definition might look like that:\r
    //! <pre>\r
    //! void %rapidxml::%parse_error_handler(const char *what, void *where)\r
    //! {\r
    //!     std::cout << "Parse error: " << what << "\\n";\r
    //!     std::abort();\r
    //! }\r
    //! </pre>\r
    //! \\param what Human readable description of the error.\r
    //! \\param where Pointer to character data where error was detected.\r
    void parse_error_handler(const char *what, void *where);\r
}\r
\r
#else\r
    \r
#include <exception>    // For std::exception\r
\r
#define RAPIDXML_PARSE_ERROR(what, where) throw parse_error(what, where)\r
\r
namespace rapidxml\r
{\r
\r
    //! Parse error exception. \r
    //! This exception is thrown by the parser when an error occurs. \r
    //! Use what() function to get human-readable error message. \r
    //! Use where() function to get a pointer to position within source text where error was detected.\r
    //! <br><br>\r
    //! If throwing exceptions by the parser is undesirable, \r
    //! it can be disabled by defining RAPIDXML_NO_EXCEPTIONS macro before rapidxml.hpp is included.\r
    //! This will cause the parser to call rapidxml::parse_error_handler() function instead of throwing an exception.\r
    //! This function must be defined by the user.\r
    //! <br><br>\r
    //! This class derives from <code>std::exception</code> class.\r
    class parse_error: public std::exception\r
    {\r
    \r
    public:\r
    \r
        //! Constructs parse error\r
        parse_error(const char *what, void *where)\r
            : m_what(what)\r
            , m_where(where)\r
        {\r
        }\r
\r
        //! Gets human readable description of error.\r
        //! \\return Pointer to null terminated description of the error.\r
        virtual const char *what() const throw()\r
        {\r
            return m_what;\r
        }\r
\r
        //! Gets pointer to character data where error happened.\r
        //! Ch should be the same as char type of xml_document that produced the error.\r
        //! \\return Pointer to location within the parsed string where error occured.\r
        template<class Ch>\r
        Ch *where() const\r
        {\r
            return reinterpret_cast<Ch *>(m_where);\r
        }\r
\r
    private:  \r
\r
        const char *m_what;\r
        void *m_where;\r
\r
    };\r
}\r
\r
#endif\r
\r
///////////////////////////////////////////////////////////////////////////\r
// Pool sizes\r
\r
#ifndef RAPIDXML_STATIC_POOL_SIZE\r
    // Size of static memory block of memory_pool.\r
    // Define RAPIDXML_STATIC_POOL_SIZE before including rapidxml.hpp if you want to override the default value.\r
    // No dynamic memory allocations are performed by memory_pool until static memory is exhausted.\r
    #define RAPIDXML_STATIC_POOL_SIZE (64 * 1024)\r
#endif\r
\r
#ifndef RAPIDXML_DYNAMIC_POOL_SIZE\r
    // Size of dynamic memory block of memory_pool.\r
    // Define RAPIDXML_DYNAMIC_POOL_SIZE before including rapidxml.hpp if you want to override the default value.\r
    // After the static block is exhausted, dynamic blocks with approximately this size are allocated by memory_pool.\r
    #define RAPIDXML_DYNAMIC_POOL_SIZE (64 * 1024)\r
#endif\r
\r
#ifndef RAPIDXML_ALIGNMENT\r
    // Memory allocation alignment.\r
    // Define RAPIDXML_ALIGNMENT before including rapidxml.hpp if you want to override the default value, which is the size of pointer.\r
    // All memory allocations for nodes, attributes and strings will be aligned to this value.\r
    // This must be a power of 2 and at least 1, otherwise memory_pool will not work.\r
    #define RAPIDXML_ALIGNMENT sizeof(void *)\r
#endif\r
\r
namespace rapidxml\r
{\r
    // Forward declarations\r
    template<class Ch> class xml_node;\r
    template<class Ch> class xml_attribute;\r
    template<class Ch> class xml_document;\r
    \r
    //! Enumeration listing all node types produced by the parser.\r
    //! Use xml_node::type() function to query node type.\r
    enum node_type\r
    {\r
        node_document,      //!< A document node. Name and value are empty.\r
        node_element,       //!< An element node. Name contains element name. Value contains text of first data node.\r
        node_data,          //!< A data node. Name is empty. Value contains data text.\r
        node_cdata,         //!< A CDATA node. Name is empty. Value contains data text.\r
        node_comment,       //!< A comment node. Name is empty. Value contains comment text.\r
        node_declaration,   //!< A declaration node. Name and value are empty. Declaration parameters (version, encoding and standalone) are in node attributes.\r
        node_doctype,       //!< A DOCTYPE node. Name is empty. Value contains DOCTYPE text.\r
        node_pi             //!< A PI node. Name contains target. Value contains instructions.\r
    };\r
\r
    ///////////////////////////////////////////////////////////////////////\r
    // Parsing flags\r
\r
    //! Parse flag instructing the parser to not create data nodes. \r
    //! Text of first data node will still be placed in value of parent element, unless rapidxml::parse_no_element_values flag is also specified.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_no_data_nodes = 0x1;            \r
\r
    //! Parse flag instructing the parser to not use text of first data node as a value of parent element.\r
    //! Can be combined with other flags by use of | operator.\r
    //! Note that child data nodes of element node take precendence over its value when printing. \r
    //! That is, if element has one or more child data nodes <em>and</em> a value, the value will be ignored.\r
    //! Use rapidxml::parse_no_data_nodes flag to prevent creation of data nodes if you want to manipulate data using values of elements.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_no_element_values = 0x2;\r
    \r
    //! Parse flag instructing the parser to not place zero terminators after strings in the source text.\r
    //! By default zero terminators are placed, modifying source text.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_no_string_terminators = 0x4;\r
    \r
    //! Parse flag instructing the parser to not translate entities in the source text.\r
    //! By default entities are translated, modifying source text.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_no_entity_translation = 0x8;\r
    \r
    //! Parse flag instructing the parser to disable UTF-8 handling and assume plain 8 bit characters.\r
    //! By default, UTF-8 handling is enabled.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_no_utf8 = 0x10;\r
    \r
    //! Parse flag instructing the parser to create XML declaration node.\r
    //! By default, declaration node is not created.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_declaration_node = 0x20;\r
    \r
    //! Parse flag instructing the parser to create comments nodes.\r
    //! By default, comment nodes are not created.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_comment_nodes = 0x40;\r
    \r
    //! Parse flag instructing the parser to create DOCTYPE node.\r
    //! By default, doctype node is not created.\r
    //! Although W3C specification allows at most one DOCTYPE node, RapidXml will silently accept documents with more than one.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_doctype_node = 0x80;\r
    \r
    //! Parse flag instructing the parser to create PI nodes.\r
    //! By default, PI nodes are not created.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_pi_nodes = 0x100;\r
    \r
    //! Parse flag instructing the parser to validate closing tag names. \r
    //! If not set, name inside closing tag is irrelevant to the parser.\r
    //! By default, closing tags are not validated.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_validate_closing_tags = 0x200;\r
    \r
    //! Parse flag instructing the parser to trim all leading and trailing whitespace of data nodes.\r
    //! By default, whitespace is not trimmed. \r
    //! This flag does not cause the parser to modify source text.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_trim_whitespace = 0x400;\r
\r
    //! Parse flag instructing the parser to condense all whitespace runs of data nodes to a single space character.\r
    //! Trimming of leading and trailing whitespace of data is controlled by rapidxml::parse_trim_whitespace flag.\r
    //! By default, whitespace is not normalized. \r
    //! If this flag is specified, source text will be modified.\r
    //! Can be combined with other flags by use of | operator.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_normalize_whitespace = 0x800;\r
\r
    // Compound flags\r
    \r
    //! Parse flags which represent default behaviour of the parser. \r
    //! This is always equal to 0, so that all other flags can be simply ored together.\r
    //! Normally there is no need to inconveniently disable flags by anding with their negated (~) values.\r
    //! This also means that meaning of each flag is a <i>negation</i> of the default setting. \r
    //! For example, if flag name is rapidxml::parse_no_utf8, it means that utf-8 is <i>enabled</i> by default,\r
    //! and using the flag will disable it.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_default = 0;\r
    \r
    //! A combination of parse flags that forbids any modifications of the source text. \r
    //! This also results in faster parsing. However, note that the following will occur:\r
    //! <ul>\r
    //! <li>names and values of nodes will not be zero terminated, you have to use xml_base::name_size() and xml_base::value_size() functions to determine where name and value ends</li>\r
    //! <li>entities will not be translated</li>\r
    //! <li>whitespace will not be normalized</li>\r
    //! </ul>\r
    //! See xml_document::parse() function.\r
    const int parse_non_destructive = parse_no_string_terminators | parse_no_entity_translation;\r
    \r
    //! A combination of parse flags resulting in fastest possible parsing, without sacrificing important data.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_fastest = parse_non_destructive | parse_no_data_nodes;\r
    \r
    //! A combination of parse flags resulting in largest amount of data being extracted. \r
    //! This usually results in slowest parsing.\r
    //! <br><br>\r
    //! See xml_document::parse() function.\r
    const int parse_full = parse_declaration_node | parse_comment_nodes | parse_doctype_node | parse_pi_nodes | parse_validate_closing_tags;\r
\r
    ///////////////////////////////////////////////////////////////////////\r
    // Internals\r
\r
    //! \\cond internal\r
    namespace internal\r
    {\r
\r
        // Struct that contains lookup tables for the parser\r
        // It must be a template to allow correct linking (because it has static data members, which are defined in a header file).\r
        template<int Dummy>\r
        struct lookup_tables\r
        {\r
            static const unsigned char lookup_whitespace[256];              // Whitespace table\r
            static const unsigned char lookup_node_name[256];               // Node name table\r
            static const unsigned char lookup_text[256];                    // Text table\r
            static const unsigned char lookup_text_pure_no_ws[256];         // Text table\r
            static const unsigned char lookup_text_pure_with_ws[256];       // Text table\r
            static const unsigned char lookup_attribute_name[256];          // Attribute name table\r
            static const unsigned char lookup_attribute_data_1[256];        // Attribute data table with single quote\r
            static const unsigned char lookup_attribute_data_1_pure[256];   // Attribute data table with single quote\r
            static const unsigned char lookup_attribute_data_2[256];        // Attribute data table with double quotes\r
            static const unsigned char lookup_attribute_data_2_pure[256];   // Attribute data table with double quotes\r
            static const unsigned char lookup_digits[256];                  // Digits\r
            static const unsigned char lookup_upcase[256];                  // To uppercase conversion table for ASCII characters\r
        };\r
\r
        // Find length of the string\r
        template<class Ch>\r
        inline std::size_t measure(const Ch *p)\r
        {\r
            const Ch *tmp = p;\r
            while (*tmp) \r
                ++tmp;\r
            return tmp - p;\r
        }\r
\r
        // Compare strings for equality\r
        template<class Ch>\r
        inline bool compare(const Ch *p1, std::size_t size1, const Ch *p2, std::size_t size2, bool case_sensitive)\r
        {\r
            if (size1 != size2)\r
                return false;\r
            if (case_sensitive)\r
            {\r
                for (const Ch *end = p1 + size1; p1 < end; ++p1, ++p2)\r
                    if (*p1 != *p2)\r
                        return false;\r
            }\r
            else\r
            {\r
                for (const Ch *end = p1 + size1; p1 < end; ++p1, ++p2)\r
                    if (lookup_tables<0>::lookup_upcase[static_cast<unsigned char>(*p1)] != lookup_tables<0>::lookup_upcase[static_cast<unsigned char>(*p2)])\r
                        return false;\r
            }\r
            return true;\r
        }\r
    }\r
    //! \\endcond\r
\r
    ///////////////////////////////////////////////////////////////////////\r
    // Memory pool\r
    \r
    //! This class is used by the parser to create new nodes and attributes, without overheads of dynamic memory allocation.\r
    //! In most cases, you will not need to use this class directly. \r
    //! However, if you need to create nodes manually or modify names/values of nodes, \r
    //! you are encouraged to use memory_pool of relevant xml_document to allocate the memory. \r
    //! Not only is this faster than allocating them by using <code>new</code> operator, \r
    //! but also their lifetime will be tied to the lifetime of document, \r
    //! possibly simplyfing memory management. \r
    //! <br><br>\r
    //! Call allocate_node() or allocate_attribute() functions to obtain new nodes or attributes from the pool. \r
    //! You can also call allocate_string() function to allocate strings.\r
    //! Such strings can then be used as names or values of nodes without worrying about their lifetime.\r
    //! Note that there is no <code>free()</code> function -- all allocations are freed at once when clear() function is called, \r
    //! or when the pool is destroyed.\r
    //! <br><br>\r
    //! It is also possible to create a standalone memory_pool, and use it \r
    //! to allocate nodes, whose lifetime will not be tied to any document.\r
    //! <br><br>\r
    //! Pool maintains <code>RAPIDXML_STATIC_POOL_SIZE</code> bytes of statically allocated memory. \r
    //! Until static memory is exhausted, no dynamic memory allocations are done.\r
    //! When static memory is exhausted, pool allocates additional blocks of memory of size <code>RAPIDXML_DYNAMIC_POOL_SIZE</code> each,\r
    //! by using global <code>new[]</code> and <code>delete[]</code> operators. \r
    //! This behaviour can be changed by setting custom allocation routines. \r
    //! Use set_allocator() function to set them.\r
    //! <br><br>\r
    //! Allocations for nodes, attributes and strings are aligned at <code>RAPIDXML_ALIGNMENT</code> bytes.\r
    //! This value defaults to the size of pointer on target architecture.\r
    //! <br><br>\r
    //! To obtain absolutely top performance from the parser,\r
    //! it is important that all nodes are allocated from a single, contiguous block of memory.\r
    //! Otherwise, cache misses when jumping between two (or more) disjoint blocks of memory can slow down parsing quite considerably.\r
    //! If required, you can tweak <code>RAPIDXML_STATIC_POOL_SIZE</code>, <code>RAPIDXML_DYNAMIC_POOL_SIZE</code> and <code>RAPIDXML_ALIGNMENT</code> \r
    //! to obtain best wasted memory to performance compromise.\r
    //! To do it, define their values before rapidxml.hpp file is included.\r
    //! \\param Ch Character type of created nodes. \r
    template<class Ch = char>\r
    class memory_pool\r
    {\r
        \r
    public:\r
\r
        //! \\cond internal\r
        typedef void *(alloc_func)(std::size_t);       // Type of user-defined function used to allocate memory\r
        typedef void (free_func)(void *);              // Type of user-defined function used to free memory\r
        //! \\endcond\r
        \r
        //! Constructs empty pool with default allocator functions.\r
        memory_pool()\r
            : m_alloc_func(0)\r
            , m_free_func(0)\r
        {\r
            init();\r
        }\r
\r
        //! Destroys pool and frees all the memory. \r
        //! This causes memory occupied by nodes allocated by the pool to be freed.\r
        //! Nodes allocated from the pool are no longer valid.\r
        ~memory_pool()\r
        {\r
            clear();\r
        }\r
\r
        //! Allocates a new node from the pool, and optionally assigns name and value to it. \r
        //! If the allocation request cannot be accomodated, this function will throw <code>std::bad_alloc</code>.\r
        //! If exceptions are disabled by defining RAPIDXML_NO_EXCEPTIONS, this function\r
        //! will call rapidxml::parse_error_handler() function.\r
        //! \\param type Type of node to create.\r
        //! \\param name Name to assign to the node, or 0 to assign no name.\r
        //! \\param value Value to assign to the node, or 0 to assign no value.\r
        //! \\param name_size Size of name to assign, or 0 to automatically calculate size from name string.\r
        //! \\param value_size Size of value to assign, or 0 to automatically calculate size from value string.\r
        //! \\return Pointer to allocated node. This pointer will never be NULL.\r
        xml_node<Ch> *allocate_node(node_type type, \r
                                    const Ch *name = 0, const Ch *value = 0, \r
                                    std::size_t name_size = 0, std::size_t value_size = 0)\r
        {\r
            void *memory = allocate_aligned(sizeof(xml_node<Ch>));\r
            xml_node<Ch> *node = new(memory) xml_node<Ch>(type);\r
            if (name)\r
            {\r
                if (name_size > 0)\r
                    node->name(name, name_size);\r
                else\r
                    node->name(name);\r
            }\r
            if (value)\r
            {\r
                if (value_size > 0)\r
                    node->value(value, value_size);\r
                else\r
                    node->value(value);\r
            }\r
            return node;\r
        }\r
\r
        //! Allocates a new attribute from the pool, and optionally assigns name and value to it.\r
        //! If the allocation request cannot be accomodated, this function will throw <code>std::bad_alloc</code>.\r
        //! If exceptions are disabled by defining RAPIDXML_NO_EXCEPTIONS, this function\r
        //! will call rapidxml::parse_error_handler() function.\r
        //! \\param name Name to assign to the attribute, or 0 to assign no name.\r
        //! \\param value Value to assign to the attribute, or 0 to assign no value.\r
        //! \\param name_size Size of name to assign, or 0 to automatically calculate size from name string.\r
        //! \\param value_size Size of value to assign, or 0 to automatically calculate size from value string.\r
        //! \\return Pointer to allocated attribute. This pointer will never be NULL.\r
        xml_attribute<Ch> *allocate_attribute(const Ch *name = 0, const Ch *value = 0, \r
                                              std::size_t name_size = 0, std::size_t value_size = 0)\r
        {\r
            void *memory = allocate_aligned(sizeof(xml_attribute<Ch>));\r
            xml_attribute<Ch> *attribute = new(memory) xml_attribute<Ch>;\r
            if (name)\r
            {\r
                if (name_size > 0)\r
                    attribute->name(name, name_size);\r
                else\r
                    attribute->name(name);\r
            }\r
            if (value)\r
            {\r
                if (value_size > 0)\r
                    attribute->value(value, value_size);\r
                else\r
                    attribute->value(value);\r
            }\r
            return attribute;\r
        }\r
\r
        //! Allocates a char array of given size from the pool, and optionally copies a given string to it.\r
        //! If the allocation request cannot be accomodated, this function will throw <code>std::bad_alloc</code>.\r
        //! If exceptions are disabled by defining RAPIDXML_NO_EXCEPTIONS, this function\r
        //! will call rapidxml::parse_error_handler() function.\r
        //! \\param source String to initialize the allocated memory with, or 0 to not initialize it.\r
        //! \\param size Number of characters to allocate, or zero to calculate it automatically from source string length; if size is 0, source string must be specified and null terminated.\r
        //! \\return Pointer to allocated char array. This pointer will never be NULL.\r
        Ch *allocate_string(const Ch *source = 0, std::size_t size = 0)\r
        {\r
            assert(source || size);     // Either source or size (or both) must be specified\r
            if (size == 0)\r
                size = internal::measure(source) + 1;\r
            Ch *result = static_cast<Ch *>(allocate_aligned(size * sizeof(Ch)));\r
            if (source)\r
                for (std::size_t i = 0; i < size; ++i)\r
                    result[i] = source[i];\r
            return result;\r
        }\r
\r
        //! Clones an xml_node and its hierarchy of child nodes and attributes.\r
        //! Nodes and attributes are allocated from this memory pool.\r
        //! Names and values are not cloned, they are shared between the clone and the source.\r
        //! Result node can be optionally specified as a second parameter, \r
        //! in which case its contents will be replaced with cloned source node.\r
        //! This is useful when you want to clone entire document.\r
        //! \\param source Node to clone.\r
        //! \\param result Node to put results in, or 0 to automatically allocate result node\r
        //! \\return Pointer to cloned node. This pointer will never be NULL.\r
        xml_node<Ch> *clone_node(const xml_node<Ch> *source, xml_node<Ch> *result = 0)\r
        {\r
            // Prepare result node\r
            if (result)\r
            {\r
                result->remove_all_attributes();\r
                result->remove_all_nodes();\r
                result->type(source->type());\r
            }\r
            else\r
                result = allocate_node(source->type());\r
\r
            // Clone name and value\r
            result->name(source->name(), source->name_size());\r
            result->value(source->value(), source->value_size());\r
\r
            // Clone child nodes and attributes\r
            for (xml_node<Ch> *child = source->first_node(); child; child = child->next_sibling())\r
                result->append_node(clone_node(child));\r
            for (xml_attribute<Ch> *attr = source->first_attribute(); attr; attr = attr->next_attribute())\r
                result->append_attribute(allocate_attribute(attr->name(), attr->value(), attr->name_size(), attr->value_size()));\r
\r
            return result;\r
        }\r
\r
        //! Clears the pool. \r
        //! This causes memory occupied by nodes allocated by the pool to be freed.\r
        //! Any nodes or strings allocated from the pool will no longer be valid.\r
        void clear()\r
        {\r
            while (m_begin != m_static_memory)\r
            {\r
                char *previous_begin = reinterpret_cast<header *>(align(m_begin))->previous_begin;\r
                if (m_free_func)\r
                    m_free_func(m_begin);\r
                else\r
                    delete[] m_begin;\r
                m_begin = previous_begin;\r
            }\r
            init();\r
        }\r
\r
        //! Sets or resets the user-defined memory allocation functions for the pool.\r
        //! This can only be called when no memory is allocated from the pool yet, otherwise results are undefined.\r
        //! Allocation function must not return invalid pointer on failure. It should either throw,\r
        //! stop the program, or use <code>longjmp()</code> function to pass control to other place of program. \r
        //! If it returns invalid pointer, results are undefined.\r
        //! <br><br>\r
        //! User defined allocation functions must have the following forms:\r
        //! <br><code>\r
        //! <br>void *allocate(std::size_t size);\r
        //! <br>void free(void *pointer);\r
        //! </code><br>\r
        //! \\param af Allocation function, or 0 to restore default function\r
        //! \\param ff Free function, or 0 to restore default function\r
        void set_allocator(alloc_func *af, free_func *ff)\r
        {\r
            assert(m_begin == m_static_memory && m_ptr == align(m_begin));    // Verify that no memory is allocated yet\r
            m_alloc_func = af;\r
            m_free_func = ff;\r
        }\r
\r
    private:\r
\r
        struct header\r
        {\r
            char *previous_begin;\r
        };\r
\r
        void init()\r
        {\r
            m_begin = m_static_memory;\r
            m_ptr = align(m_begin);\r
            m_end = m_static_memory + sizeof(m_static_memory);\r
        }\r
        \r
        char *align(char *ptr)\r
        {\r
            std::size_t alignment = ((RAPIDXML_ALIGNMENT - (std::size_t(ptr) & (RAPIDXML_ALIGNMENT - 1))) & (RAPIDXML_ALIGNMENT - 1));\r
            return ptr + alignment;\r
        }\r
        \r
        char *allocate_raw(std::size_t size)\r
        {\r
            // Allocate\r
            void *memory;   \r
            if (m_alloc_func)   // Allocate memory using either user-specified allocation function or global operator new[]\r
            {\r
                memory = m_alloc_func(size);\r
                assert(memory); // Allocator is not allowed to return 0, on failure it must either throw, stop the program or use longjmp\r
            }\r
            else\r
            {\r
                memory = new char[size];\r
#ifdef RAPIDXML_NO_EXCEPTIONS\r
                if (!memory)            // If exceptions are disabled, verify memory allocation, because new will not be able to throw bad_alloc\r
                    RAPIDXML_PARSE_ERROR("out of memory", 0);\r
#endif\r
            }\r
            return static_cast<char *>(memory);\r
        }\r
        \r
        void *allocate_aligned(std::size_t size)\r
        {\r
            // Calculate aligned pointer\r
            char *result = align(m_ptr);\r
\r
            // If not enough memory left in current pool, allocate a new pool\r
            if (result + size > m_end)\r
            {\r
                // Calculate required pool size (may be bigger than RAPIDXML_DYNAMIC_POOL_SIZE)\r
                std::size_t pool_size = RAPIDXML_DYNAMIC_POOL_SIZE;\r
                if (pool_size < size)\r
                    pool_size = size;\r
                \r
                // Allocate\r
                std::size_t alloc_size = sizeof(header) + (2 * RAPIDXML_ALIGNMENT - 2) + pool_size;     // 2 alignments required in worst case: one for header, one for actual allocation\r
                char *raw_memory = allocate_raw(alloc_size);\r
                    \r
                // Setup new pool in allocated memory\r
                char *pool = align(raw_memory);\r
                header *new_header = reinterpret_cast<header *>(pool);\r
                new_header->previous_begin = m_begin;\r
                m_begin = raw_memory;\r
                m_ptr = pool + sizeof(header);\r
                m_end = raw_memory + alloc_size;\r
\r
                // Calculate aligned pointer again using new pool\r
                result = align(m_ptr);\r
            }\r
\r
            // Update pool and return aligned pointer\r
            m_ptr = result + size;\r
            return result;\r
        }\r
\r
        char *m_begin;                                      // Start of raw memory making up current pool\r
        char *m_ptr;                                        // First free byte in current pool\r
        char *m_end;                                        // One past last available byte in current pool\r
        char m_static_memory[RAPIDXML_STATIC_POOL_SIZE];    // Static raw memory\r
        alloc_func *m_alloc_func;                           // Allocator function, or 0 if default is to be used\r
        free_func *m_free_func;                             // Free function, or 0 if default is to be used\r
    };\r
\r
    ///////////////////////////////////////////////////////////////////////////\r
    // XML base\r
\r
    //! Base class for xml_node and xml_attribute implementing common functions: \r
    //! name(), name_size(), value(), value_size() and parent().\r
    //! \\param Ch Character type to use\r
    template<class Ch = char>\r
    class xml_base\r
    {\r
\r
    public:\r
        \r
        ///////////////////////////////////////////////////////////////////////////\r
        // Construction & destruction\r
    \r
        // Construct a base with empty name, value and parent\r
        xml_base()\r
            : m_name(0)\r
            , m_value(0)\r
            , m_parent(0)\r
        {\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Node data access\r
    \r
        //! Gets name of the node. \r
        //! Interpretation of name depends on type of node.\r
        //! Note that name will not be zero-terminated if rapidxml::parse_no_string_terminators option was selected during parse.\r
        //! <br><br>\r
        //! Use name_size() function to determine length of the name.\r
        //! \\return Name of node, or empty string if node has no name.\r
        Ch *name() const\r
        {\r
            return m_name ? m_name : nullstr();\r
        }\r
\r
        //! Gets size of node name, not including terminator character.\r
        //! This function works correctly irrespective of whether name is or is not zero terminated.\r
        //! \\return Size of node name, in characters.\r
        std::size_t name_size() const\r
        {\r
            return m_name ? m_name_size : 0;\r
        }\r
\r
        //! Gets value of node. \r
        //! Interpretation of value depends on type of node.\r
        //! Note that value will not be zero-terminated if rapidxml::parse_no_string_terminators option was selected during parse.\r
        //! <br><br>\r
        //! Use value_size() function to determine length of the value.\r
        //! \\return Value of node, or empty string if node has no value.\r
        Ch *value() const\r
        {\r
            return m_value ? m_value : nullstr();\r
        }\r
\r
        //! Gets size of node value, not including terminator character.\r
        //! This function works correctly irrespective of whether value is or is not zero terminated.\r
        //! \\return Size of node value, in characters.\r
        std::size_t value_size() const\r
        {\r
            return m_value ? m_value_size : 0;\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Node modification\r
    \r
        //! Sets name of node to a non zero-terminated string.\r
        //! See \\ref ownership_of_strings.\r
        //! <br><br>\r
        //! Note that node does not own its name or value, it only stores a pointer to it. \r
        //! It will not delete or otherwise free the pointer on destruction.\r
        //! It is reponsibility of the user to properly manage lifetime of the string.\r
        //! The easiest way to achieve it is to use memory_pool of the document to allocate the string -\r
        //! on destruction of the document the string will be automatically freed.\r
        //! <br><br>\r
        //! Size of name must be specified separately, because name does not have to be zero terminated.\r
        //! Use name(const Ch *) function to have the length automatically calculated (string must be zero terminated).\r
        //! \\param name Name of node to set. Does not have to be zero terminated.\r
        //! \\param size Size of name, in characters. This does not include zero terminator, if one is present.\r
        void name(const Ch *name, std::size_t size)\r
        {\r
            m_name = const_cast<Ch *>(name);\r
            m_name_size = size;\r
        }\r
\r
        //! Sets name of node to a zero-terminated string.\r
        //! See also \\ref ownership_of_strings and xml_node::name(const Ch *, std::size_t).\r
        //! \\param name Name of node to set. Must be zero terminated.\r
        void name(const Ch *name)\r
        {\r
            this->name(name, internal::measure(name));\r
        }\r
\r
        //! Sets value of node to a non zero-terminated string.\r
        //! See \\ref ownership_of_strings.\r
        //! <br><br>\r
        //! Note that node does not own its name or value, it only stores a pointer to it. \r
        //! It will not delete or otherwise free the pointer on destruction.\r
        //! It is reponsibility of the user to properly manage lifetime of the string.\r
        //! The easiest way to achieve it is to use memory_pool of the document to allocate the string -\r
        //! on destruction of the document the string will be automatically freed.\r
        //! <br><br>\r
        //! Size of value must be specified separately, because it does not have to be zero terminated.\r
        //! Use value(const Ch *) function to have the length automatically calculated (string must be zero terminated).\r
        //! <br><br>\r
        //! If an element has a child node of type node_data, it will take precedence over element value when printing.\r
        //! If you want to manipulate data of elements using values, use parser flag rapidxml::parse_no_data_nodes to prevent creation of data nodes by the parser.\r
        //! \\param value value of node to set. Does not have to be zero terminated.\r
        //! \\param size Size of value, in characters. This does not include zero terminator, if one is present.\r
        void value(const Ch *value, std::size_t size)\r
        {\r
            m_value = const_cast<Ch *>(value);\r
            m_value_size = size;\r
        }\r
\r
        //! Sets value of node to a zero-terminated string.\r
        //! See also \\ref ownership_of_strings and xml_node::value(const Ch *, std::size_t).\r
        //! \\param value Vame of node to set. Must be zero terminated.\r
        void value(const Ch *value)\r
        {\r
            this->value(value, internal::measure(value));\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Related nodes access\r
    \r
        //! Gets node parent.\r
        //! \\return Pointer to parent node, or 0 if there is no parent.\r
        xml_node<Ch> *parent() const\r
        {\r
            return m_parent;\r
        }\r
\r
    protected:\r
\r
        // Return empty string\r
        static Ch *nullstr()\r
        {\r
            static Ch zero = Ch(\'\\0\');\r
            return &zero;\r
        }\r
\r
        Ch *m_name;                         // Name of node, or 0 if no name\r
        Ch *m_value;                        // Value of node, or 0 if no value\r
        std::size_t m_name_size;            // Length of node name, or undefined of no name\r
        std::size_t m_value_size;           // Length of node value, or undefined if no value\r
        xml_node<Ch> *m_parent;             // Pointer to parent node, or 0 if none\r
\r
    };\r
\r
    //! Class representing attribute node of XML document. \r
    //! Each attribute has name and value strings, which are available through name() and value() functions (inherited from xml_base).\r
    //! Note that after parse, both name and value of attribute will point to interior of source text used for parsing. \r
    //! Thus, this text must persist in memory for the lifetime of attribute.\r
    //! \\param Ch Character type to use.\r
    template<class Ch = char>\r
    class xml_attribute: public xml_base<Ch>\r
    {\r
\r
        friend class xml_node<Ch>;\r
    \r
    public:\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Construction & destruction\r
    \r
        //! Constructs an empty attribute with the specified type. \r
        //! Consider using memory_pool of appropriate xml_document if allocating attributes manually.\r
        xml_attribute()\r
        {\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Related nodes access\r
    \r
        //! Gets document of which attribute is a child.\r
        //! \\return Pointer to document that contains this attribute, or 0 if there is no parent document.\r
        xml_document<Ch> *document() const\r
        {\r
            if (xml_node<Ch> *node = this->parent())\r
            {\r
                while (node->parent())\r
                    node = node->parent();\r
                return node->type() == node_document ? static_cast<xml_document<Ch> *>(node) : 0;\r
            }\r
            else\r
                return 0;\r
        }\r
\r
        //! Gets previous attribute, optionally matching attribute name. \r
        //! \\param name Name of attribute to find, or 0 to return previous attribute regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero\r
        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string\r
        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters\r
        //! \\return Pointer to found attribute, or 0 if not found.\r
        xml_attribute<Ch> *previous_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const\r
        {\r
            if (name)\r
            {\r
                if (name_size == 0)\r
                    name_size = internal::measure(name);\r
                for (xml_attribute<Ch> *attribute = m_prev_attribute; attribute; attribute = attribute->m_prev_attribute)\r
                    if (internal::compare(attribute->name(), attribute->name_size(), name, name_size, case_sensitive))\r
                        return attribute;\r
                return 0;\r
            }\r
            else\r
                return this->m_parent ? m_prev_attribute : 0;\r
        }\r
\r
        //! Gets next attribute, optionally matching attribute name. \r
        //! \\param name Name of attribute to find, or 0 to return next attribute regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero\r
        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string\r
        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters\r
        //! \\return Pointer to found attribute, or 0 if not found.\r
        xml_attribute<Ch> *next_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const\r
        {\r
            if (name)\r
            {\r
                if (name_size == 0)\r
                    name_size = internal::measure(name);\r
                for (xml_attribute<Ch> *attribute = m_next_attribute; attribute; attribute = attribute->m_next_attribute)\r
                    if (internal::compare(attribute->name(), attribute->name_size(), name, name_size, case_sensitive))\r
                        return attribute;\r
                return 0;\r
            }\r
            else\r
                return this->m_parent ? m_next_attribute : 0;\r
        }\r
\r
    private:\r
\r
        xml_attribute<Ch> *m_prev_attribute;        // Pointer to previous sibling of attribute, or 0 if none; only valid if parent is non-zero\r
        xml_attribute<Ch> *m_next_attribute;        // Pointer to next sibling of attribute, or 0 if none; only valid if parent is non-zero\r
    \r
    };\r
\r
    ///////////////////////////////////////////////////////////////////////////\r
    // XML node\r
\r
    //! Class representing a node of XML document. \r
    //! Each node may have associated name and value strings, which are available through name() and value() functions. \r
    //! Interpretation of name and value depends on type of the node.\r
    //! Type of node can be determined by using type() function.\r
    //! <br><br>\r
    //! Note that after parse, both name and value of node, if any, will point interior of source text used for parsing. \r
    //! Thus, this text must persist in the memory for the lifetime of node.\r
    //! \\param Ch Character type to use.\r
    template<class Ch = char>\r
    class xml_node: public xml_base<Ch>\r
    {\r
\r
    public:\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Construction & destruction\r
    \r
        //! Constructs an empty node with the specified type. \r
        //! Consider using memory_pool of appropriate document to allocate nodes manually.\r
        //! \\param type Type of node to construct.\r
        xml_node(node_type type)\r
            : m_type(type)\r
            , m_first_node(0)\r
            , m_first_attribute(0)\r
        {\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Node data access\r
    \r
        //! Gets type of node.\r
        //! \\return Type of node.\r
        node_type type() const\r
        {\r
            return m_type;\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Related nodes access\r
    \r
        //! Gets document of which node is a child.\r
        //! \\return Pointer to document that contains this node, or 0 if there is no parent document.\r
        xml_document<Ch> *document() const\r
        {\r
            xml_node<Ch> *node = const_cast<xml_node<Ch> *>(this);\r
            while (node->parent())\r
                node = node->parent();\r
            return node->type() == node_document ? static_cast<xml_document<Ch> *>(node) : 0;\r
        }\r
\r
        //! Gets first child node, optionally matching node name.\r
        //! \\param name Name of child to find, or 0 to return first child regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero\r
        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string\r
        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters\r
        //! \\return Pointer to found child, or 0 if not found.\r
        xml_node<Ch> *first_node(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const\r
        {\r
            if (name)\r
            {\r
                if (name_size == 0)\r
                    name_size = internal::measure(name);\r
                for (xml_node<Ch> *child = m_first_node; child; child = child->next_sibling())\r
                    if (internal::compare(child->name(), child->name_size(), name, name_size, case_sensitive))\r
                        return child;\r
                return 0;\r
            }\r
            else\r
                return m_first_node;\r
        }\r
\r
        //! Gets last child node, optionally matching node name. \r
        //! Behaviour is undefined if node has no children.\r
        //! Use first_node() to test if node has children.\r
        //! \\param name Name of child to find, or 0 to return last child regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero\r
        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string\r
        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters\r
        //! \\return Pointer to found child, or 0 if not found.\r
        xml_node<Ch> *last_node(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const\r
        {\r
            assert(m_first_node);  // Cannot query for last child if node has no children\r
            if (name)\r
            {\r
                if (name_size == 0)\r
                    name_size = internal::measure(name);\r
                for (xml_node<Ch> *child = m_last_node; child; child = child->previous_sibling())\r
                    if (internal::compare(child->name(), child->name_size(), name, name_size, case_sensitive))\r
                        return child;\r
                return 0;\r
            }\r
            else\r
                return m_last_node;\r
        }\r
\r
        //! Gets previous sibling node, optionally matching node name. \r
        //! Behaviour is undefined if node has no parent.\r
        //! Use parent() to test if node has a parent.\r
        //! \\param name Name of sibling to find, or 0 to return previous sibling regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero\r
        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string\r
        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters\r
        //! \\return Pointer to found sibling, or 0 if not found.\r
        xml_node<Ch> *previous_sibling(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const\r
        {\r
            assert(this->m_parent);     // Cannot query for siblings if node has no parent\r
            if (name)\r
            {\r
                if (name_size == 0)\r
                    name_size = internal::measure(name);\r
                for (xml_node<Ch> *sibling = m_prev_sibling; sibling; sibling = sibling->m_prev_sibling)\r
                    if (internal::compare(sibling->name(), sibling->name_size(), name, name_size, case_sensitive))\r
                        return sibling;\r
                return 0;\r
            }\r
            else\r
                return m_prev_sibling;\r
        }\r
\r
        //! Gets next sibling node, optionally matching node name. \r
        //! Behaviour is undefined if node has no parent.\r
        //! Use parent() to test if node has a parent.\r
        //! \\param name Name of sibling to find, or 0 to return next sibling regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero\r
        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string\r
        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters\r
        //! \\return Pointer to found sibling, or 0 if not found.\r
        xml_node<Ch> *next_sibling(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const\r
        {\r
            assert(this->m_parent);     // Cannot query for siblings if node has no parent\r
            if (name)\r
            {\r
                if (name_size == 0)\r
                    name_size = internal::measure(name);\r
                for (xml_node<Ch> *sibling = m_next_sibling; sibling; sibling = sibling->m_next_sibling)\r
                    if (internal::compare(sibling->name(), sibling->name_size(), name, name_size, case_sensitive))\r
                        return sibling;\r
                return 0;\r
            }\r
            else\r
                return m_next_sibling;\r
        }\r
\r
        //! Gets first attribute of node, optionally matching attribute name.\r
        //! \\param name Name of attribute to find, or 0 to return first attribute regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero\r
        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string\r
        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters\r
        //! \\return Pointer to found attribute, or 0 if not found.\r
        xml_attribute<Ch> *first_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const\r
        {\r
            if (name)\r
            {\r
                if (name_size == 0)\r
                    name_size = internal::measure(name);\r
                for (xml_attribute<Ch> *attribute = m_first_attribute; attribute; attribute = attribute->m_next_attribute)\r
                    if (internal::compare(attribute->name(), attribute->name_size(), name, name_size, case_sensitive))\r
                        return attribute;\r
                return 0;\r
            }\r
            else\r
                return m_first_attribute;\r
        }\r
\r
        //! Gets last attribute of node, optionally matching attribute name.\r
        //! \\param name Name of attribute to find, or 0 to return last attribute regardless of its name; this string doesn\'t have to be zero-terminated if name_size is non-zero\r
        //! \\param name_size Size of name, in characters, or 0 to have size calculated automatically from string\r
        //! \\param case_sensitive Should name comparison be case-sensitive; non case-sensitive comparison works properly only for ASCII characters\r
        //! \\return Pointer to found attribute, or 0 if not found.\r
        xml_attribute<Ch> *last_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const\r
        {\r
            if (name)\r
            {\r
                if (name_size == 0)\r
                    name_size = internal::measure(name);\r
                for (xml_attribute<Ch> *attribute = m_last_attribute; attribute; attribute = attribute->m_prev_attribute)\r
                    if (internal::compare(attribute->name(), attribute->name_size(), name, name_size, case_sensitive))\r
                        return attribute;\r
                return 0;\r
            }\r
            else\r
                return m_first_attribute ? m_last_attribute : 0;\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Node modification\r
    \r
        //! Sets type of node.\r
        //! \\param type Type of node to set.\r
        void type(node_type type)\r
        {\r
            m_type = type;\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Node manipulation\r
\r
        //! Prepends a new child node.\r
        //! The prepended child becomes the first child, and all existing children are moved one position back.\r
        //! \\param child Node to prepend.\r
        void prepend_node(xml_node<Ch> *child)\r
        {\r
            assert(child && !child->parent() && child->type() != node_document);\r
            if (first_node())\r
            {\r
                child->m_next_sibling = m_first_node;\r
                m_first_node->m_prev_sibling = child;\r
            }\r
            else\r
            {\r
                child->m_next_sibling = 0;\r
                m_last_node = child;\r
            }\r
            m_first_node = child;\r
            child->m_parent = this;\r
            child->m_prev_sibling = 0;\r
        }\r
\r
        //! Appends a new child node. \r
        //! The appended child becomes the last child.\r
        //! \\param child Node to append.\r
        void append_node(xml_node<Ch> *child)\r
        {\r
            assert(child && !child->parent() && child->type() != node_document);\r
            if (first_node())\r
            {\r
                child->m_prev_sibling = m_last_node;\r
                m_last_node->m_next_sibling = child;\r
            }\r
            else\r
            {\r
                child->m_prev_sibling = 0;\r
                m_first_node = child;\r
            }\r
            m_last_node = child;\r
            child->m_parent = this;\r
            child->m_next_sibling = 0;\r
        }\r
\r
        //! Inserts a new child node at specified place inside the node. \r
        //! All children after and including the specified node are moved one position back.\r
        //! \\param where Place where to insert the child, or 0 to insert at the back.\r
        //! \\param child Node to insert.\r
        void insert_node(xml_node<Ch> *where, xml_node<Ch> *child)\r
        {\r
            assert(!where || where->parent() == this);\r
            assert(child && !child->parent() && child->type() != node_document);\r
            if (where == m_first_node)\r
                prepend_node(child);\r
            else if (where == 0)\r
                append_node(child);\r
            else\r
            {\r
                child->m_prev_sibling = where->m_prev_sibling;\r
                child->m_next_sibling = where;\r
                where->m_prev_sibling->m_next_sibling = child;\r
                where->m_prev_sibling = child;\r
                child->m_parent = this;\r
            }\r
        }\r
\r
        //! Removes first child node. \r
        //! If node has no children, behaviour is undefined.\r
        //! Use first_node() to test if node has children.\r
        void remove_first_node()\r
        {\r
            assert(first_node());\r
            xml_node<Ch> *child = m_first_node;\r
            m_first_node = child->m_next_sibling;\r
            if (child->m_next_sibling)\r
                child->m_next_sibling->m_prev_sibling = 0;\r
            else\r
                m_last_node = 0;\r
            child->m_parent = 0;\r
        }\r
\r
        //! Removes last child of the node. \r
        //! If node has no children, behaviour is undefined.\r
        //! Use first_node() to test if node has children.\r
        void remove_last_node()\r
        {\r
            assert(first_node());\r
            xml_node<Ch> *child = m_last_node;\r
            if (child->m_prev_sibling)\r
            {\r
                m_last_node = child->m_prev_sibling;\r
                child->m_prev_sibling->m_next_sibling = 0;\r
            }\r
            else\r
                m_first_node = 0;\r
            child->m_parent = 0;\r
        }\r
\r
        //! Removes specified child from the node\r
        // \\param where Pointer to child to be removed.\r
        void remove_node(xml_node<Ch> *where)\r
        {\r
            assert(where && where->parent() == this);\r
            assert(first_node());\r
            if (where == m_first_node)\r
                remove_first_node();\r
            else if (where == m_last_node)\r
                remove_last_node();\r
            else\r
            {\r
                where->m_prev_sibling->m_next_sibling = where->m_next_sibling;\r
                where->m_next_sibling->m_prev_sibling = where->m_prev_sibling;\r
                where->m_parent = 0;\r
            }\r
        }\r
\r
        //! Removes all child nodes (but not attributes).\r
        void remove_all_nodes()\r
        {\r
            for (xml_node<Ch> *node = first_node(); node; node = node->m_next_sibling)\r
                node->m_parent = 0;\r
            m_first_node = 0;\r
        }\r
\r
        //! Prepends a new attribute to the node.\r
        //! \\param attribute Attribute to prepend.\r
        void prepend_attribute(xml_attribute<Ch> *attribute)\r
        {\r
            assert(attribute && !attribute->parent());\r
            if (first_attribute())\r
            {\r
                attribute->m_next_attribute = m_first_attribute;\r
                m_first_attribute->m_prev_attribute = attribute;\r
            }\r
            else\r
            {\r
                attribute->m_next_attribute = 0;\r
                m_last_attribute = attribute;\r
            }\r
            m_first_attribute = attribute;\r
            attribute->m_parent = this;\r
            attribute->m_prev_attribute = 0;\r
        }\r
\r
        //! Appends a new attribute to the node.\r
        //! \\param attribute Attribute to append.\r
        void append_attribute(xml_attribute<Ch> *attribute)\r
        {\r
            assert(attribute && !attribute->parent());\r
            if (first_attribute())\r
            {\r
                attribute->m_prev_attribute = m_last_attribute;\r
                m_last_attribute->m_next_attribute = attribute;\r
            }\r
            else\r
            {\r
                attribute->m_prev_attribute = 0;\r
                m_first_attribute = attribute;\r
            }\r
            m_last_attribute = attribute;\r
            attribute->m_parent = this;\r
            attribute->m_next_attribute = 0;\r
        }\r
\r
        //! Inserts a new attribute at specified place inside the node. \r
        //! All attributes after and including the specified attribute are moved one position back.\r
        //! \\param where Place where to insert the attribute, or 0 to insert at the back.\r
        //! \\param attribute Attribute to insert.\r
        void insert_attribute(xml_attribute<Ch> *where, xml_attribute<Ch> *attribute)\r
        {\r
            assert(!where || where->parent() == this);\r
            assert(attribute && !attribute->parent());\r
            if (where == m_first_attribute)\r
                prepend_attribute(attribute);\r
            else if (where == 0)\r
                append_attribute(attribute);\r
            else\r
            {\r
                attribute->m_prev_attribute = where->m_prev_attribute;\r
                attribute->m_next_attribute = where;\r
                where->m_prev_attribute->m_next_attribute = attribute;\r
                where->m_prev_attribute = attribute;\r
                attribute->m_parent = this;\r
            }\r
        }\r
\r
        //! Removes first attribute of the node. \r
        //! If node has no attributes, behaviour is undefined.\r
        //! Use first_attribute() to test if node has attributes.\r
        void remove_first_attribute()\r
        {\r
            assert(first_attribute());\r
            xml_attribute<Ch> *attribute = m_first_attribute;\r
            if (attribute->m_next_attribute)\r
            {\r
                attribute->m_next_attribute->m_prev_attribute = 0;\r
            }\r
            else\r
                m_last_attribute = 0;\r
            attribute->m_parent = 0;\r
            m_first_attribute = attribute->m_next_attribute;\r
        }\r
\r
        //! Removes last attribute of the node. \r
        //! If node has no attributes, behaviour is undefined.\r
        //! Use first_attribute() to test if node has attributes.\r
        void remove_last_attribute()\r
        {\r
            assert(first_attribute());\r
            xml_attribute<Ch> *attribute = m_last_attribute;\r
            if (attribute->m_prev_attribute)\r
            {\r
                attribute->m_prev_attribute->m_next_attribute = 0;\r
                m_last_attribute = attribute->m_prev_attribute;\r
            }\r
            else\r
                m_first_attribute = 0;\r
            attribute->m_parent = 0;\r
        }\r
\r
        //! Removes specified attribute from node.\r
        //! \\param where Pointer to attribute to be removed.\r
        void remove_attribute(xml_attribute<Ch> *where)\r
        {\r
            assert(first_attribute() && where->parent() == this);\r
            if (where == m_first_attribute)\r
                remove_first_attribute();\r
            else if (where == m_last_attribute)\r
                remove_last_attribute();\r
            else\r
            {\r
                where->m_prev_attribute->m_next_attribute = where->m_next_attribute;\r
                where->m_next_attribute->m_prev_attribute = where->m_prev_attribute;\r
                where->m_parent = 0;\r
            }\r
        }\r
\r
        //! Removes all attributes of node.\r
        void remove_all_attributes()\r
        {\r
            for (xml_attribute<Ch> *attribute = first_attribute(); attribute; attribute = attribute->m_next_attribute)\r
                attribute->m_parent = 0;\r
            m_first_attribute = 0;\r
        }\r
        \r
    private:\r
\r
        ///////////////////////////////////////////////////////////////////////////\r
        // Restrictions\r
\r
        // No copying\r
        xml_node(const xml_node &);\r
        void operator =(const xml_node &);\r
    \r
        ///////////////////////////////////////////////////////////////////////////\r
        // Data members\r
    \r
        // Note that some of the pointers below have UNDEFINED values if certain other pointers are 0.\r
        // This is required for maximum performance, as it allows the parser to omit initialization of \r
        // unneded/redundant values.\r
        //\r
        // The rules are as follows:\r
        // 1. first_node and first_attribute contain valid pointers, or 0 if node has no children/attributes respectively\r
        // 2. last_node and last_attribute are valid only if node has at least one child/attribute respectively, otherwise they contain garbage\r
        // 3. prev_sibling and next_sibling are valid only if node has a parent, otherwise they contain garbage\r
\r
        node_type m_type;                       // Type of node; always valid\r
        xml_node<Ch> *m_first_node;             // Pointer to first child node, or 0 if none; always valid\r
        xml_node<Ch> *m_last_node;              // Pointer to last child node, or 0 if none; this value is only valid if m_first_node is non-zero\r
        xml_attribute<Ch> *m_first_attribute;   // Pointer to first attribute of node, or 0 if none; always valid\r
        xml_attribute<Ch> *m_last_attribute;    // Pointer to last attribute of node, or 0 if none; this value is only valid if m_first_attribute is non-zero\r
        xml_node<Ch> *m_prev_sibling;           // Pointer to previous sibling of node, or 0 if none; this value is only valid if m_parent is non-zero\r
        xml_node<Ch> *m_next_sibling;           // Pointer to next sibling of node, or 0 if none; this value is only valid if m_parent is non-zero\r
\r
    };\r
\r
    ///////////////////////////////////////////////////////////////////////////\r
    // XML document\r
    \r
    //! This class represents root of the DOM hierarchy. \r
    //! It is also an xml_node and a memory_pool through public inheritance.\r
    //! Use parse() function to build a DOM tree from a zero-terminated XML text string.\r
    //! parse() function allocates memory for nodes and attributes by using functions of xml_document, \r
    //! which are inherited from memory_pool.\r
    //! To access root node of the document, use the document itself, as if it was an xml_node.\r
    //! \\param Ch Character type to use.\r
    template<class Ch = char>\r
    class xml_document: public xml_node<Ch>, public memory_pool<Ch>\r
    {\r
    \r
    public:\r
\r
        //! Constructs empty XML document\r
        xml_document()\r
            : xml_node<Ch>(node_document)\r
        {\r
        }\r
\r
        //! Parses zero-terminated XML string according to given flags.\r
        //! Passed string will be modified by the parser, unless rapidxml::parse_non_destructive flag is used.\r
        //! The string must persist for the lifetime of the document.\r
        //! In case of error, rapidxml::parse_error exception will be thrown.\r
        //! <br><br>\r
        //! If you want to parse contents of a file, you must first load the file into the memory, and pass pointer to its beginning.\r
        //! Make sure that data is zero-terminated.\r
        //! <br><br>\r
        //! Document can be parsed into multiple times. \r
        //! Each new call to parse removes previous nodes and attributes (if any), but does not clear memory pool.\r
        //! \\param text XML data to parse; pointer is non-const to denote fact that this data may be modified by the parser.\r
        template<int Flags>\r
        void parse(Ch *text)\r
        {\r
            assert(text);\r
            \r
            // Remove current contents\r
            this->remove_all_nodes();\r
            this->remove_all_attributes();\r
            \r
            // Parse BOM, if any\r
            parse_bom<Flags>(text);\r
            \r
            // Parse children\r
            while (1)\r
            {\r
                // Skip whitespace before node\r
                skip<whitespace_pred, Flags>(text);\r
                if (*text == 0)\r
                    break;\r
\r
                // Parse and append new child\r
                if (*text == Ch(\'<\'))\r
                {\r
                    ++text;     // Skip \'<\'\r
                    if (xml_node<Ch> *node = parse_node<Flags>(text))\r
                        this->append_node(node);\r
                }\r
                else\r
                    RAPIDXML_PARSE_ERROR("expected <", text);\r
            }\r
\r
        }\r
\r
        //! Clears the document by deleting all nodes and clearing the memory pool.\r
        //! All nodes owned by document pool are destroyed.\r
        void clear()\r
        {\r
            this->remove_all_nodes();\r
            this->remove_all_attributes();\r
            memory_pool<Ch>::clear();\r
        }\r
        \r
    private:\r
\r
        ///////////////////////////////////////////////////////////////////////\r
        // Internal character utility functions\r
        \r
        // Detect whitespace character\r
        struct whitespace_pred\r
        {\r
            static unsigned char test(Ch ch)\r
            {\r
                return internal::lookup_tables<0>::lookup_whitespace[static_cast<unsigned char>(ch)];\r
            }\r
        };\r
\r
        // Detect node name character\r
        struct node_name_pred\r
        {\r
            static unsigned char test(Ch ch)\r
            {\r
                return internal::lookup_tables<0>::lookup_node_name[static_cast<unsigned char>(ch)];\r
            }\r
        };\r
\r
        // Detect attribute name character\r
        struct attribute_name_pred\r
        {\r
            static unsigned char test(Ch ch)\r
            {\r
                return internal::lookup_tables<0>::lookup_attribute_name[static_cast<unsigned char>(ch)];\r
            }\r
        };\r
\r
        // Detect text character (PCDATA)\r
        struct text_pred\r
        {\r
            static unsigned char test(Ch ch)\r
            {\r
                return internal::lookup_tables<0>::lookup_text[static_cast<unsigned char>(ch)];\r
            }\r
        };\r
\r
        // Detect text character (PCDATA) that does not require processing\r
        struct text_pure_no_ws_pred\r
        {\r
            static unsigned char test(Ch ch)\r
            {\r
                return internal::lookup_tables<0>::lookup_text_pure_no_ws[static_cast<unsigned char>(ch)];\r
            }\r
        };\r
\r
        // Detect text character (PCDATA) that does not require processing\r
        struct text_pure_with_ws_pred\r
        {\r
            static unsigned char test(Ch ch)\r
            {\r
                return internal::lookup_tables<0>::lookup_text_pure_with_ws[static_cast<unsigned char>(ch)];\r
            }\r
        };\r
\r
        // Detect attribute value character\r
        template<Ch Quote>\r
        struct attribute_value_pred\r
        {\r
            static unsigned char test(Ch ch)\r
            {\r
                if (Quote == Ch(\'\\\'\'))\r
                    return internal::lookup_tables<0>::lookup_attribute_data_1[static_cast<unsigned char>(ch)];\r
                if (Quote == Ch(\'\\"\'))\r
                    return internal::lookup_tables<0>::lookup_attribute_data_2[static_cast<unsigned char>(ch)];\r
                return 0;       // Should never be executed, to avoid warnings on Comeau\r
            }\r
        };\r
\r
        // Detect attribute value character\r
        template<Ch Quote>\r
        struct attribute_value_pure_pred\r
        {\r
            static unsigned char test(Ch ch)\r
            {\r
                if (Quote == Ch(\'\\\'\'))\r
                    return internal::lookup_tables<0>::lookup_attribute_data_1_pure[static_cast<unsigned char>(ch)];\r
                if (Quote == Ch(\'\\"\'))\r
                    return internal::lookup_tables<0>::lookup_attribute_data_2_pure[static_cast<unsigned char>(ch)];\r
                return 0;       // Should never be executed, to avoid warnings on Comeau\r
            }\r
        };\r
\r
        // Insert coded character, using UTF8 or 8-bit ASCII\r
        template<int Flags>\r
        static void insert_coded_character(Ch *&text, unsigned long code)\r
        {\r
            if (Flags & parse_no_utf8)\r
            {\r
                // Insert 8-bit ASCII character\r
                // Todo: possibly verify that code is less than 256 and use replacement char otherwise?\r
                text[0] = static_cast<unsigned char>(code);\r
                text += 1;\r
            }\r
            else\r
            {\r
                // Insert UTF8 sequence\r
                if (code < 0x80)    // 1 byte sequence\r
                {\r
\t                text[0] = static_cast<unsigned char>(code);\r
                    text += 1;\r
                }\r
                else if (code < 0x800)  // 2 byte sequence\r
                {\r
\t                text[1] = static_cast<unsigned char>((code | 0x80) & 0xBF); code >>= 6;\r
\t                text[0] = static_cast<unsigned char>(code | 0xC0);\r
                    text += 2;\r
                }\r
\t            else if (code < 0x10000)    // 3 byte sequence\r
                {\r
\t                text[2] = static_cast<unsigned char>((code | 0x80) & 0xBF); code >>= 6;\r
\t                text[1] = static_cast<unsigned char>((code | 0x80) & 0xBF); code >>= 6;\r
\t                text[0] = static_cast<unsigned char>(code | 0xE0);\r
                    text += 3;\r
                }\r
\t            else if (code < 0x110000)   // 4 byte sequence\r
                {\r
\t                text[3] = static_cast<unsigned char>((code | 0x80) & 0xBF); code >>= 6;\r
\t                text[2] = static_cast<unsigned char>((code | 0x80) & 0xBF); code >>= 6;\r
\t                text[1] = static_cast<unsigned char>((code | 0x80) & 0xBF); code >>= 6;\r
\t                text[0] = static_cast<unsigned char>(code | 0xF0);\r
                    text += 4;\r
                }\r
                else    // Invalid, only codes up to 0x10FFFF are allowed in Unicode\r
                {\r
                    RAPIDXML_PARSE_ERROR("invalid numeric character entity", text);\r
                }\r
            }\r
        }\r
\r
        // Skip characters until predicate evaluates to true\r
        template<class StopPred, int Flags>\r
        static void skip(Ch *&text)\r
        {\r
            Ch *tmp = text;\r
            while (StopPred::test(*tmp))\r
                ++tmp;\r
            text = tmp;\r
        }\r
\r
        // Skip characters until predicate evaluates to true while doing the following:\r
        // - replacing XML character entity references with proper characters (&apos; &amp; &quot; &lt; &gt; &#...;)\r
        // - condensing whitespace sequences to single space character\r
        template<class StopPred, class StopPredPure, int Flags>\r
        static Ch *skip_and_expand_character_refs(Ch *&text)\r
        {\r
            // If entity translation, whitespace condense and whitespace trimming is disabled, use plain skip\r
            if (Flags & parse_no_entity_translation && \r
                !(Flags & parse_normalize_whitespace) &&\r
                !(Flags & parse_trim_whitespace))\r
            {\r
                skip<StopPred, Flags>(text);\r
                return text;\r
            }\r
            \r
            // Use simple skip until first modification is detected\r
            skip<StopPredPure, Flags>(text);\r
\r
            // Use translation skip\r
            Ch *src = text;\r
            Ch *dest = src;\r
            while (StopPred::test(*src))\r
            {\r
                // If entity translation is enabled    \r
                if (!(Flags & parse_no_entity_translation))\r
                {\r
                    // Test if replacement is needed\r
                    if (src[0] == Ch(\'&\'))\r
                    {\r
                        switch (src[1])\r
                        {\r
\r
                        // &amp; &apos;\r
                        case Ch(\'a\'): \r
                            if (src[2] == Ch(\'m\') && src[3] == Ch(\'p\') && src[4] == Ch(\';\'))\r
                            {\r
                                *dest = Ch(\'&\');\r
                                ++dest;\r
                                src += 5;\r
                                continue;\r
                            }\r
                            if (src[2] == Ch(\'p\') && src[3] == Ch(\'o\') && src[4] == Ch(\'s\') && src[5] == Ch(\';\'))\r
                            {\r
                                *dest = Ch(\'\\\'\');\r
                                ++dest;\r
                                src += 6;\r
                                continue;\r
                            }\r
                            break;\r
\r
                        // &quot;\r
                        case Ch(\'q\'): \r
                            if (src[2] == Ch(\'u\') && src[3] == Ch(\'o\') && src[4] == Ch(\'t\') && src[5] == Ch(\';\'))\r
                            {\r
                                *dest = Ch(\'"\');\r
                                ++dest;\r
                                src += 6;\r
                                continue;\r
                            }\r
                            break;\r
\r
                        // &gt;\r
                        case Ch(\'g\'): \r
                            if (src[2] == Ch(\'t\') && src[3] == Ch(\';\'))\r
                            {\r
                                *dest = Ch(\'>\');\r
                                ++dest;\r
                                src += 4;\r
                                continue;\r
                            }\r
                            break;\r
\r
                        // &lt;\r
                        case Ch(\'l\'): \r
                            if (src[2] == Ch(\'t\') && src[3] == Ch(\';\'))\r
                            {\r
                                *dest = Ch(\'<\');\r
                                ++dest;\r
                                src += 4;\r
                                continue;\r
                            }\r
                            break;\r
\r
                        // &#...; - assumes ASCII\r
                        case Ch(\'#\'): \r
                            if (src[2] == Ch(\'x\'))\r
                            {\r
                                unsigned long code = 0;\r
                                src += 3;   // Skip &#x\r
                                while (1)\r
                                {\r
                                    unsigned char digit = internal::lookup_tables<0>::lookup_digits[static_cast<unsigned char>(*src)];\r
                                    if (digit == 0xFF)\r
                                        break;\r
                                    code = code * 16 + digit;\r
                                    ++src;\r
                                }\r
                                insert_coded_character<Flags>(dest, code);    // Put character in output\r
                            }\r
                            else\r
                            {\r
                                unsigned long code = 0;\r
                                src += 2;   // Skip &\\''')
        write(u'''                                while (1)\r
                                {\r
                                    unsigned char digit = internal::lookup_tables<0>::lookup_digits[static_cast<unsigned char>(*src)];\r
                                    if (digit == 0xFF)\r
                                        break;\r
                                    code = code * 10 + digit;\r
                                    ++src;\r
                                }\r
                                insert_coded_character<Flags>(dest, code);    // Put character in output\r
                            }\r
                            if (*src == Ch(\';\'))\r
                                ++src;\r
                            else\r
                                RAPIDXML_PARSE_ERROR("expected ;", src);\r
                            continue;\r
\r
                        // Something else\r
                        default:\r
                            // Ignore, just copy \'&\' verbatim\r
                            break;\r
\r
                        }\r
                    }\r
                }\r
                \r
                // If whitespace condensing is enabled\r
                if (Flags & parse_normalize_whitespace)\r
                {\r
                    // Test if condensing is needed                 \r
                    if (whitespace_pred::test(*src))\r
                    {\r
                        *dest = Ch(\' \'); ++dest;    // Put single space in dest\r
                        ++src;                      // Skip first whitespace char\r
                        // Skip remaining whitespace chars\r
                        while (whitespace_pred::test(*src))\r
                            ++src;\r
                        continue;\r
                    }\r
                }\r
\r
                // No replacement, only copy character\r
                *dest++ = *src++;\r
\r
            }\r
\r
            // Return new end\r
            text = src;\r
            return dest;\r
\r
        }\r
\r
        ///////////////////////////////////////////////////////////////////////\r
        // Internal parsing functions\r
        \r
        // Parse BOM, if any\r
        template<int Flags>\r
        void parse_bom(Ch *&text)\r
        {\r
            // UTF-8?\r
            if (static_cast<unsigned char>(text[0]) == 0xEF && \r
                static_cast<unsigned char>(text[1]) == 0xBB && \r
                static_cast<unsigned char>(text[2]) == 0xBF)\r
            {\r
                text += 3;      // Skup utf-8 bom\r
            }\r
        }\r
\r
        // Parse XML declaration (<?xml...)\r
        template<int Flags>\r
        xml_node<Ch> *parse_xml_declaration(Ch *&text)\r
        {\r
            // If parsing of declaration is disabled\r
            if (!(Flags & parse_declaration_node))\r
            {\r
                // Skip until end of declaration\r
                while (text[0] != Ch(\'?\') || text[1] != Ch(\'>\'))\r
                {\r
                    if (!text[0])\r
                        RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                    ++text;\r
                }\r
                text += 2;    // Skip \'?>\'\r
                return 0;\r
            }\r
\r
            // Create declaration\r
            xml_node<Ch> *declaration = this->allocate_node(node_declaration);\r
\r
            // Skip whitespace before attributes or ?>\r
            skip<whitespace_pred, Flags>(text);\r
\r
            // Parse declaration attributes\r
            parse_node_attributes<Flags>(text, declaration);\r
            \r
            // Skip ?>\r
            if (text[0] != Ch(\'?\') || text[1] != Ch(\'>\'))\r
                RAPIDXML_PARSE_ERROR("expected ?>", text);\r
            text += 2;\r
            \r
            return declaration;\r
        }\r
\r
        // Parse XML comment (<!--...)\r
        template<int Flags>\r
        xml_node<Ch> *parse_comment(Ch *&text)\r
        {\r
            // If parsing of comments is disabled\r
            if (!(Flags & parse_comment_nodes))\r
            {\r
                // Skip until end of comment\r
                while (text[0] != Ch(\'-\') || text[1] != Ch(\'-\') || text[2] != Ch(\'>\'))\r
                {\r
                    if (!text[0])\r
                        RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                    ++text;\r
                }\r
                text += 3;     // Skip \'-->\'\r
                return 0;      // Do not produce comment node\r
            }\r
\r
            // Remember value start\r
            Ch *value = text;\r
\r
            // Skip until end of comment\r
            while (text[0] != Ch(\'-\') || text[1] != Ch(\'-\') || text[2] != Ch(\'>\'))\r
            {\r
                if (!text[0])\r
                    RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                ++text;\r
            }\r
\r
            // Create comment node\r
            xml_node<Ch> *comment = this->allocate_node(node_comment);\r
            comment->value(value, text - value);\r
            \r
            // Place zero terminator after comment value\r
            if (!(Flags & parse_no_string_terminators))\r
                *text = Ch(\'\\0\');\r
            \r
            text += 3;     // Skip \'-->\'\r
            return comment;\r
        }\r
\r
        // Parse DOCTYPE\r
        template<int Flags>\r
        xml_node<Ch> *parse_doctype(Ch *&text)\r
        {\r
            // Remember value start\r
            Ch *value = text;\r
\r
            // Skip to >\r
            while (*text != Ch(\'>\'))\r
            {\r
                // Determine character type\r
                switch (*text)\r
                {\r
                \r
                // If \'[\' encountered, scan for matching ending \']\' using naive algorithm with depth\r
                // This works for all W3C test files except for 2 most wicked\r
                case Ch(\'[\'):\r
                {\r
                    ++text;     // Skip \'[\'\r
                    int depth = 1;\r
                    while (depth > 0)\r
                    {\r
                        switch (*text)\r
                        {\r
                            case Ch(\'[\'): ++depth; break;\r
                            case Ch(\']\'): --depth; break;\r
                            case 0: RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                        }\r
                        ++text;\r
                    }\r
                    break;\r
                }\r
                \r
                // Error on end of text\r
                case Ch(\'\\0\'):\r
                    RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                \r
                // Other character, skip it\r
                default:\r
                    ++text;\r
\r
                }\r
            }\r
            \r
            // If DOCTYPE nodes enabled\r
            if (Flags & parse_doctype_node)\r
            {\r
                // Create a new doctype node\r
                xml_node<Ch> *doctype = this->allocate_node(node_doctype);\r
                doctype->value(value, text - value);\r
                \r
                // Place zero terminator after value\r
                if (!(Flags & parse_no_string_terminators))\r
                    *text = Ch(\'\\0\');\r
\r
                text += 1;      // skip \'>\'\r
                return doctype;\r
            }\r
            else\r
            {\r
                text += 1;      // skip \'>\'\r
                return 0;\r
            }\r
\r
        }\r
\r
        // Parse PI\r
        template<int Flags>\r
        xml_node<Ch> *parse_pi(Ch *&text)\r
        {\r
            // If creation of PI nodes is enabled\r
            if (Flags & parse_pi_nodes)\r
            {\r
                // Create pi node\r
                xml_node<Ch> *pi = this->allocate_node(node_pi);\r
\r
                // Extract PI target name\r
                Ch *name = text;\r
                skip<node_name_pred, Flags>(text);\r
                if (text == name)\r
                    RAPIDXML_PARSE_ERROR("expected PI target", text);\r
                pi->name(name, text - name);\r
                \r
                // Skip whitespace between pi target and pi\r
                skip<whitespace_pred, Flags>(text);\r
\r
                // Remember start of pi\r
                Ch *value = text;\r
                \r
                // Skip to \'?>\'\r
                while (text[0] != Ch(\'?\') || text[1] != Ch(\'>\'))\r
                {\r
                    if (*text == Ch(\'\\0\'))\r
                        RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                    ++text;\r
                }\r
\r
                // Set pi value (verbatim, no entity expansion or whitespace normalization)\r
                pi->value(value, text - value);     \r
                \r
                // Place zero terminator after name and value\r
                if (!(Flags & parse_no_string_terminators))\r
                {\r
                    pi->name()[pi->name_size()] = Ch(\'\\0\');\r
                    pi->value()[pi->value_size()] = Ch(\'\\0\');\r
                }\r
                \r
                text += 2;                          // Skip \'?>\'\r
                return pi;\r
            }\r
            else\r
            {\r
                // Skip to \'?>\'\r
                while (text[0] != Ch(\'?\') || text[1] != Ch(\'>\'))\r
                {\r
                    if (*text == Ch(\'\\0\'))\r
                        RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                    ++text;\r
                }\r
                text += 2;    // Skip \'?>\'\r
                return 0;\r
            }\r
        }\r
\r
        // Parse and append data\r
        // Return character that ends data.\r
        // This is necessary because this character might have been overwritten by a terminating 0\r
        template<int Flags>\r
        Ch parse_and_append_data(xml_node<Ch> *node, Ch *&text, Ch *contents_start)\r
        {\r
            // Backup to contents start if whitespace trimming is disabled\r
            if (!(Flags & parse_trim_whitespace))\r
                text = contents_start;     \r
            \r
            // Skip until end of data\r
            Ch *value = text, *end;\r
            if (Flags & parse_normalize_whitespace)\r
                end = skip_and_expand_character_refs<text_pred, text_pure_with_ws_pred, Flags>(text);   \r
            else\r
                end = skip_and_expand_character_refs<text_pred, text_pure_no_ws_pred, Flags>(text);\r
\r
            // Trim trailing whitespace if flag is set; leading was already trimmed by whitespace skip after >\r
            if (Flags & parse_trim_whitespace)\r
            {\r
                if (Flags & parse_normalize_whitespace)\r
                {\r
                    // Whitespace is already condensed to single space characters by skipping function, so just trim 1 char off the end\r
                    if (*(end - 1) == Ch(\' \'))\r
                        --end;\r
                }\r
                else\r
                {\r
                    // Backup until non-whitespace character is found\r
                    while (whitespace_pred::test(*(end - 1)))\r
                        --end;\r
                }\r
            }\r
            \r
            // If characters are still left between end and value (this test is only necessary if normalization is enabled)\r
            // Create new data node\r
            if (!(Flags & parse_no_data_nodes))\r
            {\r
                xml_node<Ch> *data = this->allocate_node(node_data);\r
                data->value(value, end - value);\r
                node->append_node(data);\r
            }\r
\r
            // Add data to parent node if no data exists yet\r
            if (!(Flags & parse_no_element_values)) \r
                if (*node->value() == Ch(\'\\0\'))\r
                    node->value(value, end - value);\r
\r
            // Place zero terminator after value\r
            if (!(Flags & parse_no_string_terminators))\r
            {\r
                Ch ch = *text;\r
                *end = Ch(\'\\0\');\r
                return ch;      // Return character that ends data; this is required because zero terminator overwritten it\r
            }\r
\r
            // Return character that ends data\r
            return *text;\r
        }\r
\r
        // Parse CDATA\r
        template<int Flags>\r
        xml_node<Ch> *parse_cdata(Ch *&text)\r
        {\r
            // If CDATA is disabled\r
            if (Flags & parse_no_data_nodes)\r
            {\r
                // Skip until end of cdata\r
                while (text[0] != Ch(\']\') || text[1] != Ch(\']\') || text[2] != Ch(\'>\'))\r
                {\r
                    if (!text[0])\r
                        RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                    ++text;\r
                }\r
                text += 3;      // Skip ]]>\r
                return 0;       // Do not produce CDATA node\r
            }\r
\r
            // Skip until end of cdata\r
            Ch *value = text;\r
            while (text[0] != Ch(\']\') || text[1] != Ch(\']\') || text[2] != Ch(\'>\'))\r
            {\r
                if (!text[0])\r
                    RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                ++text;\r
            }\r
\r
            // Create new cdata node\r
            xml_node<Ch> *cdata = this->allocate_node(node_cdata);\r
            cdata->value(value, text - value);\r
\r
            // Place zero terminator after value\r
            if (!(Flags & parse_no_string_terminators))\r
                *text = Ch(\'\\0\');\r
\r
            text += 3;      // Skip ]]>\r
            return cdata;\r
        }\r
        \r
        // Parse element node\r
        template<int Flags>\r
        xml_node<Ch> *parse_element(Ch *&text)\r
        {\r
            // Create element node\r
            xml_node<Ch> *element = this->allocate_node(node_element);\r
\r
            // Extract element name\r
            Ch *name = text;\r
            skip<node_name_pred, Flags>(text);\r
            if (text == name)\r
                RAPIDXML_PARSE_ERROR("expected element name", text);\r
            element->name(name, text - name);\r
            \r
            // Skip whitespace between element name and attributes or >\r
            skip<whitespace_pred, Flags>(text);\r
\r
            // Parse attributes, if any\r
            parse_node_attributes<Flags>(text, element);\r
\r
            // Determine ending type\r
            if (*text == Ch(\'>\'))\r
            {\r
                ++text;\r
                parse_node_contents<Flags>(text, element);\r
            }\r
            else if (*text == Ch(\'/\'))\r
            {\r
                ++text;\r
                if (*text != Ch(\'>\'))\r
                    RAPIDXML_PARSE_ERROR("expected >", text);\r
                ++text;\r
            }\r
            else\r
                RAPIDXML_PARSE_ERROR("expected >", text);\r
\r
            // Place zero terminator after name\r
            if (!(Flags & parse_no_string_terminators))\r
                element->name()[element->name_size()] = Ch(\'\\0\');\r
\r
            // Return parsed element\r
            return element;\r
        }\r
\r
        // Determine node type, and parse it\r
        template<int Flags>\r
        xml_node<Ch> *parse_node(Ch *&text)\r
        {\r
            // Parse proper node type\r
            switch (text[0])\r
            {\r
\r
            // <...\r
            default: \r
                // Parse and append element node\r
                return parse_element<Flags>(text);\r
\r
            // <?...\r
            case Ch(\'?\'): \r
                ++text;     // Skip ?\r
                if ((text[0] == Ch(\'x\') || text[0] == Ch(\'X\')) &&\r
                    (text[1] == Ch(\'m\') || text[1] == Ch(\'M\')) && \r
                    (text[2] == Ch(\'l\') || text[2] == Ch(\'L\')) &&\r
                    whitespace_pred::test(text[3]))\r
                {\r
                    // \'<?xml \' - xml declaration\r
                    text += 4;      // Skip \'xml \'\r
                    return parse_xml_declaration<Flags>(text);\r
                }\r
                else\r
                {\r
                    // Parse PI\r
                    return parse_pi<Flags>(text);\r
                }\r
            \r
            // <!...\r
            case Ch(\'!\'): \r
\r
                // Parse proper subset of <! node\r
                switch (text[1])    \r
                {\r
                \r
                // <!-\r
                case Ch(\'-\'):\r
                    if (text[2] == Ch(\'-\'))\r
                    {\r
                        // \'<!--\' - xml comment\r
                        text += 3;     // Skip \'!--\'\r
                        return parse_comment<Flags>(text);\r
                    }\r
                    break;\r
\r
                // <![\r
                case Ch(\'[\'):\r
                    if (text[2] == Ch(\'C\') && text[3] == Ch(\'D\') && text[4] == Ch(\'A\') && \r
                        text[5] == Ch(\'T\') && text[6] == Ch(\'A\') && text[7] == Ch(\'[\'))\r
                    {\r
                        // \'<![CDATA[\' - cdata\r
                        text += 8;     // Skip \'![CDATA[\'\r
                        return parse_cdata<Flags>(text);\r
                    }\r
                    break;\r
\r
                // <!D\r
                case Ch(\'D\'):\r
                    if (text[2] == Ch(\'O\') && text[3] == Ch(\'C\') && text[4] == Ch(\'T\') && \r
                        text[5] == Ch(\'Y\') && text[6] == Ch(\'P\') && text[7] == Ch(\'E\') && \r
                        whitespace_pred::test(text[8]))\r
                    {\r
                        // \'<!DOCTYPE \' - doctype\r
                        text += 9;      // skip \'!DOCTYPE \'\r
                        return parse_doctype<Flags>(text);\r
                    }\r
\r
                }   // switch\r
\r
                // Attempt to skip other, unrecognized node types starting with <!\r
                ++text;     // Skip !\r
                while (*text != Ch(\'>\'))\r
                {\r
                    if (*text == 0)\r
                        RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
                    ++text;\r
                }\r
                ++text;     // Skip \'>\'\r
                return 0;   // No node recognized\r
\r
            }\r
        }\r
\r
        // Parse contents of the node - children, data etc.\r
        template<int Flags>\r
        void parse_node_contents(Ch *&text, xml_node<Ch> *node)\r
        {\r
            // For all children and text\r
            while (1)\r
            {\r
                // Skip whitespace between > and node contents\r
                Ch *contents_start = text;      // Store start of node contents before whitespace is skipped\r
                skip<whitespace_pred, Flags>(text);\r
                Ch next_char = *text;\r
\r
            // After data nodes, instead of continuing the loop, control jumps here.\r
            // This is because zero termination inside parse_and_append_data() function\r
            // would wreak havoc with the above code.\r
            // Also, skipping whitespace after data nodes is unnecessary.\r
            after_data_node:    \r
                \r
                // Determine what comes next: node closing, child node, data node, or 0?\r
                switch (next_char)\r
                {\r
                \r
                // Node closing or child node\r
                case Ch(\'<\'):\r
                    if (text[1] == Ch(\'/\'))\r
                    {\r
                        // Node closing\r
                        text += 2;      // Skip \'</\'\r
                        if (Flags & parse_validate_closing_tags)\r
                        {\r
                            // Skip and validate closing tag name\r
                            Ch *closing_name = text;\r
                            skip<node_name_pred, Flags>(text);\r
                            if (!internal::compare(node->name(), node->name_size(), closing_name, text - closing_name, true))\r
                                RAPIDXML_PARSE_ERROR("invalid closing tag name", text);\r
                        }\r
                        else\r
                        {\r
                            // No validation, just skip name\r
                            skip<node_name_pred, Flags>(text);\r
                        }\r
                        // Skip remaining whitespace after node name\r
                        skip<whitespace_pred, Flags>(text);\r
                        if (*text != Ch(\'>\'))\r
                            RAPIDXML_PARSE_ERROR("expected >", text);\r
                        ++text;     // Skip \'>\'\r
                        return;     // Node closed, finished parsing contents\r
                    }\r
                    else\r
                    {\r
                        // Child node\r
                        ++text;     // Skip \'<\'\r
                        if (xml_node<Ch> *child = parse_node<Flags>(text))\r
                            node->append_node(child);\r
                    }\r
                    break;\r
\r
                // End of data - error\r
                case Ch(\'\\0\'):\r
                    RAPIDXML_PARSE_ERROR("unexpected end of data", text);\r
\r
                // Data node\r
                default:\r
                    next_char = parse_and_append_data<Flags>(node, text, contents_start);\r
                    goto after_data_node;   // Bypass regular processing after data nodes\r
\r
                }\r
            }\r
        }\r
        \r
        // Parse XML attributes of the node\r
        template<int Flags>\r
        void parse_node_attributes(Ch *&text, xml_node<Ch> *node)\r
        {\r
            // For all attributes \r
            while (attribute_name_pred::test(*text))\r
            {\r
                // Extract attribute name\r
                Ch *name = text;\r
                ++text;     // Skip first character of attribute name\r
                skip<attribute_name_pred, Flags>(text);\r
                if (text == name)\r
                    RAPIDXML_PARSE_ERROR("expected attribute name", name);\r
\r
                // Create new attribute\r
                xml_attribute<Ch> *attribute = this->allocate_attribute();\r
                attribute->name(name, text - name);\r
                node->append_attribute(attribute);\r
\r
                // Skip whitespace after attribute name\r
                skip<whitespace_pred, Flags>(text);\r
\r
                // Skip =\r
                if (*text != Ch(\'=\'))\r
                    RAPIDXML_PARSE_ERROR("expected =", text);\r
                ++text;\r
\r
                // Add terminating zero after name\r
                if (!(Flags & parse_no_string_terminators))\r
                    attribute->name()[attribute->name_size()] = 0;\r
\r
                // Skip whitespace after =\r
                skip<whitespace_pred, Flags>(text);\r
\r
                // Skip quote and remember if it was \' or "\r
                Ch quote = *text;\r
                if (quote != Ch(\'\\\'\') && quote != Ch(\'"\'))\r
                    RAPIDXML_PARSE_ERROR("expected \' or \\"", text);\r
                ++text;\r
\r
                // Extract attribute value and expand char refs in it\r
                Ch *value = text, *end;\r
                const int AttFlags = Flags & ~parse_normalize_whitespace;   // No whitespace normalization in attributes\r
                if (quote == Ch(\'\\\'\'))\r
                    end = skip_and_expand_character_refs<attribute_value_pred<Ch(\'\\\'\')>, attribute_value_pure_pred<Ch(\'\\\'\')>, AttFlags>(text);\r
                else\r
                    end = skip_and_expand_character_refs<attribute_value_pred<Ch(\'"\')>, attribute_value_pure_pred<Ch(\'"\')>, AttFlags>(text);\r
                \r
                // Set attribute value\r
                attribute->value(value, end - value);\r
                \r
                // Make sure that end quote is present\r
                if (*text != quote)\r
                    RAPIDXML_PARSE_ERROR("expected \' or \\"", text);\r
                ++text;     // Skip quote\r
\r
                // Add terminating zero after value\r
                if (!(Flags & parse_no_string_terminators))\r
                    attribute->value()[attribute->value_size()] = 0;\r
\r
                // Skip whitespace after attribute value\r
                skip<whitespace_pred, Flags>(text);\r
            }\r
        }\r
\r
    };\r
\r
    //! \\cond internal\r
    namespace internal\r
    {\r
\r
        // Whitespace (space \\n \\r \\t)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_whitespace[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0,  // 0\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 1\r
             1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 2\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 3\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 4\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 5\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 6\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 7\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 8\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 9\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // A\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // B\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // C\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // D\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // E\r
             0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0   // F\r
        };\r
\r
        // Node name (anything but space \\n \\r \\t / > ? \\0)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_node_name[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Text (i.e. PCDATA) (anything but < \\0)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_text[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Text (i.e. PCDATA) that does not require processing when ws normalization is disabled \r
        // (anything but < \\0 &)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_text_pure_no_ws[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Text (i.e. PCDATA) that does not require processing when ws normalizationis is enabled\r
        // (anything but < \\0 & space \\n \\r \\t)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_text_pure_with_ws[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Attribute name (anything but space \\n \\r \\t / < > = ? ! \\0)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_attribute_name[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  0,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Attribute data with single quote (anything but \' \\0)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_1[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Attribute data with single quote that does not require processing (anything but \' \\0 &)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_1_pure[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Attribute data with double quote (anything but " \\0)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_2[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Attribute data with double quote that does not require processing (anything but " \\0 &)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_2_pure[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
             0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 0\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 1\r
             1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 4\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 7\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // B\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // C\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // D\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // E\r
             1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1   // F\r
        };\r
\r
        // Digits (dec and hex, 255 denotes end of numeric character reference)\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_digits[256] = \r
        {\r
          // 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 0\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 1\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 2\r
             0,  1,  2,  3,  4,  5,  6,  7,  8,  9,255,255,255,255,255,255,  // 3\r
           255, 10, 11, 12, 13, 14, 15,255,255,255,255,255,255,255,255,255,  // 4\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 5\r
           255, 10, 11, 12, 13, 14, 15,255,255,255,255,255,255,255,255,255,  // 6\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 7\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 8\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // 9\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // A\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // B\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // C\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // D\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  // E\r
           255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255   // F\r
        };\r
    \r
        // Upper case conversion\r
        template<int Dummy>\r
        const unsigned char lookup_tables<Dummy>::lookup_upcase[256] = \r
        {\r
          // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A   B   C   D   E   F\r
           0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,   // 0\r
           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,   // 1\r
           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,   // 2\r
           48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,   // 3\r
           64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,   // 4\r
           80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,   // 5\r
           96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,   // 6\r
           80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 123,124,125,126,127,  // 7\r
           128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,  // 8\r
           144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,  // 9\r
           160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,  // A\r
           176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,  // B\r
           192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,  // C\r
           208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,  // D\r
           224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,  // E\r
           240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255   // F\r
        };\r
    }\r
    //! \\endcond\r
\r
}\r
\r
// Undefine internal macros\r
#undef RAPIDXML_PARSE_ERROR\r
\r
// On MSVC, restore warnings state\r
#ifdef _MSC_VER\r
    #pragma warning(pop)\r
#endif\r
\r
#endif\r
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_rapidxml_hpp= 'respond'

## END CLASS DEFINITION

if not hasattr(rapidxml_hpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(rapidxml_hpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(rapidxml_hpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=rapidxml_hpp()).run()


