#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1430256412.248789
__CHEETAH_genTimestamp__ = 'Tue Apr 28 16:26:52 2015'
__CHEETAH_src__ = '/home/kelsier/Repositories/rosmod/code/rosmod_v3/src/templates/component_cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Apr 19 17:15:22 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class component_cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(component_cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 1, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 1, col 1.
        write(u''' "''')
        _v = VFFSL(SL,"package_name",True) # u'$package_name' on line 1, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 1, col 16.
        write(u'''/''')
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 1, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 1, col 30.
        write(u'''.hpp"

''')
        if VFFSL(SL,"user_globals",True) == "": # generated from line 3, col 1
            write(u'''//# Start User Globals Marker

//# End User Globals Marker
''')
        else: # generated from line 7, col 1
            write(u'''//# Start User Globals Marker
''')
            _v = VFFSL(SL,"user_globals",True) # u'$user_globals' on line 9, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$user_globals')) # from line 9, col 1.
            write(u'''//# End User Globals Marker
''')
        write(u'''
// -------------------------------------------------------
// BUSINESS LOGIC OF THESE FUNCTIONS SUPPLIED BY DEVELOPER
// -------------------------------------------------------

// Init Function
''')
        if VFFSL(SL,"init_business_logic",True) == "": # generated from line 17, col 1
            write(u'''//# Start Init Marker
void ''')
            _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 19, col 6
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 19, col 6.
            write(u'''::Init(const ros::TimerEvent& event)
{
    // Initialize Component

    // Stop Init Timer
    initOneShotTimer.stop();
}
//# End Init Marker
''')
        else: # generated from line 27, col 1
            write(u'''//# Start Init Marker
''')
            _v = VFFSL(SL,"init_business_logic",True) # u'$init_business_logic' on line 29, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$init_business_logic')) # from line 29, col 1.
            write(u'''//# End Init Marker
''')
        write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 32, col 1
            for sub in VFFSL(SL,"subscribers",True): # generated from line 33, col 1
                write(u'''// OnOneData Subscription handler for ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 34, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 34, col 39.
                write(u''' subscriber
''')
                if VFN(VFFSL(SL,"sub",True),"properties",True)["business_logic"] == "": # generated from line 35, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 36, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 36, col 11.
                    write(u'''_OnOneData Marker
void ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 37, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 37, col 6.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 37, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 37, col 23.
                    write(u'''_OnOneData(const ''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 37, col 65
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 37, col 65.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 37, col 129
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 37, col 129.
                    write(u'''::ConstPtr& received_data)
{
    // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 39, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 39, col 27.
                    write(u''' subscriber subscribing to topic ''')
                    _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'$sub.properties["message_reference"].properties["name"]' on line 39, col 83
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].properties["name"]')) # from line 39, col 83.
                    write(u''' callback 

}
//# End ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 42, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 42, col 9.
                    write(u'''_OnOneData Marker
''')
                else: # generated from line 43, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 44, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 44, col 11.
                    write(u'''_OnOneData Marker
''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["business_logic"] # u'$sub.properties["business_logic"]' on line 45, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["business_logic"]')) # from line 45, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 45, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 45, col 42.
                    write(u'''_OnOneData Marker
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)) > 0: # generated from line 50, col 1
            for server in VFFSL(SL,"servers",True): # generated from line 51, col 1
                write(u'''// Component Service Callback
''')
                if VFN(VFFSL(SL,"server",True),"properties",True)["business_logic"] == "": # generated from line 53, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 54, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 54, col 11.
                    write(u'''Callback Marker
bool ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 55, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 55, col 6.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 55, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 55, col 23.
                    write(u'''Callback(''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 55, col 92
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 55, col 92.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 55, col 159
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 55, col 159.
                    write(u'''::Request  &req,
    ''')
                    _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 56, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 56, col 5.
                    write(u'''::''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 56, col 72
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 56, col 72.
                    write(u'''::Response &res)
{
    // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 58, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 58, col 27.
                    write(u''' Server providing ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 58, col 71
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 58, col 71.
                    write(u''' Service

    return true;
}
//# End ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 62, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 62, col 9.
                    write(u'''Callback Marker
''')
                else: # generated from line 63, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 64, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 64, col 11.
                    write(u'''Callback Marker
''')
                    _v = VFN(VFFSL(SL,"server",True),"properties",True)["business_logic"] # u'$server.properties["business_logic"]' on line 65, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["business_logic"]')) # from line 65, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 65, col 45
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 65, col 45.
                    write(u'''Callback Marker
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)) > 0: # generated from line 70, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 71, col 1
                write(u'''// Callback for ''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 72, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 72, col 17.
                write(u''' timer
''')
                if VFN(VFFSL(SL,"timer",True),"properties",True)["business_logic"] == "": # generated from line 73, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 74, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 74, col 11.
                    write(u'''Callback Marker
void ''')
                    _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 75, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 75, col 6.
                    write(u'''::''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 75, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 75, col 23.
                    write(u'''Callback(const ros::TimerEvent& event)
{
    // Business Logic for ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 77, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 77, col 27.
                    write(u''' 

}
//# End ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 80, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 80, col 9.
                    write(u'''Callback Marker
''')
                else: # generated from line 81, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 82, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 82, col 11.
                    write(u'''Callback Marker
''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["business_logic"] # u'$timer.properties["business_logic"]' on line 83, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["business_logic"]')) # from line 83, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 83, col 44
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 83, col 44.
                    write(u'''Callback Marker
''')
            write(u'''
''')
        write(u'''// ---------------------------------------------
// EVERYTHING BELOW HERE IS COMPLETELY GENERATED
// ---------------------------------------------

// Destructor - required for clean shutdown when process is killed
''')
        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 93, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 93, col 1.
        write(u'''::~''')
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 93, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 93, col 19.
        write(u'''()
{
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)) > 0: # generated from line 95, col 1
            for timer in VFFSL(SL,"timers",True): # generated from line 96, col 1
                write(u'''    ''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 97, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 97, col 5.
                write(u'''.stop();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 100, col 1
            for pub in VFFSL(SL,"publishers",True): # generated from line 101, col 1
                write(u'''    ''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'${pub.properties["name"]}' on line 102, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["name"]}')) # from line 102, col 5.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 105, col 1
            for sub in VFFSL(SL,"subscribers",True): # generated from line 106, col 1
                write(u'''    ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 107, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 107, col 5.
                write(u'''.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)) > 0: # generated from line 110, col 1
            for provided in VFFSL(SL,"provided_services",True): # generated from line 111, col 1
                write(u'''    ''')
                _v = VFFSL(SL,"provided",True) # u'${provided}' on line 112, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${provided}')) # from line 112, col 5.
                write(u'''_server.shutdown();
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"required_services",True)) > 0: # generated from line 115, col 1
            for required in VFFSL(SL,"required_services",True): # generated from line 116, col 1
                write(u'''    ''')
                _v = VFFSL(SL,"required",True)[1] # u'${required[1]}' on line 117, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${required[1]}')) # from line 117, col 5.
                write(u'''_client.shutdown();
''')
        if VFFSL(SL,"destructor",True) == "": # generated from line 120, col 1
            write(u'''//# Start Destructor Marker

//# End Destructor Marker
''')
        else: # generated from line 124, col 1
            write(u'''//# Start Destructor Marker
''')
            _v = VFFSL(SL,"destructor",True) # u'$destructor' on line 126, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$destructor')) # from line 126, col 1.
            write(u'''//# End Destructor Marker
''')
        write(u'''}

void ''')
        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 130, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 130, col 6.
        write(u'''::startUp()
{
    ros::NodeHandle nh;

    // Need to read in and parse the group configuration xml if it exists
    GroupXMLParser groupParser;
    std::map<std::string,std::string> *portGroupMap = NULL;
    std::string configFileName = nodeName + "." + compName + ".xml";
    if (groupParser.Parse(configFileName))
    {
\tportGroupMap = &groupParser.portGroupMap;
    }

    std::string advertiseName;

''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 145, col 5
            write(u'''    // Configure all subscribers associated with this component
''')
            for sub in VFFSL(SL,"subscribers",True): # generated from line 147, col 5
                write(u'''    // subscriber: ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 148, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 148, col 20.
                write(u'''
    advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 149, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 149, col 22.
                write(u'''";
    if ( portGroupMap != NULL && portGroupMap->find("''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 150, col 54
                if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 150, col 54.
                write(u'''") != portGroupMap->end() )
        advertiseName += "_" + (*portGroupMap)["''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 151, col 49
                if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 151, col 49.
                write(u'''"];
    ros::SubscribeOptions ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 152, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 152, col 27.
                write(u'''_options;
    ''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 153, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 153, col 5.
                write(u'''_options = 
\tros::SubscribeOptions::create<''')
                _v = VFN(VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 154, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 154, col 32.
                write(u'''::''')
                _v = VFN(VFN(VFFSL(SL,"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 154, col 96
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 154, col 96.
                write(u'''>
\t    (advertiseName.c_str(),
\t     1000,
\t     boost::bind(&''')
                _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 157, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 157, col 20.
                write(u'''::''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 157, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 157, col 37.
                write(u'''_OnOneData, this, _1),
\t     ros::VoidPtr(),
             &this->compQueue);
    this->''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 160, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 160, col 11.
                write(u''' = nh.subscribe(''')
                _v = VFN(VFFSL(SL,"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 160, col 52
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 160, col 52.
                write(u'''_options);
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 164, col 5
            write(u'''    // Configure all publishers associated with this component
''')
            for pub in VFFSL(SL,"publishers",True): # generated from line 166, col 5
                write(u'''    // publisher: ''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 167, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 167, col 19.
                write(u'''
    advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 168, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 168, col 22.
                write(u'''";
    if ( portGroupMap != NULL && portGroupMap->find("''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 169, col 54
                if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 169, col 54.
                write(u'''") != portGroupMap->end() )
        advertiseName += "_" + (*portGroupMap)["''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 170, col 49
                if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 170, col 49.
                write(u'''"];
    this->''')
                _v = VFN(VFFSL(SL,"pub",True),"properties",True)["name"] # u'${pub.properties["name"]}' on line 171, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["name"]}')) # from line 171, col 11.
                write(u''' = nh.advertise<''')
                _v = VFN(VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$pub.properties["message_reference"].parent.properties["name"]' on line 171, col 52
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["message_reference"].parent.properties["name"]')) # from line 171, col 52.
                write(u'''::''')
                _v = VFN(VFN(VFFSL(SL,"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 171, col 116
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 171, col 116.
                write(u'''>
\t(advertiseName.c_str(), 1000);\t
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)): # generated from line 176, col 5
            write(u'''    // Configure all provided services associated with this component
''')
            for server in VFFSL(SL,"servers",True): # generated from line 178, col 5
                write(u'''    // server: ''')
                _v = VFN(VFFSL(SL,"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 179, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 179, col 16.
                write(u'''
    advertiseName = "''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 180, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 180, col 22.
                write(u'''";
    if ( portGroupMap != NULL && portGroupMap->find("''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 181, col 54
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 181, col 54.
                write(u'''_server") != portGroupMap->end() )
        advertiseName += "_" + (*portGroupMap)["''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 182, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 182, col 49.
                write(u'''_server"];
    ros::AdvertiseServiceOptions ''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 183, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 183, col 34.
                write(u'''_server_options;
    ''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 184, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 184, col 5.
                write(u'''_server_options = 
\tros::AdvertiseServiceOptions::create<''')
                _v = VFN(VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 185, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 185, col 39.
                write(u'''::''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 185, col 106
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 185, col 106.
                write(u'''>
\t    (advertiseName.c_str(),
             boost::bind(&''')
                _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 187, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 187, col 27.
                write(u'''::''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 187, col 44
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 187, col 44.
                write(u'''Callback, this, _1, _2),
\t     ros::VoidPtr(),
             &this->compQueue);
    this->''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 190, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 190, col 11.
                write(u'''_server = nh.advertiseService(''')
                _v = VFN(VFN(VFFSL(SL,"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 190, col 101
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 190, col 101.
                write(u'''_server_options);
''')
            write(u''' 
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"required_services",True)) > 0: # generated from line 194, col 5
            write(u'''    // Configure all required services associated with this component
''')
            for required in VFFSL(SL,"required_services",True): # generated from line 196, col 5
                write(u'''    // client: ''')
                _v = VFFSL(SL,"required",True)[1] # u'${required[1]}' on line 197, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${required[1]}')) # from line 197, col 16.
                write(u'''_client
    advertiseName = "''')
                _v = VFFSL(SL,"required",True)[1] # u'$required[1]' on line 198, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'$required[1]')) # from line 198, col 22.
                write(u'''";
    if ( portGroupMap != NULL && portGroupMap->find(advertiseName+"_client") != portGroupMap->end() )
        advertiseName += "_" + (*portGroupMap)[advertiseName+"_client"];
    this->''')
                _v = VFFSL(SL,"required",True)[1] # u'${required[1]}' on line 201, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${required[1]}')) # from line 201, col 11.
                write(u'''_client = nh.serviceClient<''')
                _v = VFFSL(SL,"required",True)[0] # u'$required[0]' on line 201, col 52
                if _v is not None: write(_filter(_v, rawExpr=u'$required[0]')) # from line 201, col 52.
                write(u'''::''')
                _v = VFFSL(SL,"required",True)[1] # u'$required[1]' on line 201, col 66
                if _v is not None: write(_filter(_v, rawExpr=u'$required[1]')) # from line 201, col 66.
                write(u'''>
\t(advertiseName.c_str()); 
''')
            write(u'''
''')
        write(u'''    // Create Init Timer
    ros::TimerOptions timer_options;
    timer_options = 
\tros::TimerOptions
\t    (ros::Duration(-1),
\t     boost::bind(&''')
        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 211, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 211, col 20.
        write(u'''::Init, this, _1),
\t     &this->compQueue,
             true);
    this->initOneShotTimer = nh.createTimer(timer_options);  
  
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)): # generated from line 216, col 5
            write(u'''    // Create all component timers
''')
            for timer in VFFSL(SL,"timers",True): # generated from line 218, col 5
                write(u'''    // timer: timer.properties["name"]
    timer_options = 
\tros::TimerOptions
''')
                if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 222, col 7
                    write(u'''\t     (ros::Duration(-1),
''')
                else: # generated from line 224, col 14
                    write(u'''             (ros::Duration(''')
                    _v = VFN(VFFSL(SL,"timer",True),"properties",True)["period"] # u'$timer.properties["period"]' on line 225, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["period"]')) # from line 225, col 29.
                    write(u'''),
''')
                write(u'''\t     boost::bind(&''')
                _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 227, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 227, col 20.
                write(u'''::''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 227, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 227, col 37.
                write(u'''Callback, this, _1),
''')
                if VFN(VFFSL(SL,"timer",True),"properties",True)["period"] == "0.0": # generated from line 228, col 14
                    write(u'''\t     &this->compQueue, true);
''')
                else: # generated from line 230, col 14
                    write(u'''\t     &this->compQueue);
''')
                write(u'''    this->''')
                _v = VFN(VFFSL(SL,"timer",True),"properties",True)["name"] # u'$(timer.properties["name"])' on line 233, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'$(timer.properties["name"])')) # from line 233, col 11.
                write(u''' = nh.createTimer(timer_options);
''')
            write(u'''
''')
        write(u'''
    /*
     * Identify present working directory of node executable
     */
    std::string s = node_argv[0];
    std::string exec_path = s;
    std::string delimiter = "/";
    std::string exec, pwd;
    size_t pos = 0;
    while ((pos = s.find(delimiter)) != std::string::npos) {
        exec = s.substr(0, pos);
        s.erase(0, pos + delimiter.length());
    }
    exec = s.substr(0, pos);
    pwd = exec_path.erase(exec_path.find(exec), exec.length());
    // Establish the log file name
    std::string log_file_path = pwd + nodeName + "." + compName + ".log"; 

    // Create the log file & open file stream
    LOGGER.CREATE_FILE(log_file_path);

    // Establish log levels of LOGGER
    LOGGER.SET_LOG_LEVELS(groupParser.logging);
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_component_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(component_cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(component_cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(component_cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=component_cpp()).run()


