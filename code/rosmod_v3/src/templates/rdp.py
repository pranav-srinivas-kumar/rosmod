#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1430247718.873351
__CHEETAH_genTimestamp__ = 'Tue Apr 28 14:01:58 2015'
__CHEETAH_src__ = '/home/kelsier/Repositories/rosmod/code/rosmod_v3/src/templates/rdp.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Apr 19 17:15:22 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class rdp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(rdp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''/*
 * ROS Deployment Model
 */

using ''')
        _v = VFN(VFN(VFFSL(SL,"deployment",True),"properties",True)["hardware_configuration_reference"],"properties",True)["name"] # u'$deployment.properties["hardware_configuration_reference"].properties["name"]' on line 5, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'$deployment.properties["hardware_configuration_reference"].properties["name"]')) # from line 5, col 7.
        write(u''';
''')
        if VFFSL(SL,"deployment.children",True) != []: # generated from line 6, col 1
            for host_instance in VFN(VFFSL(SL,"deployment",True),"getChildrenByKind",False)("host_instance"): # generated from line 7, col 1
                write(u'''// ROS Host Instance - ''')
                _v = VFN(VFFSL(SL,"host_instance",True),"properties",True)["name"] # u'$host_instance.properties["name"]' on line 8, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'$host_instance.properties["name"]')) # from line 8, col 24.
                write(u'''
host_instance ''')
                _v = VFN(VFFSL(SL,"host_instance",True),"properties",True)["name"] # u'$host_instance.properties["name"]' on line 9, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'$host_instance.properties["name"]')) # from line 9, col 15.
                write(u'''
{
    properties
    {
        username = "''')
                _v = VFN(VFFSL(SL,"host_instance",True),"properties",True)["username"] # u'$host_instance.properties["username"]' on line 13, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$host_instance.properties["username"]')) # from line 13, col 21.
                write(u'''";
\tsshkey = "''')
                _v = VFN(VFFSL(SL,"host_instance",True),"properties",True)["sshkey"] # u'$host_instance.properties["sshkey"]' on line 14, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'$host_instance.properties["sshkey"]')) # from line 14, col 12.
                write(u'''";
''')
                if VFN(VFFSL(SL,"host_instance",True),"properties",True)["init"] != "": # generated from line 15, col 1
                    write(u'''\tinit = "''')
                    _v = VFN(VFFSL(SL,"host_instance",True),"properties",True)["init"] # u'$host_instance.properties["init"]' on line 16, col 10
                    if _v is not None: write(_filter(_v, rawExpr=u'$host_instance.properties["init"]')) # from line 16, col 10.
                    write(u'''";
''')
                if VFN(VFFSL(SL,"host_instance",True),"properties",True)["env_variables"] != []: # generated from line 18, col 1
                    for env in VFN(VFFSL(SL,"host_instance",True),"properties",True)["env_variables"]: # generated from line 19, col 1
                        write(u'''        ENV ''')
                        _v = VFFSL(SL,"env",True)[0] # u'$env[0]' on line 20, col 13
                        if _v is not None: write(_filter(_v, rawExpr=u'$env[0]')) # from line 20, col 13.
                        write(u''' = "''')
                        _v = VFFSL(SL,"env",True)[1] # u'$env[1]' on line 20, col 24
                        if _v is not None: write(_filter(_v, rawExpr=u'$env[1]')) # from line 20, col 24.
                        write(u'''";
''')
                write(u'''    }

''')
                if VFFSL(SL,"host_instance.children",True) != []: # generated from line 25, col 1
                    write(u'''    nodes
    {
''')
                    for node_instance in VFFSL(SL,"host_instance.children",True): # generated from line 28, col 1
                        write(u'''        // ROS Node Instance - ''')
                        _v = VFN(VFFSL(SL,"node_instance",True),"properties",True)["name"] # u'$node_instance.properties["name"]' on line 29, col 32
                        if _v is not None: write(_filter(_v, rawExpr=u'$node_instance.properties["name"]')) # from line 29, col 32.
                        write(u''' 
        node_instance ''')
                        _v = VFN(VFFSL(SL,"node_instance",True),"properties",True)["name"] # u'$node_instance.properties["name"]' on line 30, col 23
                        if _v is not None: write(_filter(_v, rawExpr=u'$node_instance.properties["name"]')) # from line 30, col 23.
                        write(u'''
\t{
\t    reference = "''')
                        _v = VFN(VFN(VFN(VFFSL(SL,"node_instance",True),"properties",True)["node_reference"],"parent",True),"properties",True)["name"] # u'$node_instance.properties["node_reference"].parent.properties["name"]' on line 32, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'$node_instance.properties["node_reference"].parent.properties["name"]')) # from line 32, col 19.
                        write(u'''/''')
                        _v = VFN(VFN(VFFSL(SL,"node_instance",True),"properties",True)["node_reference"],"properties",True)["name"] # u'$node_instance.properties["node_reference"].properties["name"]' on line 32, col 89
                        if _v is not None: write(_filter(_v, rawExpr=u'$node_instance.properties["node_reference"].properties["name"]')) # from line 32, col 89.
                        write(u'''";
''')
                        if VFN(VFFSL(SL,"node_instance",True),"properties",True)["cmdline_arguments"] != "": # generated from line 33, col 1
                            write(u'''    \t    cmdline_arguments = "''')
                            _v = VFN(VFFSL(SL,"node_instance",True),"properties",True)["cmdline_arguments"] # u'$node_instance.properties["cmdline_arguments"]' on line 34, col 31
                            if _v is not None: write(_filter(_v, rawExpr=u'$node_instance.properties["cmdline_arguments"]')) # from line 34, col 31.
                            write(u'''";\t\t   
''')
                        write(u'''\t}
''')
                    write(u'''    }
''')
                write(u'''}
''')
            for group in VFN(VFFSL(SL,"deployment",True),"getChildrenByKind",False)("group"): # generated from line 42, col 1
                write(u'''// ROS Group - ''')
                _v = VFN(VFFSL(SL,"group",True),"properties",True)['name'] # u"$group.properties['name']" on line 43, col 16
                if _v is not None: write(_filter(_v, rawExpr=u"$group.properties['name']")) # from line 43, col 16.
                write(u'''
group ''')
                _v = VFN(VFFSL(SL,"group",True),"properties",True)['name'] # u"$group.properties['name']" on line 44, col 7
                if _v is not None: write(_filter(_v, rawExpr=u"$group.properties['name']")) # from line 44, col 7.
                write(u'''
{
''')
                for port in VFFSL(SL,"group.children",True): # generated from line 46, col 1
                    write(u'''    ''')
                    _v = VFN(VFN(VFFSL(SL,"port",True),"properties",True)['node_instance_reference'],"properties",True)['name'] # u"${port.properties['node_instance_reference'].properties['name']}" on line 47, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u"${port.properties['node_instance_reference'].properties['name']}")) # from line 47, col 5.
                    write(u'''/''')
                    _v = VFN(VFN(VFFSL(SL,"port",True),"properties",True)['component_instance_reference'],"properties",True)['name'] # u"${port.properties['component_instance_reference'].properties['name']}" on line 47, col 70
                    if _v is not None: write(_filter(_v, rawExpr=u"${port.properties['component_instance_reference'].properties['name']}")) # from line 47, col 70.
                    write(u'''/''')
                    _v = VFN(VFFSL(SL,"port",True),"properties",True)['name'] # u"${port.properties['name']}" on line 47, col 140
                    if _v is not None: write(_filter(_v, rawExpr=u"${port.properties['name']}")) # from line 47, col 140.
                    write(u'''
''')
                write(u'''}
''')
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_rdp= 'respond'

## END CLASS DEFINITION

if not hasattr(rdp, '_initCheetahAttributes'):
    templateAPIClass = getattr(rdp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(rdp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=rdp()).run()


