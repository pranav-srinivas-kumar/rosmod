#ifndef ${define_guard}_HPP
#define ${define_guard}_HPP

$hash_include "ros/ros.h"
$hash_include "Component.hpp"

#for $topic in $topics
$hash_include "$package_name/${topic}.h"
#end for
#for $service in $services
$hash_include "$package_name/${service}.h"
#end for

// --------------------------------
//      USER INCLUDES GO HERE
// --------------------------------

class $component_name : public Component
{
    public:

        // These functions' business logic will be filled in by the user:

	// Init() is always generated
	void Init(const ros::TimerEvent& event);

	#if $len($subscribers) > 0
	#for $sub in $subscribers
	// OnOneData Subscription handler for $sub.name subscriber 
	void OnOneData(const $package_name::$sub.topic::ConstPtr& received_data); 
 
	#end for

	#end if
	#if $len($provided_services) > 0
	#for $provided in $provided_services
	// Component Service Callback
	bool ${provided}Callback($package_name::$provided::Request  &req,
		$package_name::$provided::Response &res);

	#end for

	#end if	
	#if $len($timers) > 0
	#for $timer in $timers
	// Callback for $timer.name timer
	void ${timer.name}Callback(const ros::TimerEvent& event);

	#end for

	#end if
	// these functions' business logic will be auto-generated:

	// startUp() is used to configure timers, publishers, & service providers
	void startUp();

	// required for clean shutdown
	~${component_name}();

    private:

	#if $len($timers) > 0
	#for $timer in $timers
	// ROS Timer - $timer.name
	ros::Timer $timer.name;

	#end for

	#end if
	#if $len($subscribers) > 0
	#for $sub in $subscribers
	// ROS Subscriber - $sub.name
	ros::Subscriber $sub.name; 

	#end for

	#end if
	#if $len($publishers) > 0
	#for $pub in $publishers
	// ROS Publisher - $pub.name
	ros::Publisher $pub.name;

	#end for

	#end if
	#if $len($provided_services) > 0
	#for $provided in $provided_services
	// ROS Service Server - ${provided}_server
	ros::ServiceServer ${provided}_server;

	#end for

	#end if
	#if $len($required_services) > 0
	#for $required in $required_services
	// ROS Service Client - ${required}_client
	ros::ServiceClient ${required}_client;

	#end for

	#end if
};


#endif
