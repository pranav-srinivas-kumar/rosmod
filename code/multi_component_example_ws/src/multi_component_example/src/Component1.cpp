#include "Component1.hpp"

using namespace Node1;

// -------------------------------------------------------
// BUSINESS LOGIC OF THESE FUNCTIONS SUPPLIED BY DEVELOPER
// -------------------------------------------------------

void Component1::Timer0Callback(const ros::TimerEvent& event)
{ 
  multi_component_example::ComponentName compName;
  compName.name = "Component1";
  ROS_INFO("Publishing component name %s from Timer0 callback",compName.name.c_str());
  compNamePub.publish(compName); 
}

// ---------------------------------------------
// EVERYTHING BELOW HERE IS COMPLETELY GENERATED
// ---------------------------------------------

// required for clean shutdown when process is killed
Component1::~Component1()
{
  // These will be autogenerated based on the model
  Timer0.stop();
  compNamePub.shutdown();
}

void Component1::startUp()
{
  ros::NodeHandle nh;

  // configure all subscribers associated with this component

  // configure all publishers associated with this component
  this->compNamePub = nh.advertise<multi_component_example::ComponentName>
    ("ComponentName", 1000);

  // configure all advertised services associated with this component

  // create the timers last to ensure we don't start off with too many callbacks in the queue
  ros::TimerOptions queueTimerOpts;

  // need to start any timers this component contains
  queueTimerOpts = ros::TimerOptions(
				     ros::Duration(1.0),  // this value would be filled out by model
				     boost::bind(&Component1::Timer0Callback, this, _1),
				     &this->compQueue
				     );
  this->Timer0 = nh.createTimer(queueTimerOpts);
}
