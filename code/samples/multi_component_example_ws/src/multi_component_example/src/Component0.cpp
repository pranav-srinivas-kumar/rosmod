#include "Component0.hpp"

using namespace Node1;

// -------------------------------------------------------
// BUSINESS LOGIC OF THESE FUNCTIONS SUPPLIED BY DEVELOPER
// -------------------------------------------------------

void Component0::Init(const ros::TimerEvent& event)
{
  multi_component_example::ComponentName compName;
  compName.name = "Component0";
  LOGGER.DEBUG("COMPONENT 0 : Publishing component name " + compName.name);
  compNamePub.publish(compName);
  initOneShotTimer.stop();
}

void Component0::OnOneData(const multi_component_example::ComponentName::ConstPtr& compName)
{
  LOGGER.DEBUG("COMPONENT 0 : Got component name " + compName->name);
}

void Component0::Timer0Callback(const ros::TimerEvent& event)
{
  LOGGER.DEBUG("COMPONENT 0 : Timer0 callback has triggered!");
}

// ---------------------------------------------
// EVERYTHING BELOW HERE IS COMPLETELY GENERATED
// ---------------------------------------------

// required for clean shutdown when process is killed
Component0::~Component0()
{
  // These will be autogenerated based on the model
  Timer0.stop();
  compNamePub.shutdown();
  compNameSub.shutdown();
}

void Component0::startUp()
{
  ros::NodeHandle nh;

  // configure all subscribers associated with this component
  ros::SubscribeOptions queueSubOpts;

  queueSubOpts = 
    ros::SubscribeOptions::create<multi_component_example::ComponentName>
    ("ComponentName", 
     1000,
     boost::bind(&Component0::OnOneData, this, _1),
     ros::VoidPtr(),//(ros::VoidConstPtr)this,
     &this->compQueue);

  this->compNameSub = nh.subscribe(queueSubOpts);

  // configure all publishers associated with this component
  this->compNamePub = nh.advertise<multi_component_example::ComponentName>
    ("ComponentName", 1000);

  // configure all advertised services associated with this component

  // create the timers last to ensure we don't start off with too many callbacks in the queue
  ros::TimerOptions queueTimerOpts;

  // Need to run Init() once
  queueTimerOpts = ros::TimerOptions(
				     ros::Duration(-1), 
				     boost::bind(&Component0::Init, this, _1),
				     &this->compQueue,
				     true
				     );
  this->initOneShotTimer = nh.createTimer(queueTimerOpts);

  // need to start any timers this component contains
  queueTimerOpts = ros::TimerOptions(
				     ros::Duration(0.5),  // this value would be filled out by model
				     boost::bind(&Component0::Timer0Callback, this, _1),
				     &this->compQueue
				     );
  this->Timer0 = nh.createTimer(queueTimerOpts);

  LOGGER.CREATE_FILE("/home/kelsier/Documents/Component0_log.txt");
}
