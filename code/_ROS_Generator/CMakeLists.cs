// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ROS_Generator
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class CMakeLists : CMakeListsBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("cmake_minimum_required(VERSION 2.8.3)\r\nproject(");
            
            #line 2 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write(")\r\n\r\n## Find catkin macros and libraries\r\n## if COMPONENTS list like find_package" +
                    "(catkin REQUIRED COMPONENTS xyz)\r\n## is used, also find other catkin packages\r\nf" +
                    "ind_package(catkin REQUIRED COMPONENTS\r\nroscpp\r\nstd_msgs\r\nmessage_generation\r\n)\r" +
                    "\n\r\n## System dependencies are found with CMake\'s conventions\r\n# find_package(Boo" +
                    "st REQUIRED COMPONENTS system)\r\n\r\n\r\n## Uncomment this if the package has a setup" +
                    ".py. This macro ensures\r\n## modules and global scripts declared therein get inst" +
                    "alled\r\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\r\n#" +
                    " catkin_python_setup()\r\n\r\n################################################\r\n## D" +
                    "eclare ROS messages, services and actions ##\r\n##################################" +
                    "##############\r\n\r\n## To declare and build messages, services or actions from wit" +
                    "hin this\r\n## package, follow these steps:\r\n## * Let MSG_DEP_SET be the set of pa" +
                    "ckages whose message types you use in\r\n##   your messages/services/actions (e.g." +
                    " std_msgs, actionlib_msgs, ...).\r\n## * In the file package.xml:\r\n##   * add a bu" +
                    "ild_depend and a run_depend tag for each package in MSG_DEP_SET\r\n##   * If MSG_D" +
                    "EP_SET isn\'t empty the following dependencies might have been\r\n##     pulled in " +
                    "transitively but can be declared for certainty nonetheless:\r\n##     * add a buil" +
                    "d_depend tag for \"message_generation\"\r\n##     * add a run_depend tag for \"messag" +
                    "e_runtime\"\r\n## * In this file (CMakeLists.txt):\r\n##   * add \"message_generation\"" +
                    " and every package in MSG_DEP_SET to\r\n##     find_package(catkin REQUIRED COMPON" +
                    "ENTS ...)\r\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\r\n## " +
                    "    catkin_package(CATKIN_DEPENDS ...)\r\n##   * uncomment the add_*_files section" +
                    "s below as needed\r\n##     and list every .msg/.srv/.action file to be processed\r" +
                    "\n##   * uncomment the generate_messages entry below\r\n##   * add every package in" +
                    " MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\r\n\r\n# Generate messages in th" +
                    "e \'msg\' folder\r\nadd_message_files(\r\n  FILES\r\n");
            
            #line 49 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
 foreach (var msg in messages)
{ 
            
            #line default
            #line hidden
            this.Write("  ");
            
            #line 51 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(msg);
            
            #line default
            #line hidden
            
            #line 52 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n)\r\n\r\n# Generate services in the \'srv\' folder\r\nadd_service_files(\r\n  FILES\r\n");
            
            #line 59 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
 foreach (var srv in services)
{ 
            
            #line default
            #line hidden
            this.Write("  ");
            
            #line 61 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(srv);
            
            #line default
            #line hidden
            
            #line 62 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

# Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES ");
            
            #line 90 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write(@"#  CATKIN_DEPENDS roscpp std_msgs
  CATKIN_DEPENDS message_runtime
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

## Declare a cpp library
# add_library(");
            
            #line 108 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write("#   src/${PROJECT_NAME}/");
            
            #line 109 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write(".cpp\r\n# )\r\n\r\n## Declare a cpp executable\r\n# add_executable(");
            
            #line 113 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write("_node src/");
            
            #line 113 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write("_node.cpp)\r\n\r\n## Add cmake target dependencies of the executable/library\r\n## as a" +
                    "n example, message headers may need to be generated before nodes\r\n# add_dependen" +
                    "cies(");
            
            #line 117 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write("_node ");
            
            #line 117 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write("_generate_messages_cpp)\r\n\r\n## Specify libraries to link a library or executable t" +
                    "arget against\r\n# target_link_libraries(");
            
            #line 120 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write(@"_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ");
            
            #line 139 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 139 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write(@"_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN ""*.h""
#   PATTERN "".svn"" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_");
            
            #line 164 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write(@".cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)


include_directories(include ${catkin_INCLUDE_DIRS})

add_executable(nodeMain src/nodeMain.cpp src/Component2.cpp src/Component1.cpp src/Component0.cpp src/Component.cpp)
target_link_libraries(nodeMain ${catkin_LIBRARIES})
add_dependencies(nodeMain ");
            
            #line 177 "C:\Users\Pranav\Documents\GitHub\rosmod\code\_ROS_Generator\CMakeLists.tt"
Write(project_name);
            
            #line default
            #line hidden
            this.Write("_generate_messages_cpp)\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class CMakeListsBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
