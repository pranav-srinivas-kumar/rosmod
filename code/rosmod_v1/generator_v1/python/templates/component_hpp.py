#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1423283002.195194
__CHEETAH_genTimestamp__ = 'Fri Feb  6 22:23:22 2015'
__CHEETAH_src__ = '/home/jeb/repos/rosmod/code/rosmod_v1/generator_v1/python/templates/component_hpp.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Feb  6 20:16:18 2015'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class component_hpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(component_hpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#ifndef ''')
        _v = VFFSL(SL,"define_guard",True) # u'${define_guard}' on line 1, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${define_guard}')) # from line 1, col 9.
        write(u'''_HPP
#define ''')
        _v = VFFSL(SL,"define_guard",True) # u'${define_guard}' on line 2, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${define_guard}')) # from line 2, col 9.
        write(u'''_HPP

''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 4, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 4, col 1.
        write(u''' "ros/ros.h"
''')
        _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 5, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 5, col 1.
        write(u''' "Component.hpp"

// --------------------------------
//      USER INCLUDES GO HERE
// --------------------------------
''')
        if VFFSL(SL,"user_includes",True) == "": # generated from line 10, col 1
            write(u'''//# Start User Includes Marker

//# End User Includes Marker
''')
        else: # generated from line 14, col 1
            write(u'''//# Start User Includes Marker
''')
            _v = VFFSL(SL,"user_includes",True) # u'$user_includes' on line 16, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$user_includes')) # from line 16, col 1.
            write(u'''//# End User Includes Marker
''')
        write(u'''
''')
        for topic in VFFSL(SL,"topics",True): # generated from line 19, col 1
            _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 20, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 20, col 1.
            write(u''' "''')
            _v = VFFSL(SL,"package_name",True) # u'$package_name' on line 20, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 20, col 16.
            write(u'''/''')
            _v = VFFSL(SL,"topic.name",True) # u'${topic.name}' on line 20, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${topic.name}')) # from line 20, col 30.
            write(u'''.h"
''')
        for service in VFFSL(SL,"services",True): # generated from line 22, col 1
            _v = VFFSL(SL,"hash_include",True) # u'$hash_include' on line 23, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 23, col 1.
            write(u''' "''')
            _v = VFFSL(SL,"package_name",True) # u'$package_name' on line 23, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 23, col 16.
            write(u'''/''')
            _v = VFFSL(SL,"service.service.name",True) # u'${service.service.name}' on line 23, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${service.service.name}')) # from line 23, col 30.
            write(u'''.h"
''')
        write(u'''
''')
        if VFFSL(SL,"hpp_globals",True) == "": # generated from line 26, col 1
            write(u'''//# Start User Globals Marker

//# End User Globals Marker
''')
        else: # generated from line 30, col 1
            write(u'''//# Start User Globals Marker
''')
            _v = VFFSL(SL,"hpp_globals",True) # u'$hpp_globals' on line 32, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$hpp_globals')) # from line 32, col 1.
            write(u'''//# End User Globals Marker
''')
        write(u'''
class ''')
        _v = VFFSL(SL,"component_name",True) # u'$component_name' on line 35, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 35, col 7.
        write(u""" : public Component
{
    public:

        // These functions' business logic will be filled in by the user:

\t// Init() is always generated
\tvoid Init(const ros::TimerEvent& event);

""")
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 44, col 2
            for sub in VFFSL(SL,"subscribers",True): # generated from line 45, col 2
                write(u'''\t// OnOneData Subscription handler for ''')
                _v = VFFSL(SL,"sub.name",True) # u'$sub.name' on line 46, col 40
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.name')) # from line 46, col 40.
                write(u''' subscriber 
\tvoid ''')
                _v = VFFSL(SL,"sub.name",True) # u'${sub.name}' on line 47, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.name}')) # from line 47, col 7.
                write(u'''_OnOneData(const ''')
                _v = VFFSL(SL,"package_name",True) # u'$package_name' on line 47, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 47, col 35.
                write(u'''::''')
                _v = VFFSL(SL,"sub.topic.name",True) # u'$sub.topic.name' on line 47, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.topic.name')) # from line 47, col 50.
                write(u'''::ConstPtr& received_data); 
 
''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)) > 0: # generated from line 52, col 2
            for provided in VFFSL(SL,"provided_services",True): # generated from line 53, col 2
                write(u'''\t// Component Service Callback
\tbool ''')
                _v = VFFSL(SL,"provided.name",True) # u'${provided.name}' on line 55, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${provided.name}')) # from line 55, col 7.
                write(u'''Callback(''')
                _v = VFFSL(SL,"package_name",True) # u'$package_name' on line 55, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 55, col 32.
                write(u'''::''')
                _v = VFFSL(SL,"provided.service.name",True) # u'$provided.service.name' on line 55, col 47
                if _v is not None: write(_filter(_v, rawExpr=u'$provided.service.name')) # from line 55, col 47.
                write(u'''::Request  &req,
\t\t''')
                _v = VFFSL(SL,"package_name",True) # u'$package_name' on line 56, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 56, col 3.
                write(u'''::''')
                _v = VFFSL(SL,"provided.service.name",True) # u'$provided.service.name' on line 56, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'$provided.service.name')) # from line 56, col 18.
                write(u'''::Response &res);

''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)) > 0: # generated from line 61, col 2
            for timer in VFFSL(SL,"timers",True): # generated from line 62, col 2
                write(u'''\t// Callback for ''')
                _v = VFFSL(SL,"timer.name",True) # u'$timer.name' on line 63, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.name')) # from line 63, col 18.
                write(u''' timer
\tvoid ''')
                _v = VFFSL(SL,"timer.name",True) # u'${timer.name}' on line 64, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.name}')) # from line 64, col 7.
                write(u'''Callback(const ros::TimerEvent& event);

''')
            write(u'''
''')
        write(u"""\t// these functions' business logic will be auto-generated:

\t// startUp() is used to configure timers, publishers, & service providers
\tvoid startUp();

\t// required for clean shutdown
\t~""")
        _v = VFFSL(SL,"component_name",True) # u'${component_name}' on line 75, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 75, col 3.
        write(u'''();

    private:

''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"timers",True)) > 0: # generated from line 79, col 2
            for timer in VFFSL(SL,"timers",True): # generated from line 80, col 2
                write(u'''\t// ROS Timer - ''')
                _v = VFFSL(SL,"timer.name",True) # u'$timer.name' on line 81, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.name')) # from line 81, col 17.
                write(u'''
\tros::Timer ''')
                _v = VFFSL(SL,"timer.name",True) # u'$timer.name' on line 82, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.name')) # from line 82, col 13.
                write(u''';

''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"subscribers",True)) > 0: # generated from line 87, col 2
            for sub in VFFSL(SL,"subscribers",True): # generated from line 88, col 2
                write(u'''\t// ROS Subscriber - ''')
                _v = VFFSL(SL,"sub.name",True) # u'$sub.name' on line 89, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.name')) # from line 89, col 22.
                write(u'''
\tros::Subscriber ''')
                _v = VFFSL(SL,"sub.name",True) # u'$sub.name' on line 90, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.name')) # from line 90, col 18.
                write(u'''; 

''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"publishers",True)) > 0: # generated from line 95, col 2
            for pub in VFFSL(SL,"publishers",True): # generated from line 96, col 2
                write(u'''\t// ROS Publisher - ''')
                _v = VFFSL(SL,"pub.name",True) # u'$pub.name' on line 97, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.name')) # from line 97, col 21.
                write(u'''
\tros::Publisher ''')
                _v = VFFSL(SL,"pub.name",True) # u'$pub.name' on line 98, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.name')) # from line 98, col 17.
                write(u''';

''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"provided_services",True)) > 0: # generated from line 103, col 2
            for provided in VFFSL(SL,"provided_services",True): # generated from line 104, col 2
                write(u'''\t// ROS Service Server - ''')
                _v = VFFSL(SL,"provided.name",True) # u'${provided.name}' on line 105, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${provided.name}')) # from line 105, col 26.
                write(u'''_server
\tros::ServiceServer ''')
                _v = VFFSL(SL,"provided.name",True) # u'${provided.name}' on line 106, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${provided.name}')) # from line 106, col 21.
                write(u'''_server;

''')
            write(u'''
''')
        if VFFSL(SL,"len",False)(VFFSL(SL,"required_services",True)) > 0: # generated from line 111, col 2
            for required in VFFSL(SL,"required_services",True): # generated from line 112, col 2
                write(u'''\t// ROS Service Client - ''')
                _v = VFFSL(SL,"required.name",True) # u'${required.name}' on line 113, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${required.name}')) # from line 113, col 26.
                write(u'''_client
\tros::ServiceClient ''')
                _v = VFFSL(SL,"required.name",True) # u'${required.name}' on line 114, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${required.name}')) # from line 114, col 21.
                write(u'''_client;

''')
        if VFFSL(SL,"user_private_variables",True) == "": # generated from line 118, col 2
            write(u'''        //# Start User Private Variables Marker

        //# End User Private Variables Marker
''')
        else: # generated from line 122, col 2
            write(u'''        //# Start User Private Variables Marker
''')
            _v = VFFSL(SL,"user_private_variables",True) # u'$user_private_variables' on line 124, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$user_private_variables')) # from line 124, col 1.
            write(u'''        //# End User Private Variables Marker
''')
        write(u'''};


#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_component_hpp= 'respond'

## END CLASS DEFINITION

if not hasattr(component_hpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(component_hpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(component_hpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=component_hpp()).run()


