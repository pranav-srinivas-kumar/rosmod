workspace orbiter_application;
package cluster_flight_application
{
    messages
    {
        msg TargetOrbit
        {
            int64 sat_id;
            float64 inclination;
            float64 longitudeAN;
            float64 argumentOfPeriapsis;
            float64 eccentricity;
            float64 semimajorAxis;
            float64 meanAnomaly;
        }
        msg SatState
        {
            string sat_id;
            float64 alt;
            float64 rpos_x;
            float64 rpos_y;
            float64 rpos_z;
            float64 rvel_x;
            float64 rvel_y;
            float64 rvel_z;
            float64 vrot_x;
            float64 vrot_y;
            float64 vrot_z;
        }
        msg GroundCommand
        {
            int64 com_id;
            string command;
            float64 200params;
        }
    }
    components
    {
        component TrajectoryPlanner_def
        {
            publisher<TargetOrbit> targetOrbitPub;
            subscriber<GroundCommand> satCommandSub;
            subscriber<SatState> satStateSub;
        }
    }
    nodes
    {
        node tmpNode
        {
            component<TrajectoryPlanner_def> TP_i;
        }
    }
}
package satellite_flight_application
{
    messages
    {
        msg GroundCommand
        {
            int64 com_id;
            string command;
            float64 200params;
        }
        msg SatState
        {
            string sat_id;
            float64 alt;
            float64 rpos_x;
            float64 rpos_y;
            float64 rpos_z;
            float64 rvel_x;
            float64 rvel_y;
            float64 rvel_z;
            float64 vrot_x;
            float64 vrot_y;
            float64 vrot_z;
        }
        msg TargetOrbit
        {
            int64 sat_id;
            float64 inclination;
            float64 longitudeAN;
            float64 argumentOfPeriapsis;
            float64 eccentricity;
            float64 semimajorAxis;
            float64 meanAnomaly;
        }
    }
    services
    {
        srv SatelliteState
        {
            response
            {
                satellite_flight_application atState;
                int64 retVal;
            }
        }
        srv ThrusterComm
        {
            request
            {
                int64 thruster_id;
                float64 amount;
                float64 duration;
            }
            response
            {
                int64 retVal;
            }
        }
    }
    components
    {
        component GroundInterface_def
        {
            publisher<GroundCommand> gndCommandPub;
            timer Timer0
            {
                period = 1.0s;
            }
        }
        component OrbitController_def
        {
            requires SatelliteState;
            requires ThrusterComm;
            publisher<SatState> satStatePub;
            subscriber<TargetOrbit> targetOrbitSub;
            timer Timer0
            {
                period = 1.0s;
            }
        }
        component SatelliteBusInterface_def
        {
            provides SatelliteState;
            provides ThrusterComm;
        }
    }
    nodes
    {
        node tmpNode2
        {
            component<GroundInterface_def> GI_i;
            component<OrbitController_def> OC_i;
            component<SatelliteBusInterface_def> SBI_i;
        }
    }
}
package wam_application
{
    messages
    {
        msg LRImageVector
        {
            string img_id;
            float64 100img;
        }
        msg HRImageVector
        {
            string img_id;
            float64 4000img;
        }
    }
    components
    {
        component HighResolutionImageProducer_def
        {
            publisher<HRImageVector> hrImage_pub;
            timer Timer0
            {
                period = 1.0s;
            }
        }
        component ImageProcessor_def
        {
            subscriber<HRImageVector> HRsub;
            subscriber<LRImageVector> LRsub;
        }
        component LowResolutionIMageProducer_def
        {
            publisher<LRImageVector> lrImage_pub;
            timer Timer0
            {
                period = 10.0s;
            }
        }
    }
    nodes
    {
        node tmpNode3
        {
            component<HighResolutionImageProducer_def> HRIP_i;
            component<ImageProcessor_def> IP_i;
            component<LowResolutionIMageProducer_def> LRIP_i;
        }
    }
}