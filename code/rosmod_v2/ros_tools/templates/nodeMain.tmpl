$hash_include "ros/ros.h"
$hash_include <cstdlib>
$hash_include <string.h>

// Required for boost::thread
$hash_include <boost/thread.hpp>

// Include all components this actor requires
#if $len($component_instances) > 0
#for $instance in $component_instances
$hash_include "$package_name/${instance.properties["component_reference"].properties["name"]}.hpp" 
#end for

#end if

void componentThread(Component* compPtr)
{
    compPtr->startUp();
    compPtr->processQueue();
}

int main(int argc, char **argv)
{
    std::string nodeName = "$node_name";

    for(int i = 0; i < argc; i++)
        if(!strcmp(argv[i], "-nodename")
            nodeName = argc[i+1];

    ros::init(argc, argv, nodeName.c_str());

    // Create Node Handle
    ros::NodeHandle n;

    // Create Component Objects
    #if $len($component_instances) > 0
    #for $instance in $component_instances
    $instance.properties["component_reference"].properties["name"] $instance.properties["name"](nodeName, argc, argv); 
    #end for

    #end if
    // Create Component Threads
    #if $len($component_instances) > 0
    #for $instance in $component_instances
    boost::thread ${instance.properties["name"]}_thread(componentThread, &${instance.properties["name"]});
    ROS_INFO("Node ${node_name} has started ${instance.properties["name"]}");
    #end for

    #end if    

    ROS_INFO_STREAM("NodeMain thread id = " << boost::this_thread::get_id());

    // Create Component Threads
    #if $len($component_instances) > 0
    #for $instance in $component_instances
    ${instance.properties["name"]}_thread.join();
    #end for

    #end if 

    return 0; 
}

