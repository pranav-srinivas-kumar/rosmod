$hash_include "$package_name/${component_name}.hpp"

#if $user_globals == ""
//# Start User Globals Marker

//# End User Globals Marker
#else
//# Start User Globals Marker
$user_globals//# End User Globals Marker
#end if

// -------------------------------------------------------
// BUSINESS LOGIC OF THESE FUNCTIONS SUPPLIED BY DEVELOPER
// -------------------------------------------------------

// Init Function
#if $init_business_logic == ""
//# Start Init Marker
void $component_name::Init(const ros::TimerEvent& event)
{
    // Initialize Component

    // Stop Init Timer
    initOneShotTimer.stop();
}
//# End Init Marker
#else
//# Start Init Marker
$init_business_logic//# End Init Marker
#end if

#if $len($subscribers) > 0
#for $sub in $subscribers
// OnOneData Subscription handler for ${sub.properties["name"]} subscriber
#if $sub.properties["business_logic"] == ""
//# Start ${sub.properties["name"]}_OnOneData Marker
void $component_name::${sub.properties["name"]}_OnOneData(const $sub.properties["message_reference"].parent.properties["name"]::${sub.properties["message_reference"].properties["name"]}::ConstPtr& received_data)
{
    // Business Logic for $sub.properties["name"] subscriber subscribing to topic $sub.properties["message_reference"].properties["name"] callback 

}
//# End ${sub.properties["name"]}_OnOneData Marker
#else
//# Start ${sub.properties["name"]}_OnOneData Marker
$sub.properties["business_logic"]//# End ${sub.properties["name"]}_OnOneData Marker
#end if
#end for

#end if
#if $len($provided_services) > 0
#for $server in $servers
// Component Service Callback
#if $server.properties["business_logic"] == ""
//# Start ${server.properties["service_reference"].properties["name"]}Callback Marker
bool $component_name::${server.properties["service_reference"].properties["name"]}Callback($server.properties["service_reference"].parent.properties["name"]::$server.properties["service_reference"].properties["name"]::Request  &req,
    $server.properties["service_reference"].parent.properties["name"]::$server.properties["service_reference"].properties["name"]::Response &res)
{
    // Business Logic for $server.properties["name"] Server providing $server.properties["service_reference"].properties["name"] Service

    return true;
}
//# End ${server.properties["service_reference"].properties["name"]}Callback Marker
#else
//# Start ${server.properties["service_reference"].properties["name"]}Callback Marker
$server.properties["business_logic"]//# End ${server.properties["service_reference"].properties["name"]}Callback Marker
#end if
#end for

#end if
#if $len($timers) > 0
#for $timer in $timers
// Callback for $timer.properties["name"] timer
#if $timer.properties["business_logic"] == ""
//# Start ${timer.properties["name"]}Callback Marker
void $component_name::${timer.properties["name"]}Callback(const ros::TimerEvent& event)
{
    // Business Logic for $timer.properties["name"] 

}
//# End ${timer.properties["name"]}Callback Marker
#else
//# Start ${timer.properties["name"]}Callback Marker
$timer.properties["business_logic"]//# End ${timer.properties["name"]}Callback Marker
#end if
#end for

#end if
// ---------------------------------------------
// EVERYTHING BELOW HERE IS COMPLETELY GENERATED
// ---------------------------------------------

// Destructor - required for clean shutdown when process is killed
$component_name::~${component_name}()
{
#if $len($timers) > 0
#for $timer in $timers
    ${timer.properties["name"]}.stop();
#end for
#end if
#if $len($publishers) > 0
#for $pub in $publishers
    ${pub.properties["name"]}.shutdown();
#end for
#end if
#if $len($subscribers) > 0
#for $sub in $subscribers
    ${sub.properties["name"]}.shutdown();
#end for
#end if
#if $len($provided_services) > 0
#for $provided in $provided_services
    ${provided}_server.shutdown();
#end for
#end if
#if $len($required_services) > 0
#for $required in $required_services
    ${required[1]}_client.shutdown();
#end for
#end if
#if $destructor == ""
//# Start Destructor Marker

//# End Destructor Marker
#else
//# Start Destructor Marker
$destructor//# End Destructor Marker
#end if
}

void $component_name::startUp()
{
    ros::NodeHandle nh;

    #if $len($subscribers) > 0 
    // Configure all subscribers associated with this component
    #for $sub in $subscribers
    // subscriber: $sub.properties["name"]
    ros::SubscribeOptions ${sub.properties["name"]}_options;
    ${sub.properties["name"]}_options = 
	ros::SubscribeOptions::create<$sub.properties["message_reference"].parent.properties["name"]::${sub.properties["message_reference"].properties["name"]}>
	    ("${sub.properties["message_reference"].properties["name"]}",
	     1000,
	     boost::bind(&$component_name::${sub.properties["name"]}_OnOneData, this, _1),
	     ros::VoidPtr(),
             &this->compQueue);
    this->${sub.properties["name"]} = nh.subscribe(${sub.properties["name"]}_options);
    #end for

    #end if		
    #if $len($publishers) > 0
    // Configure all publishers associated with this component
    #for $pub in $publishers
    // publisher: $pub.properties["name"]
    this->${pub.properties["name"]} = nh.advertise<$pub.properties["message_reference"].parent.properties["name"]::${pub.properties["message_reference"].properties["name"]}>
	("${pub.properties["message_reference"].properties["name"]}", 1000);	
    #end for

    #end if
    #if $len($provided_services)
    // Configure all provided services associated with this component
    #for $server in $servers
    // server: $server.properties["name"]
    ros::AdvertiseServiceOptions ${server.properties["service_reference"].properties["name"]}_server_options;
    ${server.properties["service_reference"].properties["name"]}_server_options = 
	ros::AdvertiseServiceOptions::create<$server.properties["service_reference"].parent.properties["name"]::$server.properties["service_reference"].properties["name"]>
	    ("$server.properties["service_reference"].properties["name"]",
             boost::bind(&$component_name::${server.properties["service_reference"].properties["name"]}Callback, this, _1, _2),
	     ros::VoidPtr(),
             &this->compQueue);
    this->${server.properties["service_reference"].properties["name"]}_server = nh.advertiseService(${server.properties["service_reference"].properties["name"]}_server_options);
    #end for
 
    #end if
    #if $len($required_services) > 0
    // Configure all required services associated with this component
    #for $required in $required_services
    // client: ${required[1]}_client
    this->${required[1]}_client = nh.serviceClient<$required[0]::$required[1]>
	("$required[1]"); 
    #end for

    #end if
    // Create Init Timer
    ros::TimerOptions timer_options;
    timer_options = 
	ros::TimerOptions
	    (ros::Duration(-1),
	     boost::bind(&$component_name::Init, this, _1),
	     &this->compQueue,
             true);
    this->initOneShotTimer = nh.createTimer(timer_options);  
  
    #if $len($timers)
    // Create all component timers
    #for $timer in $timers
    // timer: timer.properties["name"]
    timer_options = 
	ros::TimerOptions
	     #if $timer.properties["period"] == "0.0"
	     (ros::Duration(-1),
             #else
             (ros::Duration($timer.properties["period"]),
             #end if
	     boost::bind(&$component_name::${timer.properties["name"]}Callback, this, _1),
             #if $timer.properties["period"] == "0.0"
	     &this->compQueue, true);
             #else
	     &this->compQueue);
	     #end if 
    this->$(timer.properties["name"]) = nh.createTimer(timer_options);
    #end for

    #end if
}
