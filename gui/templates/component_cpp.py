#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1456002507.330065
__CHEETAH_genTimestamp__ = 'Sat Feb 20 15:08:27 2016'
__CHEETAH_src__ = '/home/jeb/Repositories/rosmod/gui/templates/component_cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Feb 16 11:46:40 2016'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class component_cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(component_cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _v = VFSL([locals()]+SL+[globals(), builtin],"hash_include",True) # u'$hash_include' on line 1, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 1, col 1.
        write(u''' "''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"package_name",True) # u'$package_name' on line 1, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'$package_name')) # from line 1, col 16.
        write(u'''/''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'${component_name}' on line 1, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 1, col 30.
        write(u'''.hpp"

''')
        if VFSL([locals()]+SL+[globals(), builtin],"component_type",True) == "KSP": # generated from line 3, col 1
            write(u'''KRPCI krpci_client;
''')
        if VFSL([locals()]+SL+[globals(), builtin],"component_type",True) == "SUMO": # generated from line 6, col 1
            write(u'''SUMO_CLIENT sumo_client;
''')
        if VFSL([locals()]+SL+[globals(), builtin],"user_globals",True) == "": # generated from line 9, col 1
            write(u'''//# Start User Globals Marker
//# End User Globals Marker
''')
        else: # generated from line 12, col 1
            write(u'''//# Start User Globals Marker
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"user_globals",True) # u'$user_globals' on line 14, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$user_globals')) # from line 14, col 1.
            write(u'''//# End User Globals Marker
''')
        write(u'''
// Initialization Function
''')
        if VFSL([locals()]+SL+[globals(), builtin],"init_business_logic",True) == "": # generated from line 18, col 1
            write(u'''//# Start Init Marker
void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 20, col 6
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 20, col 6.
            write(u'''::init_timer_operation(const NAMESPACE::TimerEvent& event)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 23, col 52
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 23, col 52.
            write(u'''::init_timer_operation");
#endif
  // Initialize Here
''')
            if VFSL([locals()]+SL+[globals(), builtin],"component_type",True) == "SUMO": # generated from line 26, col 1
                write(u'''  std::string sumo_host;
  int sumo_port;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--sumo_host"))
\t{
\t  sumo_host = node_argv[i+1];
\t}
      if (!strcmp(node_argv[i], "--sumo_port"))
\t{
\t  sumo_port = atoi(node_argv[i+1]);
\t}
    }
  sumo_client.create_connection(sumo_port, sumo_host);
''')
            if VFSL([locals()]+SL+[globals(), builtin],"component_type",True) == "KSP": # generated from line 42, col 1
                write(u'''  std::string ksp_host;
  int ksp_port;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--ksp_host"))
\t{
\t  ksp_host = node_argv[i+1];
\t}
      if (!strcmp(node_argv[i], "--ksp_port"))
\t{
\t  ksp_port = atoi(node_argv[i+1]);
\t}
    }
  krpci_client.SetPort(ksp_port);
  krpci_client.SetIP(ksp_host);
''')
            if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 59, col 1
                write(u'''  srand (time(NULL));
  double tg_duration = -1;
  std::string fName;
  bool enable_oob = false;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--tg_time"))
\t{
\t  tg_duration = atof(node_argv[i+1]);
\t}
      if (!strcmp(node_argv[i], "--enable_oob"))
\t{
\t  enable_oob = true;
\t}
    }
''')
                if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"subscribers",True)) > 0: # generated from line 75, col 1
                    write(u'''  uint64_t capacityBits = 0;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--buffer_capacity_bits"))
\t{
\t  capacityBits = atoi(node_argv[i+1]);
\t}
      if (!strcmp(node_argv[i], "--buffer_capacity_bytes"))
\t{
\t  capacityBits = atoi(node_argv[i+1]) * 8;
\t}
    }
''')
                    for sub in VFSL([locals()]+SL+[globals(), builtin],"subscribers",True): # generated from line 88, col 1
                        write(u'''  if (config.profileMap.find("''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 89, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 89, col 31.
                        write(u'''") != config.profileMap.end())
    {
      ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 91, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 91, col 7.
                        write(u'''_recv_mw.init(node_argc,
\t\t\t\t\t     node_argv,
\t\t\t\t\t     config.profileMap["''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 93, col 30
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 93, col 30.
                        write(u'''"],
\t\t\t\t\t     capacityBits,
\t\t\t\t\t     enable_oob);
      if ( tg_duration < 0 )
\t''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 97, col 2
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 97, col 2.
                        write(u'''_recv_mw.set_duration(''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 97, col 49
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 97, col 49.
                        write(u'''_recv_mw.profile.period);
      else
\t''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 99, col 2
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 99, col 2.
                        write(u'''_recv_mw.set_duration(tg_duration);
      fName = "/var/log/" + config.nodeName + "." +
\tconfig.compName + ".''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 101, col 22
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 101, col 22.
                        write(u'''.network.csv";
      ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 102, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 102, col 7.
                        write(u'''_recv_mw.set_output_filename(fName);
      ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 103, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 103, col 7.
                        write(u'''_recv_mw.set_recv_done_callback(boost::bind(&''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 103, col 77
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 103, col 77.
                        write(u'''::mw_recv_done_operation, this, &''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 103, col 125
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 103, col 125.
                        write(u'''_recv_mw));
      ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 104, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 104, col 7.
                        write(u'''_id = 0;
    }
  if (config.portSenderMap.find("''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 106, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 106, col 34.
                        write(u'''") != config.portSenderMap.end())
    {
      for (auto it=config.portSenderMap["''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 108, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 108, col 42.
                        write(u'''"].begin();
\t   it != config.portSenderMap["''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"$sub.properties['name']" on line 109, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u"$sub.properties['name']")) # from line 109, col 33.
                        write(u'''"].end(); ++it)
\t{
\t  ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 111, col 4
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 111, col 4.
                        write(u'''_recv_mw.add_sender( it->first, it->second );
\t}
    }
  
''')
                if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"publishers",True)) > 0: # generated from line 117, col 1
                    write(u'''  max_data_length = 8192;
  tg_misbehave = false;
  for (int i=0; i<node_argc; i++)
    {
      if (!strcmp(node_argv[i], "--max_data_length_bytes"))
\t{
\t  max_data_length = atoi(node_argv[i+1]);
\t}
      if (!strcmp(node_argv[i], "--max_data_length_bits"))
\t{
\t  max_data_length = atoi(node_argv[i+1]) / 8;
\t}
      if (!strcmp(node_argv[i], "--tg_misbehave"))
\t{
\t  tg_misbehave = true;
\t}
    }
  NAMESPACE::NodeHandle nh;
  NAMESPACE::TimerOptions timer_options;
''')
                    for pub in VFSL([locals()]+SL+[globals(), builtin],"publishers",True): # generated from line 137, col 1
                        write(u'''  if (config.profileMap.find("''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"$pub.properties['name']" on line 138, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u"$pub.properties['name']")) # from line 138, col 31.
                        write(u'''") != config.profileMap.end())
    {
      ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 140, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 140, col 7.
                        write(u'''_send_mw.init(node_argc,
\t\t\t\t\t     node_argv,
\t\t\t\t\t     config.profileMap["''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"$pub.properties['name']" on line 142, col 30
                        if _v is not None: write(_filter(_v, rawExpr=u"$pub.properties['name']")) # from line 142, col 30.
                        write(u'''"],
\t\t\t\t\t     config.uuidMap["''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"$pub.properties['name']" on line 143, col 27
                        if _v is not None: write(_filter(_v, rawExpr=u"$pub.properties['name']")) # from line 143, col 27.
                        write(u'''"],
\t\t\t\t\t     enable_oob);
      if ( tg_duration < 0 )
\t''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 146, col 2
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 146, col 2.
                        write(u'''_send_mw.set_duration(''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 146, col 49
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 146, col 49.
                        write(u'''_send_mw.profile.period);
      else
\t''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 148, col 2
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 148, col 2.
                        write(u'''_send_mw.set_duration(tg_duration);
      fName = config.nodeName + "." + config.compName + ".''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 149, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 149, col 59.
                        write(u'''.network.csv";
      ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 150, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 150, col 7.
                        write(u'''_send_mw.set_output_filename(fName);

#ifdef USE_ROSMOD    
      rosmod::ROSMOD_Callback_Options callback_options;
      callback_options.alias = "init_timer_operation";
      callback_options.priority = 99;
      callback_options.deadline.sec = 1;
      callback_options.deadline.nsec = 0;
#endif
      timer_options = 
\tNAMESPACE::TimerOptions
\t(ros::Duration(-1),
\t boost::bind(&''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 162, col 16
                        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 162, col 16.
                        write(u'''::''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 162, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 162, col 33.
                        write(u'''_timer_operation, this, _1),
\t &this->comp_queue,
#ifdef USE_ROSMOD     
\t callback_options,
#endif 
\t true);
      ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 168, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 168, col 7.
                        write(u'''_timer = nh.createTimer(timer_options);
    }
''')
            write(u'''  // Stop Init Timer
  init_timer.stop();
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 176, col 51
            if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 176, col 51.
            write(u'''::init_timer_operation");
#endif  
}
//# End Init Marker
''')
        else: # generated from line 180, col 1
            write(u'''//# Start Init Marker
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"init_business_logic",True) # u'$init_business_logic' on line 182, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$init_business_logic')) # from line 182, col 1.
            write(u'''//# End Init Marker
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 185, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"publishers",True)) > 0: # generated from line 186, col 1
                for pub in VFSL([locals()]+SL+[globals(), builtin],"publishers",True): # generated from line 187, col 1
                    write(u'''void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 188, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 188, col 6.
                    write(u'''::''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 188, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 188, col 23.
                    write(u'''_timer_operation(const NAMESPACE::TimerEvent& event)
{
  ''')
                    _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$pub.properties["message_reference"].parent.properties["name"]' on line 190, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["message_reference"].parent.properties["name"]')) # from line 190, col 3.
                    write(u'''::''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 190, col 67
                    if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 190, col 67.
                    write(u''' msg;
  msg.uuid = ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 191, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 191, col 14.
                    write(u'''_send_mw.get_uuid();
  msg.bytes.resize(max_data_length,0);
  double timerDelay = 0;
  try
    {
      timerDelay =
\t''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 197, col 2
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 197, col 2.
                    write(u'''_send_mw.send<''')
                    _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$pub.properties["message_reference"].parent.properties["name"]' on line 197, col 41
                    if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["message_reference"].parent.properties["name"]')) # from line 197, col 41.
                    write(u'''::''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 197, col 105
                    if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 197, col 105.
                    write(u'''>(''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"$pub.properties['name']" on line 197, col 164
                    if _v is not None: write(_filter(_v, rawExpr=u"$pub.properties['name']")) # from line 197, col 164.
                    write(u''', msg);
    }
  catch ( Network::Exceeded_Production_Profile& ex )
    {
      logger->log("DEBUG","Prevented from sending on the network!");
    }

  if ( ros::Time::now() >= ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 204, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 204, col 28.
                    write(u'''_send_mw.get_end_time() )
    {
      logger->log("DEBUG","writing output\\n");
      ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 207, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 207, col 7.
                    write(u'''_send_mw.record();
    }
  else
    {
      if (tg_misbehave)
\ttimerDelay -= 0.1;
#ifdef USE_ROSMOD    
      rosmod::ROSMOD_Callback_Options callback_options;
      callback_options.alias = "init_timer_operation";
      callback_options.priority = 99;
      callback_options.deadline.sec = 1;
      callback_options.deadline.nsec = 0;
#endif
      NAMESPACE::TimerOptions timer_options;
      timer_options = 
\tNAMESPACE::TimerOptions
\t(ros::Duration(timerDelay),
\t boost::bind(&''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 224, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 224, col 16.
                    write(u'''::''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 224, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 224, col 33.
                    write(u'''_timer_operation, this, _1),
\t &this->comp_queue,
#ifdef USE_ROSMOD     
\t callback_options,
#endif 
\t true);
      NAMESPACE::NodeHandle nh;
      ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 231, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 231, col 7.
                    write(u'''_timer = nh.createTimer(timer_options);
    }
}
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"subscribers",True)) > 0: # generated from line 238, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 239, col 1
                write(u'''void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 240, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 240, col 6.
                write(u'''::mw_recv_done_operation(Network::receiver* receiver_mw)
{
  logger->log("DEBUG","Writing middleware log.");
  logger->log("DEBUG","Max middleware buffer: %lu bits", receiver_mw->buffer.maxBits());
  receiver_mw->record();
}
''')
            write(u'''
''')
            for sub in VFSL([locals()]+SL+[globals(), builtin],"subscribers",True): # generated from line 248, col 1
                write(u'''// Subscriber Operation - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 249, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 249, col 27.
                write(u'''
''')
                if VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["business_logic"] == "": # generated from line 250, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 251, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 251, col 11.
                    write(u'''_operation Marker
void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 252, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 252, col 6.
                    write(u'''::''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 252, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 252, col 23.
                    write(u'''_operation(const ''')
                    _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 252, col 65
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 252, col 65.
                    write(u'''::''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 252, col 129
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 252, col 129.
                    write(u'''::ConstPtr& received_data)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 255, col 52
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 255, col 52.
                    write(u'''::''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 255, col 69
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 255, col 69.
                    write(u'''_operation");
#endif
  // Business Logic for ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 257, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 257, col 25.
                    write(u'''_operation

''')
                    if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 259, col 1
                        write(u'''  uint64_t uuid = received_data->uuid;
  uint64_t msgBytes = ros::serialization::Serializer<''')
                        _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 261, col 54
                        if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 261, col 54.
                        write(u'''::''')
                        _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 261, col 118
                        if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 261, col 118.
                        write(u'''>::serializedLength(*received_data);
  ros::Time now = ros::Time::now();
  ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 263, col 3
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 263, col 3.
                        write(u'''_recv_mw.update_sender_stream(uuid, now, msgBytes * 8);
  Network::Message new_msg;
  new_msg.Bytes(msgBytes);
  new_msg.Id(''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 266, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 266, col 14.
                        write(u'''_id++);
  new_msg.TimeStamp();
  ''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 268, col 3
                        if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 268, col 3.
                        write(u'''_recv_mw.buffer.send(new_msg, msgBytes * 8);
''')
                    write(u'''  
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 272, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 272, col 51.
                    write(u'''::''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 272, col 68
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 272, col 68.
                    write(u'''_operation");
#endif
}
//# End ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 275, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 275, col 9.
                    write(u'''_operation Marker
''')
                else: # generated from line 276, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 277, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 277, col 11.
                    write(u'''_operation Marker
''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["business_logic"] # u'$sub.properties["business_logic"]' on line 278, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["business_logic"]')) # from line 278, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 278, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 278, col 42.
                    write(u'''_operation Marker
''')
            write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"provided_services",True)) > 0: # generated from line 283, col 1
            for server in VFSL([locals()]+SL+[globals(), builtin],"servers",True): # generated from line 284, col 1
                write(u'''// Server Operation - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 285, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 285, col 23.
                write(u'''
''')
                if VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["business_logic"] == "": # generated from line 286, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 287, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 287, col 11.
                    write(u'''_operation Marker
bool ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 288, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 288, col 6.
                    write(u'''::''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 288, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 288, col 23.
                    write(u'''_operation(''')
                    _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 288, col 94
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 288, col 94.
                    write(u'''::''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 288, col 161
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 288, col 161.
                    write(u'''::Request  &req,
  ''')
                    _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 289, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 289, col 3.
                    write(u'''::''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 289, col 70
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 289, col 70.
                    write(u'''::Response &res)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 292, col 52
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 292, col 52.
                    write(u'''::''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 292, col 69
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 292, col 69.
                    write(u'''_operation");
#endif
  // Business Logic for ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 294, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 294, col 25.
                    write(u'''_operation

#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 297, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 297, col 51.
                    write(u'''::''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 297, col 68
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 297, col 68.
                    write(u'''_operation");
#endif
  return true;
}
//# End ''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 301, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 301, col 9.
                    write(u'''_operation Marker
''')
                else: # generated from line 302, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 303, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 303, col 11.
                    write(u'''_operation Marker
''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["business_logic"] # u'$server.properties["business_logic"]' on line 304, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["business_logic"]')) # from line 304, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 304, col 45
                    if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 304, col 45.
                    write(u'''_operation Marker
''')
            write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"timers",True)) > 0: # generated from line 309, col 1
            for timer in VFSL([locals()]+SL+[globals(), builtin],"timers",True): # generated from line 310, col 1
                write(u'''// Timer Callback - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 311, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 311, col 21.
                write(u'''
''')
                if VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["business_logic"] == "": # generated from line 312, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 313, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 313, col 11.
                    write(u'''_operation Marker
void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 314, col 6
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 314, col 6.
                    write(u'''::''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 314, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 314, col 23.
                    write(u'''_operation(const NAMESPACE::TimerEvent& event)
{
#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Entering ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 317, col 52
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 317, col 52.
                    write(u'''::''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 317, col 69
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 317, col 69.
                    write(u'''_operation");
#endif
  // Business Logic for ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 319, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 319, col 25.
                    write(u'''_operation

#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->log("DEBUG", "Exiting ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 322, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 322, col 51.
                    write(u'''::''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 322, col 68
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 322, col 68.
                    write(u'''_operation");
#endif
}
//# End ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 325, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 325, col 9.
                    write(u'''_operation Marker
''')
                else: # generated from line 326, col 1
                    write(u'''//# Start ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 327, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 327, col 11.
                    write(u'''_operation Marker
''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["business_logic"] # u'$timer.properties["business_logic"]' on line 328, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["business_logic"]')) # from line 328, col 1.
                    write(u'''//# End ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 328, col 44
                    if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 328, col 44.
                    write(u'''_operation Marker
''')
            write(u'''
''')
        write(u'''
// Destructor - Cleanup Ports & Timers
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 335, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 335, col 1.
        write(u'''::~''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'${component_name}' on line 335, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 335, col 19.
        write(u'''()
{
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"timers",True)) > 0: # generated from line 337, col 1
            for timer in VFSL([locals()]+SL+[globals(), builtin],"timers",True): # generated from line 338, col 1
                write(u'''  ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 339, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 339, col 3.
                write(u'''.stop();
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"publishers",True)) > 0: # generated from line 342, col 1
            for pub in VFSL([locals()]+SL+[globals(), builtin],"publishers",True): # generated from line 343, col 1
                write(u'''  ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["name"] # u'${pub.properties["name"]}' on line 344, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["name"]}')) # from line 344, col 3.
                write(u'''.shutdown();
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"subscribers",True)) > 0: # generated from line 347, col 1
            for sub in VFSL([locals()]+SL+[globals(), builtin],"subscribers",True): # generated from line 348, col 1
                write(u'''  ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 349, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 349, col 3.
                write(u'''.shutdown();
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"provided_services",True)) > 0: # generated from line 352, col 1
            for server in VFSL([locals()]+SL+[globals(), builtin],"servers",True): # generated from line 353, col 1
                write(u'''  ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 354, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 354, col 3.
                write(u'''.shutdown();
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"required_services",True)) > 0: # generated from line 357, col 1
            for client in VFSL([locals()]+SL+[globals(), builtin],"clients",True): # generated from line 358, col 1
                write(u'''  ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["name"] # u'${client.properties["name"]}' on line 359, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${client.properties["name"]}')) # from line 359, col 3.
                write(u'''.shutdown();
''')
        if VFSL([locals()]+SL+[globals(), builtin],"destructor",True) == "": # generated from line 362, col 1
            write(u'''  //# Start Destructor Marker
  //# End Destructor Marker
''')
        else: # generated from line 365, col 1
            write(u'''  //# Start Destructor Marker
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"destructor",True) # u'$destructor' on line 367, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$destructor')) # from line 367, col 1.
            write(u'''  //# End Destructor Marker
''')
        write(u'''}

// Startup - Setup Component Ports & Timers
void ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 372, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 372, col 6.
        write(u'''::startUp()
{
  NAMESPACE::NodeHandle nh;
  std::string advertiseName;

  // Identify the pwd of Node Executable
  std::string s = node_argv[0];
  std::string exec_path = s;
  std::string delimiter = "/";
  std::string exec, pwd;
  size_t pos = 0;
  while ((pos = s.find(delimiter)) != std::string::npos) {
    exec = s.substr(0, pos);
    s.erase(0, pos + delimiter.length());
  }
  exec = s.substr(0, pos);
  pwd = exec_path.erase(exec_path.find(exec), exec.length());
  std::string log_file_path = pwd + config.nodeName + "." + config.compName + ".log"; 

  logger->create_file("/var/log/" + config.nodeName + "." + config.compName + ".log");
  logger->set_is_periodic(config.is_periodic_logging);
  logger->set_max_log_unit(config.periodic_log_unit);

#ifdef USE_ROSMOD
  comp_queue.ROSMOD_LOGGER->create_file("/var/log/ROSMOD_DEBUG." + config.nodeName + "." + config.compName + ".log");
  comp_queue.ROSMOD_LOGGER->set_is_periodic(config.is_periodic_logging);
  comp_queue.ROSMOD_LOGGER->set_max_log_unit(config.periodic_log_unit);
#endif    
  
#ifdef USE_ROSMOD 
  this->comp_queue.scheduling_scheme = config.schedulingScheme;
  rosmod::ROSMOD_Callback_Options callback_options;
#endif  
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"publishers",True)) > 0: # generated from line 405, col 1
            write(u'''  // Configure all publishers associated with this component
''')
            for pub in VFSL([locals()]+SL+[globals(), builtin],"publishers",True): # generated from line 407, col 1
                write(u'''  // Component Publisher - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 408, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 408, col 28.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 409, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 409, col 20.
                write(u'''";
  if (config.portGroupMap.find("''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 410, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 410, col 33.
                write(u'''") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 411, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 411, col 49.
                write(u'''"];
  this->''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["name"] # u'${pub.properties["name"]}' on line 412, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["name"]}')) # from line 412, col 9.
                write(u''' = nh.advertise<''')
                _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$pub.properties["message_reference"].parent.properties["name"]' on line 412, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["message_reference"].parent.properties["name"]')) # from line 412, col 50.
                write(u'''::''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${pub.properties["message_reference"].properties["name"]}' on line 412, col 114
                if _v is not None: write(_filter(_v, rawExpr=u'${pub.properties["message_reference"].properties["name"]}')) # from line 412, col 114.
                write(u'''>(advertiseName.c_str(), 1000);
''')
            write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"provided_services",True)): # generated from line 416, col 1
            write(u'''  // Configure all provided services associated with this component
''')
            for server in VFSL([locals()]+SL+[globals(), builtin],"servers",True): # generated from line 418, col 1
                write(u'''#ifdef USE_ROSMOD  
  callback_options.alias = "''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 420, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 420, col 29.
                write(u'''_operation";
  callback_options.priority = ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["priority"] # u'$server.properties["priority"]' on line 421, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["priority"]')) # from line 421, col 31.
                write(u''';
  callback_options.deadline.sec =''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"int",False)(str(server.properties["deadline"]).split('.')[0]) # u'${int(str(server.properties["deadline"]).split(\'.\')[0])}' on line 422, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${int(str(server.properties["deadline"]).split(\'.\')[0])}')) # from line 422, col 34.
                write(u''';
  callback_options.deadline.nsec = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"int",False)(float('0.' + (str(server.properties["deadline"]).split('.')[1]))*1000000000) # u'${int(float(\'0.\' + (str(server.properties["deadline"]).split(\'.\')[1]))*1000000000)}' on line 423, col 36
                if _v is not None: write(_filter(_v, rawExpr=u'${int(float(\'0.\' + (str(server.properties["deadline"]).split(\'.\')[1]))*1000000000)}')) # from line 423, col 36.
                write(u''';
#endif    
  // Component Server - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 425, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 425, col 25.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 426, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 426, col 20.
                write(u'''";
  if (config.portGroupMap.find("''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 427, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 427, col 33.
                write(u'''") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 428, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 428, col 49.
                write(u'''"];
  NAMESPACE::AdvertiseServiceOptions ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 429, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 429, col 38.
                write(u'''_server_options;
  ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 430, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 430, col 3.
                write(u'''_server_options = NAMESPACE::AdvertiseServiceOptions::create<''')
                _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 430, col 92
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 430, col 92.
                write(u'''::''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 430, col 159
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 430, col 159.
                write(u'''>
      (advertiseName.c_str(),
       boost::bind(&''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 432, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 432, col 21.
                write(u'''::''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 432, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 432, col 38.
                write(u'''_operation, this, _1, _2),
       NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD       
       &this->comp_queue,
       callback_options);
#else
       &this->comp_queue);
#endif
  this->''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 440, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 440, col 9.
                write(u''' = nh.advertiseService(''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 440, col 60
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 440, col 60.
                write(u'''_server_options);
''')
        write(u'''
  if (config.num_comps_to_sync > 1 )
    {
      // Synchronize components now that all publishers and servers have been initialized
      this->comp_sync_pub = nh.advertise<std_msgs::Bool>("component_synchronization", 1000);
  
#ifdef USE_ROSMOD  
      rosmod::SubscribeOptions comp_sync_sub_options;
      rosmod::ROSMOD_Callback_Options sync_callback_options;
#else
      ros::SubscribeOptions comp_sync_sub_options;
#endif
      ros::Duration(config.comp_sync_timeout/2.0).sleep();
      comp_sync_sub_options = NAMESPACE::SubscribeOptions::create<std_msgs::Bool>
\t("component_synchronization",
\t 1000,
\t boost::bind(&''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 459, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 459, col 16.
        write(u'''::component_sync_operation, this, _1),
\t NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD     
\t &this->comp_queue,
\t sync_callback_options);
#else
         &this->comp_queue);
#endif
      this->comp_sync_sub = nh.subscribe(comp_sync_sub_options);

      ros::Time now = ros::Time::now();
      while ( this->comp_sync_sub.getNumPublishers() < this->config.num_comps_to_sync &&
\t      (ros::Time::now() - now) < ros::Duration(config.comp_sync_timeout))
\tros::Duration(0.1).sleep();
      ros::Duration(config.comp_sync_timeout/2.0).sleep();
      this->comp_sync_sub.shutdown();  
      this->comp_sync_pub.shutdown();
    }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"subscribers",True)) > 0: # generated from line 478, col 1
            write(u'''  // Configure all subscribers associated with this component
''')
            for sub in VFSL([locals()]+SL+[globals(), builtin],"subscribers",True): # generated from line 480, col 1
                write(u'''#ifdef USE_ROSMOD 
  callback_options.alias = "''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 482, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 482, col 29.
                write(u'''_operation";
  callback_options.priority = ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["priority"] # u'$sub.properties["priority"]' on line 483, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["priority"]')) # from line 483, col 31.
                write(u''';
  callback_options.deadline.sec = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"int",False)(str(sub.properties["deadline"]).split('.')[0]) # u'${int(str(sub.properties["deadline"]).split(\'.\')[0])}' on line 484, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'${int(str(sub.properties["deadline"]).split(\'.\')[0])}')) # from line 484, col 35.
                write(u''';
  callback_options.deadline.nsec = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"int",False)(float('0.' + (str(sub.properties["deadline"]).split('.')[1]))*1000000000) # u'${int(float(\'0.\' + (str(sub.properties["deadline"]).split(\'.\')[1]))*1000000000)}' on line 485, col 36
                if _v is not None: write(_filter(_v, rawExpr=u'${int(float(\'0.\' + (str(sub.properties["deadline"]).split(\'.\')[1]))*1000000000)}')) # from line 485, col 36.
                write(u''';
#endif  
  // Component Subscriber - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 487, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 487, col 29.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 488, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 488, col 20.
                write(u'''";
  if (config.portGroupMap.find("''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 489, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 489, col 33.
                write(u'''") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 490, col 49
                if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 490, col 49.
                write(u'''"];
  NAMESPACE::SubscribeOptions ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 491, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 491, col 31.
                write(u'''_options;
  ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 492, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 492, col 3.
                write(u'''_options = NAMESPACE::SubscribeOptions::create<''')
                _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 492, col 75
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 492, col 75.
                write(u'''::''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 492, col 139
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 492, col 139.
                write(u'''>
      (advertiseName.c_str(),
       1000,
       boost::bind(&''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 495, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 495, col 21.
                write(u'''::''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 495, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 495, col 38.
                write(u'''_operation, this, _1),
       NAMESPACE::VoidPtr(),
#ifdef USE_ROSMOD
       &this->comp_queue,
       callback_options);
#else
       &this->comp_queue);
#endif 
  this->''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 503, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 503, col 9.
                write(u''' = nh.subscribe(''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 503, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 503, col 50.
                write(u'''_options);
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"required_services",True)) > 0: # generated from line 507, col 1
            write(u'''  // Configure all required services associated with this component
''')
            for client in VFSL([locals()]+SL+[globals(), builtin],"clients",True): # generated from line 509, col 1
                write(u'''  // Component Client - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 510, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 510, col 25.
                write(u'''
  advertiseName = "''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$client.properties["service_reference"].properties["name"]' on line 511, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].properties["name"]')) # from line 511, col 20.
                write(u'''";
  if (config.portGroupMap.find("''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 512, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 512, col 33.
                write(u'''") != config.portGroupMap.end())
    advertiseName += "_" + config.portGroupMap["''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 513, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 513, col 49.
                write(u'''"];
  this->''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["name"] # u'${client.properties["name"]}' on line 514, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${client.properties["name"]}')) # from line 514, col 9.
                write(u''' = nh.serviceClient<''')
                _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$client.properties["service_reference"].parent.properties["name"]' on line 514, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].parent.properties["name"]')) # from line 514, col 57.
                write(u'''::''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$client.properties["service_reference"].properties["name"]' on line 514, col 124
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["service_reference"].properties["name"]')) # from line 514, col 124.
                write(u'''>(advertiseName.c_str(), true); 
''')
            write(u'''
''')
        write(u'''  // Init Timer
#ifdef USE_ROSMOD    
  callback_options.alias = "init_timer_operation";
  callback_options.priority = 99;
  callback_options.deadline.sec = 1;
  callback_options.deadline.nsec = 0;
#endif
  NAMESPACE::TimerOptions timer_options;
  timer_options = 
    NAMESPACE::TimerOptions
    (ros::Duration(-1),
     boost::bind(&''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 529, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 529, col 19.
        write(u'''::init_timer_operation, this, _1),
     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif     
     true,
     false); 
  this->init_timer = nh.createTimer(timer_options);
  this->init_timer.stop();
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"timers",True)): # generated from line 538, col 1
            for timer in VFSL([locals()]+SL+[globals(), builtin],"timers",True): # generated from line 539, col 1
                write(u'''#ifdef USE_ROSMOD   
  callback_options.alias = "''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 541, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 541, col 29.
                write(u'''_operation";
  callback_options.priority = ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["priority"] # u'$timer.properties["priority"]' on line 542, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["priority"]')) # from line 542, col 31.
                write(u''';
  callback_options.deadline.sec = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"int",False)(str(timer.properties["deadline"]).split('.')[0]) # u'${int(str(timer.properties["deadline"]).split(\'.\')[0])}' on line 543, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'${int(str(timer.properties["deadline"]).split(\'.\')[0])}')) # from line 543, col 35.
                write(u''';
  callback_options.deadline.nsec = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"int",False)(float('0.' + (str(timer.properties["deadline"]).split('.')[1]))*1000000000) # u'${int(float(\'0.\' + (str(timer.properties["deadline"]).split(\'.\')[1]))*1000000000)}' on line 544, col 36
                if _v is not None: write(_filter(_v, rawExpr=u'${int(float(\'0.\' + (str(timer.properties["deadline"]).split(\'.\')[1]))*1000000000)}')) # from line 544, col 36.
                write(u''';
#endif
  // Component Timer - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 546, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 546, col 24.
                write(u'''
  timer_options = 
    NAMESPACE::TimerOptions
''')
                if VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["period"] == "0.0": # generated from line 549, col 1
                    write(u'''    (ros::Duration(-1),
''')
                else: # generated from line 551, col 1
                    write(u'''    (ros::Duration(''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["period"] # u'$timer.properties["period"]' on line 552, col 20
                    if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["period"]')) # from line 552, col 20.
                    write(u'''),
''')
                write(u'''     boost::bind(&''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 554, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 554, col 19.
                write(u'''::''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 554, col 36
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 554, col 36.
                write(u'''_operation, this, _1),
''')
                if VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["period"] == "0.0": # generated from line 555, col 1
                    write(u'''     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif 
     true,
     false);
''')
                else: # generated from line 562, col 1
                    write(u'''     &this->comp_queue,
#ifdef USE_ROSMOD     
     callback_options,
#endif 
     false,
     false);
''')
                write(u'''  this->''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'$(timer.properties["name"])' on line 570, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$(timer.properties["name"])')) # from line 570, col 9.
                write(u''' = nh.createTimer(timer_options);
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"component_type",True) == "KSP": # generated from line 574, col 1
            write(u'''  krpci_client.SetName(config.nodeName + "_" + config.compName);
''')
        write(u'''
  this->init_timer.start();
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"timers",True)): # generated from line 579, col 1
            for timer in VFSL([locals()]+SL+[globals(), builtin],"timers",True): # generated from line 580, col 1
                write(u'''  this->''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'$(timer.properties["name"])' on line 581, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$(timer.properties["name"])')) # from line 581, col 9.
                write(u'''.start();
''')
        write(u'''}

extern "C" {
  Component *maker(ComponentConfig &config, int argc, char **argv) {
    return new ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'${component_name}' on line 588, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 588, col 16.
        write(u'''(config,argc,argv);
  }
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_component_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(component_cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(component_cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(component_cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=component_cpp()).run()


