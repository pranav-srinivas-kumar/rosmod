#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1456002507.351107
__CHEETAH_genTimestamp__ = 'Sat Feb 20 15:08:27 2016'
__CHEETAH_src__ = '/home/jeb/Repositories/rosmod/gui/templates/component_hpp.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Feb  1 13:14:44 2016'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class component_hpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(component_hpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#ifndef ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"define_guard",True) # u'${define_guard}' on line 1, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${define_guard}')) # from line 1, col 9.
        write(u'''_HPP
#define ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"define_guard",True) # u'${define_guard}' on line 2, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${define_guard}')) # from line 2, col 9.
        write(u'''_HPP
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"hash_include",True) # u'$hash_include' on line 3, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 3, col 1.
        write(u''' "node/Component.hpp"
''')
        for topic in VFSL([locals()]+SL+[globals(), builtin],"topics",True): # generated from line 4, col 1
            _v = VFSL([locals()]+SL+[globals(), builtin],"hash_include",True) # u'$hash_include' on line 5, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 5, col 1.
            write(u''' "''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"topic",True)[0] # u'$topic[0]' on line 5, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$topic[0]')) # from line 5, col 16.
            write(u'''/''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"topic",True)[1] # u'${topic[1]}' on line 5, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'${topic[1]}')) # from line 5, col 26.
            write(u'''.h"
''')
        for service in VFSL([locals()]+SL+[globals(), builtin],"services",True): # generated from line 7, col 1
            _v = VFSL([locals()]+SL+[globals(), builtin],"hash_include",True) # u'$hash_include' on line 8, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 8, col 1.
            write(u''' "''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"service",True)[0] # u'$service[0]' on line 8, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$service[0]')) # from line 8, col 16.
            write(u'''/''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"service",True)[1] # u'${service[1]}' on line 8, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'${service[1]}')) # from line 8, col 28.
            write(u'''.h"
''')
        write(u'''
#ifdef USE_ROSMOD
  #include "rosmod/rosmod_ros.h"
#else
  #ifdef USE_ROSCPP
    #include "ros/ros.h"
  #endif
#endif

''')
        if VFSL([locals()]+SL+[globals(), builtin],"component_type",True) == 'KSP': # generated from line 19, col 1
            _v = VFSL([locals()]+SL+[globals(), builtin],"hash_include",True) # u'$hash_include' on line 20, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 20, col 1.
            write(u''' "krpci/krpci.hpp"
''')
        if VFSL([locals()]+SL+[globals(), builtin],"component_type",True) == 'SUMO': # generated from line 22, col 1
            _v = VFSL([locals()]+SL+[globals(), builtin],"hash_include",True) # u'$hash_include' on line 23, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 23, col 1.
            write(u''' "sumo/sumo_client.hpp"
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 26, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"publishers",True)) > 0: # generated from line 27, col 1
                _v = VFSL([locals()]+SL+[globals(), builtin],"hash_include",True) # u'$hash_include' on line 28, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 28, col 1.
                write(u''' "network/sender.hpp"
''')
            if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"subscribers",True)) > 0: # generated from line 30, col 1
                _v = VFSL([locals()]+SL+[globals(), builtin],"hash_include",True) # u'$hash_include' on line 31, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$hash_include')) # from line 31, col 1.
                write(u''' "network/receiver.hpp"
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"user_includes",True) == "": # generated from line 35, col 1
            write(u'''//# Start User Includes Marker
//# End User Includes Marker
''')
        else: # generated from line 38, col 1
            write(u'''//# Start User Includes Marker
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"user_includes",True) # u'$user_includes' on line 40, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$user_includes')) # from line 40, col 1.
            write(u'''//# End User Includes Marker
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"hpp_globals",True) == "": # generated from line 43, col 1
            write(u'''//# Start User Globals Marker
//# End User Globals Marker
''')
        else: # generated from line 46, col 1
            write(u'''//# Start User Globals Marker
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"hpp_globals",True) # u'$hpp_globals' on line 48, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$hpp_globals')) # from line 48, col 1.
            write(u'''//# End User Globals Marker
''')
        write(u'''
class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'$component_name' on line 51, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'$component_name')) # from line 51, col 7.
        write(u''' : public Component
{
public:
  // Constructor
  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'${component_name}' on line 55, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 55, col 3.
        write(u'''(ComponentConfig& _config, int argc, char **argv)
  : Component(_config, argc, argv) {}

  // Initialization
  void init_timer_operation(const NAMESPACE::TimerEvent& event);

''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"subscribers",True)) > 0: # generated from line 61, col 1
            for sub in VFSL([locals()]+SL+[globals(), builtin],"subscribers",True): # generated from line 62, col 1
                write(u'''  // Subscriber Operation - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 63, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 63, col 29.
                write(u'''
  void ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'${sub.properties["name"]}' on line 64, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["name"]}')) # from line 64, col 8.
                write(u'''_operation(const ''')
                _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"parent",True),"properties",True)["name"] # u'$sub.properties["message_reference"].parent.properties["name"]' on line 64, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["message_reference"].parent.properties["name"]')) # from line 64, col 50.
                write(u'''::''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["message_reference"],"properties",True)["name"] # u'${sub.properties["message_reference"].properties["name"]}' on line 64, col 114
                if _v is not None: write(_filter(_v, rawExpr=u'${sub.properties["message_reference"].properties["name"]}')) # from line 64, col 114.
                write(u'''::ConstPtr& received_data); 
 
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"provided_services",True)) > 0: # generated from line 68, col 1
            for server in VFSL([locals()]+SL+[globals(), builtin],"servers",True): # generated from line 69, col 1
                write(u'''  // Server Operation - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'$server.properties["name"]' on line 70, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["name"]')) # from line 70, col 25.
                write(u'''
  bool ''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'${server.properties["service_reference"].properties["name"]}' on line 71, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["service_reference"].properties["name"]}')) # from line 71, col 8.
                write(u'''_operation(''')
                _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 71, col 79
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 71, col 79.
                write(u'''::''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 71, col 146
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 71, col 146.
                write(u'''::Request &req, 
    ''')
                _v = VFN(VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"parent",True),"properties",True)["name"] # u'$server.properties["service_reference"].parent.properties["name"]' on line 72, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].parent.properties["name"]')) # from line 72, col 5.
                write(u'''::''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["service_reference"],"properties",True)["name"] # u'$server.properties["service_reference"].properties["name"]' on line 72, col 72
                if _v is not None: write(_filter(_v, rawExpr=u'$server.properties["service_reference"].properties["name"]')) # from line 72, col 72.
                write(u'''::Response &res);

''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"timers",True)) > 0: # generated from line 76, col 1
            for timer in VFSL([locals()]+SL+[globals(), builtin],"timers",True): # generated from line 77, col 1
                write(u'''  // Timer Operation - ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 78, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 78, col 24.
                write(u'''
  void ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'${timer.properties["name"]}' on line 79, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${timer.properties["name"]}')) # from line 79, col 8.
                write(u'''_operation(const NAMESPACE::TimerEvent& event);

''')
        write(u'''  // Start up
  void startUp();

  // Destructor
  ~''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component_name",True) # u'${component_name}' on line 87, col 4
        if _v is not None: write(_filter(_v, rawExpr=u'${component_name}')) # from line 87, col 4.
        write(u'''();

private:

''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"timers",True)) > 0: # generated from line 91, col 1
            for timer in VFSL([locals()]+SL+[globals(), builtin],"timers",True): # generated from line 92, col 1
                write(u'''  // Timer
  NAMESPACE::Timer ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"timer",True),"properties",True)["name"] # u'$timer.properties["name"]' on line 94, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$timer.properties["name"]')) # from line 94, col 20.
                write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"subscribers",True)) > 0: # generated from line 98, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 99, col 1
                write(u'''  // function for when servers are done receiving data
  void mw_recv_done_operation(Network::receiver* receiver_mw);
''')
            for sub in VFSL([locals()]+SL+[globals(), builtin],"subscribers",True): # generated from line 103, col 1
                write(u'''  // Subscriber
  NAMESPACE::Subscriber ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)["name"] # u'$sub.properties["name"]' on line 105, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'$sub.properties["name"]')) # from line 105, col 25.
                write(u''';
''')
                if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 106, col 1
                    write(u'''  // message id for this data stream
  uint64_t ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 108, col 12
                    if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 108, col 12.
                    write(u'''_id;
  // subscriber receiver middleware
  Network::receiver ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"sub",True),"properties",True)['name'] # u"${sub.properties['name']}" on line 110, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u"${sub.properties['name']}")) # from line 110, col 21.
                    write(u'''_recv_mw;
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"publishers",True)) > 0: # generated from line 115, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 116, col 1
                write(u'''  // do we abide by the profiles?
  bool tg_misbehave;
  // size of messages generated
  uint64_t max_data_length;
''')
            for pub in VFSL([locals()]+SL+[globals(), builtin],"publishers",True): # generated from line 122, col 1
                write(u'''  // Publisher 
  NAMESPACE::Publisher ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)["name"] # u'$pub.properties["name"]' on line 124, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'$pub.properties["name"]')) # from line 124, col 24.
                write(u''';
''')
                if VFSL([locals()]+SL+[globals(), builtin],"trafficGen",True): # generated from line 125, col 1
                    write(u'''  // Timer for generating traffic
  NAMESPACE::Timer ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 127, col 20
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 127, col 20.
                    write(u'''_timer;
  // Timer operation for traffic generation
  void ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 129, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 129, col 8.
                    write(u'''_timer_operation(const NAMESPACE::TimerEvent& event);
  // publisher sender middleware
  Network::sender ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"pub",True),"properties",True)['name'] # u"${pub.properties['name']}" on line 131, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u"${pub.properties['name']}")) # from line 131, col 19.
                    write(u'''_send_mw;
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"provided_services",True)) > 0: # generated from line 136, col 1
            for server in VFSL([locals()]+SL+[globals(), builtin],"servers",True): # generated from line 137, col 1
                write(u'''  // Server 
  NAMESPACE::ServiceServer ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"server",True),"properties",True)["name"] # u'${server.properties["name"]}' on line 139, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${server.properties["name"]}')) # from line 139, col 28.
                write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"required_services",True)) > 0: # generated from line 143, col 1
            for client in VFSL([locals()]+SL+[globals(), builtin],"clients",True): # generated from line 144, col 1
                write(u'''  // Client 
  NAMESPACE::ServiceClient ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"client",True),"properties",True)["name"] # u'$client.properties["name"]' on line 146, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$client.properties["name"]')) # from line 146, col 28.
                write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"user_private_variables",True) == "": # generated from line 150, col 1
            write(u'''  //# Start User Private Variables Marker
  //# End User Private Variables Marker
''')
        else: # generated from line 153, col 1
            write(u'''  //# Start User Private Variables Marker
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"user_private_variables",True) # u'$user_private_variables' on line 155, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$user_private_variables')) # from line 155, col 1.
            write(u'''  //# End User Private Variables Marker
''')
        write(u'''};

#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_component_hpp= 'respond'

## END CLASS DEFINITION

if not hasattr(component_hpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(component_hpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(component_hpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=component_hpp()).run()


